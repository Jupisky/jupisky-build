{"version":3,"sources":["logic/collectibles/utils/index.ts","routes/safe/components/Balances/SendModal/screens/ReviewCollectible/style.ts","routes/safe/components/Balances/SendModal/screens/ReviewCollectible/index.tsx","routes/safe/components/Balances/utils/setTokenImgToPlaceholder.ts","routes/safe/components/Balances/assets/token_placeholder.svg","components/layout/Bold/index.tsx","components/Divider/index.tsx","routes/safe/components/Balances/SendModal/SafeInfo/index.tsx","components/ExecuteCheckbox/index.tsx","logic/collectibles/store/selectors/index.ts","logic/tokens/store/actions/fetchTokens.ts"],"names":["CK_ADDRESS","ETHEREUM_NETWORK","MAINNET","RINKEBY","SAFE_TRANSFER_FROM_WITHOUT_DATA_HASH","generateERC721TransferTxData","tx","safeAddress","a","Error","contractAddress","assetAddress","methodToCall","sameAddress","getNetworkId","transferParams","recipientAddress","nftTokenId","includes","NFTTokenInstance","getERC721TokenContract","getERC20TokenContract","methods","encodeABI","styles","createStyles","container","padding","md","lg","amount","marginLeft","sm","buttonRow","height","justifyContent","gap","gasCostsContainer","backgroundColor","background","useStyles","makeStyles","ReviewCollectible","onClose","onPrev","classes","shortener","textShortener","dispatch","useDispatch","extractSafeAddress","nftTokens","useSelector","nftTokensSelector","useState","manualSafeTxGas","setManualSafeTxGas","manualGasPrice","setManualGasPrice","manualGasLimit","setManualGasLimit","executionApproved","setExecutionApproved","txToken","find","tokenId","data","setData","useEstimateTransactionGas","txData","txRecipient","safeTxGas","gasLimit","gasEstimation","gasPriceFormatted","gasCostFormatted","txEstimationExecutionStatus","isExecution","isOffChainSignature","isCreation","doExecute","useEstimationStatus","buttonStatus","useEffect","isCurrent","calculateERC721TransferData","console","error","message","EditableTxParameters","ethGasLimit","ethGasPrice","closeEditModalCallback","txParameters","oldGasPrice","newGasPrice","oldSafeTxGas","newSafeTxGas","toggleEditMode","ModalHeader","subTitle","title","Hairline","Block","className","SafeInfo","Divider","withArrow","Row","margin","Paragraph","color","noMargin","size","style","letterSpacing","align","Col","xs","hash","name","recipientName","showAvatar","showCopyBtn","explorerUrl","getExplorerInfo","charsStart","charsEnd","assetName","Img","alt","onError","setImageToPlaceholder","src","image","ExecuteCheckbox","onChange","TxParametersDetail","onEdit","isTransactionCreation","isTransactionExecution","Modal","Footer","withoutBorder","ButtonStatus","LOADING","Buttons","cancelButtonProps","onClick","text","confirmButtonProps","createTransaction","to","valueInWei","txNonce","safeNonce","ethParameters","notifiedTransaction","TX_NOTIFICATION_TYPES","STANDARD_TX","delayExecution","submitTx","type","status","EstimationStatus","undefined","testId","event","img","currentTarget","test","TokenPlaceholder","Bold","this","props","children","React","Wrapper","styled","div","StyledDivider","DividerSRC","StyledBlock","border","currentSafeWithNames","address","ethBalance","safeName","nativeCoin","getNetworkInfo","symbol","control","defaultChecked","e","target","checked","label","nftAssets","state","NFT_ASSETS_REDUCER_ID","nftAssetsSelector","createSelector","assets","NFT_TOKENS_REDUCER_ID","tokens","nftAssetsToListSelector","Object","values","nftAssetsAddressFromNftTokensSelector","userNftTokens","addresses","map","nftToken","uniqueAddresses","Set","Array","from","orderedNFTAssets","sort","b","localeCompare","nftAssetsFromNftTokensSelector","nftAssetsFromNftTokens","filter","memoize","tokenAddress","getWeb3","eth","Contract","ERC20Contract","abi","ERC721Contract"],"mappings":"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","file":"static/js/45.b5fc19d7.chunk.js","sourcesContent":["import { getNetworkId } from 'src/config'\nimport { ETHEREUM_NETWORK } from 'src/config/networks/network.d'\nimport { getERC721TokenContract, getERC20TokenContract } from 'src/logic/tokens/store/actions/fetchTokens'\nimport { sameAddress } from 'src/logic/wallets/ethAddresses'\nimport { CollectibleTx } from 'src/routes/safe/components/Balances/SendModal/screens/ReviewCollectible'\n\n// CryptoKitties Contract Addresses by network\n// This is an exception made for a popular NFT that's not ERC721 standard-compatible,\n//  so we can allow the user to transfer the assets by using `transferFrom` instead of\n//  the standard `safeTransferFrom` method.\nexport const CK_ADDRESS = {\n  [ETHEREUM_NETWORK.MAINNET]: '0x06012c8cf97bead5deae237070f9587f8e7a266d',\n  [ETHEREUM_NETWORK.RINKEBY]: '0x16baf0de678e52367adc69fd067e5edd1d33e3bf',\n}\n\n// safeTransferFrom(address,address,uint256)\nexport const SAFE_TRANSFER_FROM_WITHOUT_DATA_HASH = '42842e0e'\n\n/**\n * Returns a method identifier based on the asset specified and the current network\n * @param {string} contractAddress\n * @returns string\n */\nexport const getTransferMethodByContractAddress = (contractAddress: string): string => {\n  if (sameAddress(contractAddress, CK_ADDRESS[getNetworkId()])) {\n    // on mainnet `transferFrom` seems to work fine but we can assure that `transfer` will work on both networks\n    // so that's the reason why we're falling back to `transfer` for CryptoKitties\n    return 'transfer'\n  }\n\n  return `0x${SAFE_TRANSFER_FROM_WITHOUT_DATA_HASH}`\n}\n\n/**\n * Builds the encodedABI data for the transfer of an NFT token\n * @param {CollectibleTx} tx\n * @param {string} safeAddress\n * @returns Promise<string>\n */\nexport const generateERC721TransferTxData = async (\n  tx: CollectibleTx,\n  safeAddress: string | undefined,\n): Promise<string> => {\n  if (!safeAddress) {\n    throw new Error('Failed to build NFT transfer tx data. SafeAddress is not defined.')\n  }\n\n  const methodToCall = getTransferMethodByContractAddress(tx.assetAddress)\n  let transferParams = [tx.recipientAddress, tx.nftTokenId]\n  let NFTTokenInstance\n\n  if (methodToCall.includes(SAFE_TRANSFER_FROM_WITHOUT_DATA_HASH)) {\n    // we add the `from` param for the `safeTransferFrom` method call\n    transferParams = [safeAddress, ...transferParams]\n    NFTTokenInstance = getERC721TokenContract(tx.assetAddress)\n  } else {\n    // we fallback to an ERC20 Token contract whose ABI implements the `transfer` method\n    NFTTokenInstance = getERC20TokenContract(tx.assetAddress)\n  }\n\n  return NFTTokenInstance.methods[methodToCall](...transferParams).encodeABI()\n}\n","import { background, lg, md, sm } from 'src/theme/variables'\nimport { createStyles } from '@material-ui/core'\n\nexport const styles = createStyles({\n  container: {\n    padding: `${md} ${lg}`,\n  },\n  amount: {\n    marginLeft: sm,\n  },\n  buttonRow: {\n    height: '84px',\n    justifyContent: 'center',\n    gap: '16px',\n  },\n  gasCostsContainer: {\n    backgroundColor: background,\n    padding: `0 ${lg}`,\n  },\n})\n","import { useEffect, useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { makeStyles } from '@material-ui/core/styles'\n\nimport { getExplorerInfo } from 'src/config'\nimport Divider from 'src/components/Divider'\nimport Block from 'src/components/layout/Block'\nimport Col from 'src/components/layout/Col'\nimport Hairline from 'src/components/layout/Hairline'\nimport Img from 'src/components/layout/Img'\nimport Paragraph from 'src/components/layout/Paragraph'\nimport Row from 'src/components/layout/Row'\nimport { nftTokensSelector } from 'src/logic/collectibles/store/selectors'\nimport { createTransaction } from 'src/logic/safe/store/actions/createTransaction'\nimport { TX_NOTIFICATION_TYPES } from 'src/logic/safe/transactions'\nimport SafeInfo from 'src/routes/safe/components/Balances/SendModal/SafeInfo'\nimport { setImageToPlaceholder } from 'src/routes/safe/components/Balances/utils'\nimport { textShortener } from 'src/utils/strings'\nimport { generateERC721TransferTxData } from 'src/logic/collectibles/utils'\n\nimport { styles } from './style'\nimport { EthHashInfo } from '@gnosis.pm/safe-react-components'\nimport { EstimationStatus, useEstimateTransactionGas } from 'src/logic/hooks/useEstimateTransactionGas'\nimport { useEstimationStatus } from 'src/logic/hooks/useEstimationStatus'\nimport { ButtonStatus, Modal } from 'src/components/Modal'\nimport { TransactionFees } from 'src/components/TransactionsFees'\nimport { EditableTxParameters } from 'src/routes/safe/components/Transactions/helpers/EditableTxParameters'\nimport { TxParametersDetail } from 'src/routes/safe/components/Transactions/helpers/TxParametersDetail'\nimport { TxParameters } from 'src/routes/safe/container/hooks/useTransactionParameters'\nimport { ModalHeader } from '../ModalHeader'\nimport { extractSafeAddress } from 'src/routes/routes'\nimport ExecuteCheckbox from 'src/components/ExecuteCheckbox'\n\nconst useStyles = makeStyles(styles)\n\nexport type CollectibleTx = {\n  recipientAddress: string\n  recipientName?: string\n  assetAddress: string\n  assetName: string\n  nftTokenId: string\n}\n\ntype Props = {\n  onClose: () => void\n  onPrev: () => void\n  tx: CollectibleTx\n}\n\nconst ReviewCollectible = ({ onClose, onPrev, tx }: Props): React.ReactElement => {\n  const classes = useStyles()\n  const shortener = textShortener()\n  const dispatch = useDispatch()\n  const safeAddress = extractSafeAddress()\n  const nftTokens = useSelector(nftTokensSelector)\n  const [manualSafeTxGas, setManualSafeTxGas] = useState('0')\n  const [manualGasPrice, setManualGasPrice] = useState<string | undefined>()\n  const [manualGasLimit, setManualGasLimit] = useState<string | undefined>()\n  const [executionApproved, setExecutionApproved] = useState<boolean>(true)\n\n  const txToken = nftTokens.find(\n    ({ assetAddress, tokenId }) => assetAddress === tx.assetAddress && tokenId === tx.nftTokenId,\n  )\n  const [data, setData] = useState('')\n\n  const {\n    gasLimit,\n    gasEstimation,\n    gasPriceFormatted,\n    gasCostFormatted,\n    txEstimationExecutionStatus,\n    isExecution,\n    isOffChainSignature,\n    isCreation,\n  } = useEstimateTransactionGas({\n    txData: data,\n    txRecipient: tx.assetAddress,\n    safeTxGas: manualSafeTxGas,\n    manualGasPrice,\n    manualGasLimit,\n  })\n\n  const doExecute = isExecution && executionApproved\n  const [buttonStatus] = useEstimationStatus(txEstimationExecutionStatus)\n\n  useEffect(() => {\n    let isCurrent = true\n\n    const calculateERC721TransferData = async () => {\n      try {\n        const txData = await generateERC721TransferTxData(tx, safeAddress)\n        if (isCurrent) {\n          setData(txData)\n        }\n      } catch (error) {\n        console.error('Error calculating ERC721 transfer data:', error.message)\n      }\n    }\n    calculateERC721TransferData()\n\n    return () => {\n      isCurrent = false\n    }\n  }, [safeAddress, tx])\n\n  const submitTx = (txParameters: TxParameters) => {\n    try {\n      if (safeAddress) {\n        dispatch(\n          createTransaction({\n            safeAddress,\n            to: tx.assetAddress,\n            valueInWei: '0',\n            txData: data,\n            txNonce: txParameters.safeNonce,\n            safeTxGas: txParameters.safeTxGas,\n            ethParameters: txParameters,\n            notifiedTransaction: TX_NOTIFICATION_TYPES.STANDARD_TX,\n            delayExecution: !executionApproved,\n          }),\n        )\n      } else {\n        console.error('There was an error trying to submit the transaction, the safeAddress was not found')\n      }\n    } catch (error) {\n      console.error('Error creating sendCollectible Tx:', error)\n    } finally {\n      onClose()\n    }\n  }\n\n  const closeEditModalCallback = (txParameters: TxParameters) => {\n    const oldGasPrice = gasPriceFormatted\n    const newGasPrice = txParameters.ethGasPrice\n    const oldSafeTxGas = gasEstimation\n    const newSafeTxGas = txParameters.safeTxGas\n\n    if (newGasPrice && oldGasPrice !== newGasPrice) {\n      setManualGasPrice(txParameters.ethGasPrice)\n    }\n\n    if (txParameters.ethGasLimit && gasLimit !== txParameters.ethGasLimit) {\n      setManualGasLimit(txParameters.ethGasLimit)\n    }\n\n    if (newSafeTxGas && oldSafeTxGas !== newSafeTxGas) {\n      setManualSafeTxGas(newSafeTxGas)\n    }\n  }\n\n  return (\n    <EditableTxParameters\n      isOffChainSignature={isOffChainSignature}\n      isExecution={doExecute}\n      ethGasLimit={gasLimit}\n      ethGasPrice={gasPriceFormatted}\n      safeTxGas={gasEstimation}\n      closeEditModalCallback={closeEditModalCallback}\n    >\n      {(txParameters, toggleEditMode) => (\n        <>\n          <ModalHeader onClose={onClose} subTitle=\"2 of 2\" title=\"Send collectible\" />\n          <Hairline />\n          <Block className={classes.container}>\n            <SafeInfo />\n            <Divider withArrow />\n            <Row margin=\"xs\">\n              <Paragraph color=\"disabled\" noMargin size=\"md\" style={{ letterSpacing: '-0.5px' }}>\n                Recipient\n              </Paragraph>\n            </Row>\n            <Row align=\"center\" margin=\"md\">\n              <Col xs={12}>\n                <EthHashInfo\n                  hash={tx.recipientAddress}\n                  name={tx.recipientName}\n                  showAvatar\n                  showCopyBtn\n                  explorerUrl={getExplorerInfo(tx.recipientAddress)}\n                />\n              </Col>\n            </Row>\n            <Row margin=\"xs\">\n              <Paragraph color=\"disabled\" noMargin size=\"md\" style={{ letterSpacing: '-0.5px' }}>\n                {textShortener({ charsStart: 40, charsEnd: 0 })(tx.assetName)}\n              </Paragraph>\n            </Row>\n            {txToken && (\n              <Row align=\"center\" margin=\"md\">\n                <Img alt={txToken.name} height={28} onError={setImageToPlaceholder} src={txToken.image} />\n                <Paragraph className={classes.amount} noMargin size=\"md\">\n                  {shortener(txToken.name)} (Token ID: {shortener(txToken.tokenId as string)})\n                </Paragraph>\n              </Row>\n            )}\n\n            {isExecution && <ExecuteCheckbox onChange={setExecutionApproved} />}\n\n            {/* Tx Parameters */}\n            <TxParametersDetail\n              txParameters={txParameters}\n              onEdit={toggleEditMode}\n              isTransactionCreation={isCreation}\n              isTransactionExecution={doExecute}\n              isOffChainSignature={isOffChainSignature}\n            />\n          </Block>\n          <div className={classes.gasCostsContainer}>\n            <TransactionFees\n              gasCostFormatted={gasCostFormatted}\n              isExecution={doExecute}\n              isCreation={isCreation}\n              isOffChainSignature={isOffChainSignature}\n              txEstimationExecutionStatus={txEstimationExecutionStatus}\n            />\n          </div>\n          <Modal.Footer withoutBorder={buttonStatus !== ButtonStatus.LOADING}>\n            <Modal.Footer.Buttons\n              cancelButtonProps={{ onClick: onPrev, text: 'Back' }}\n              confirmButtonProps={{\n                onClick: () => submitTx(txParameters),\n                type: 'submit',\n                status: buttonStatus,\n                text: txEstimationExecutionStatus === EstimationStatus.LOADING ? 'Estimating' : undefined,\n                testId: 'submit-tx-btn',\n              }}\n            />\n          </Modal.Footer>\n        </>\n      )}\n    </EditableTxParameters>\n  )\n}\n\nexport default ReviewCollectible\n","import { SyntheticEvent } from 'react'\n\nimport TokenPlaceholder from 'src/routes/safe/components/Balances/assets/token_placeholder.svg'\n\nexport const setImageToPlaceholder = (event: SyntheticEvent<HTMLImageElement, Event>): void => {\n  const img = event.currentTarget\n  if (!/token_placeholder/.test(img.src)) {\n    img.src = TokenPlaceholder\n  }\n}\n","export default __webpack_public_path__ + \"static/media/token_placeholder.c1abe466.svg\";","import * as React from 'react'\n\nclass Bold extends React.PureComponent<any> {\n  render() {\n    const { children, ...props } = this.props\n\n    return <b {...props}>{children}</b>\n  }\n}\n\nexport default Bold\n","import { ReactElement } from 'react'\nimport styled from 'styled-components'\nimport { Icon, Divider as DividerSRC } from '@gnosis.pm/safe-react-components'\n\nconst Wrapper = styled.div`\n  display: flex;\n  align-items: center;\n  margin: 8px 0;\n\n  svg {\n    margin: 0 12px 0 4px;\n  }\n`\nconst StyledDivider = styled(DividerSRC)`\n  width: 100%;\n`\n\ntype Props = {\n  withArrow?: boolean\n}\n\nconst Divider = ({ withArrow }: Props): ReactElement => (\n  <Wrapper>\n    {withArrow && <Icon type=\"arrowDown\" size=\"md\" />}\n    <StyledDivider />\n  </Wrapper>\n)\n\nexport default Divider\n","import { useSelector } from 'react-redux'\nimport { EthHashInfo } from '@gnosis.pm/safe-react-components'\nimport styled from 'styled-components'\n\nimport { getExplorerInfo, getNetworkInfo } from 'src/config'\nimport { currentSafeWithNames } from 'src/logic/safe/store/selectors'\nimport Paragraph from 'src/components/layout/Paragraph'\nimport Bold from 'src/components/layout/Bold'\nimport { border, xs } from 'src/theme/variables'\nimport Block from 'src/components/layout/Block'\n\nconst StyledBlock = styled(Block)`\n  font-size: 12px;\n  line-height: 1.08;\n  letter-spacing: -0.5px;\n  background-color: ${border};\n  width: fit-content;\n  padding: 5px 10px;\n  margin-top: ${xs};\n  margin-left: 40px;\n  border-radius: 3px;\n`\n\nconst SafeInfo = (): React.ReactElement => {\n  const { address: safeAddress, ethBalance, name: safeName } = useSelector(currentSafeWithNames)\n  const { nativeCoin } = getNetworkInfo()\n\n  return (\n    <>\n      <EthHashInfo\n        hash={safeAddress}\n        name={safeName}\n        explorerUrl={getExplorerInfo(safeAddress)}\n        showAvatar\n        showCopyBtn\n      />\n      {ethBalance && (\n        <StyledBlock>\n          <Paragraph noMargin>\n            Balance: <Bold data-testid=\"current-eth-balance\">{`${ethBalance} ${nativeCoin.symbol}`}</Bold>\n          </Paragraph>\n        </StyledBlock>\n      )}\n    </>\n  )\n}\n\nexport default SafeInfo\n","import { ReactElement } from 'react'\nimport { Checkbox, FormControlLabel } from '@material-ui/core'\nimport Row from 'src/components/layout/Row'\nimport Paragraph from '../layout/Paragraph'\n\ninterface ExecuteCheckboxProps {\n  onChange: (val: boolean) => unknown\n}\n\nconst ExecuteCheckbox = ({ onChange }: ExecuteCheckboxProps): ReactElement | null => {\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\n    onChange(e.target.checked)\n  }\n  return (\n    <Row margin=\"md\">\n      <Paragraph noMargin>\n        If you want to sign the transaction now but manually execute it later, click on the checkbox below.\n      </Paragraph>\n      <FormControlLabel\n        control={<Checkbox defaultChecked color=\"primary\" onChange={handleChange} />}\n        label=\"Execute transaction\"\n        data-testid=\"execute-checkbox\"\n      />\n    </Row>\n  )\n}\n\nexport default ExecuteCheckbox\n","import { createSelector } from 'reselect'\nimport { NFTAsset, NFTAssets, NFTToken, NFTTokens } from 'src/logic/collectibles/sources/collectibles.d'\n\nimport { AppReduxState } from 'src/store'\nimport { NFT_ASSETS_REDUCER_ID, NFT_TOKENS_REDUCER_ID } from 'src/logic/collectibles/store/reducer/collectibles'\nexport const nftAssets = (state: AppReduxState): NFTAssets => state[NFT_ASSETS_REDUCER_ID]\nexport const nftTokens = (state: AppReduxState): NFTTokens => state[NFT_TOKENS_REDUCER_ID]\n\nexport const nftAssetsSelector = createSelector(nftAssets, (assets) => assets)\n\nexport const nftTokensSelector = createSelector(nftTokens, (tokens) => tokens)\n\nconst nftAssetsToListSelector = createSelector(nftAssets, (assets): NFTAsset[] => {\n  return assets ? Object.values(assets) : []\n})\n\nconst nftAssetsAddressFromNftTokensSelector = createSelector(nftTokensSelector, (userNftTokens): string[] => {\n  const addresses = userNftTokens.map((nftToken) => nftToken.assetAddress)\n  const uniqueAddresses = new Set(addresses)\n  return Array.from(uniqueAddresses)\n})\n\nexport const orderedNFTAssets = createSelector(nftTokensSelector, (userNftTokens): NFTToken[] =>\n  userNftTokens.sort((a, b) => a.name.localeCompare(b.name)),\n)\n\nexport const nftAssetsFromNftTokensSelector = createSelector(\n  nftAssetsToListSelector,\n  nftAssetsAddressFromNftTokensSelector,\n  (nftAssets, nftAssetsFromNftTokens): NFTAsset[] => {\n    return nftAssets\n      .sort((a, b) => a.name.localeCompare(b.name))\n      .filter(({ address }) => nftAssetsFromNftTokens.includes(address))\n  },\n)\n","import ERC20Contract from '@openzeppelin/contracts/build/contracts/ERC20.json'\nimport ERC721Contract from '@openzeppelin/contracts/build/contracts/ERC721.json'\nimport { List } from 'immutable'\nimport memoize from 'lodash.memoize'\nimport { AnyAction } from 'redux'\nimport { ThunkDispatch } from 'redux-thunk'\nimport { AbiItem } from 'web3-utils'\n\nimport { ERC20 } from 'src/types/contracts/ERC20.d'\nimport { ERC721 } from 'src/types/contracts/ERC721.d'\nimport { addTokens } from 'src/logic/tokens/store/actions/addTokens'\nimport { fetchErc20AndErc721AssetsList } from 'src/logic/tokens/api'\nimport { makeToken } from 'src/logic/tokens/store/model/token'\nimport { tokensSelector } from 'src/logic/tokens/store/selectors'\nimport { getWeb3 } from 'src/logic/wallets/getWeb3'\nimport { AppReduxState } from 'src/store'\nimport { Errors, logError } from 'src/logic/exceptions/CodedException'\nimport { TokenResult } from '../../api/fetchErc20AndErc721AssetsList'\n\nconst createERC20TokenContract = (tokenAddress: string): ERC20 => {\n  const web3 = getWeb3()\n  return new web3.eth.Contract(ERC20Contract.abi as AbiItem[], tokenAddress) as unknown as ERC20\n}\n\nconst createERC721TokenContract = (tokenAddress: string): ERC721 => {\n  const web3 = getWeb3()\n  return new web3.eth.Contract(ERC721Contract.abi as AbiItem[], tokenAddress) as unknown as ERC721\n}\n\nexport const getERC20TokenContract = memoize(createERC20TokenContract)\n\nexport const getERC721TokenContract = memoize(createERC721TokenContract)\n\nexport const containsMethodByHash = async (contractAddress: string, methodHash: string): Promise<boolean> => {\n  const web3 = getWeb3()\n  const byteCode = await web3.eth.getCode(contractAddress)\n\n  return byteCode.indexOf(methodHash.replace('0x', '')) !== -1\n}\n\nexport const fetchTokens =\n  () =>\n  async (\n    dispatch: ThunkDispatch<AppReduxState, undefined, AnyAction>,\n    getState: () => AppReduxState,\n  ): Promise<void> => {\n    const currentSavedTokens = tokensSelector(getState())\n\n    let tokenList: TokenResult[]\n    try {\n      const resp = await fetchErc20AndErc721AssetsList()\n      tokenList = resp.data.results\n    } catch (e) {\n      logError(Errors._600, e.message)\n      return\n    }\n\n    const erc20Tokens = tokenList.filter((token) => token.type.toLowerCase() === 'erc20')\n\n    if (currentSavedTokens?.size === erc20Tokens.length) {\n      return\n    }\n\n    const tokens = List(erc20Tokens.map((token) => makeToken(token)))\n\n    dispatch(addTokens(tokens))\n  }\n"],"sourceRoot":""}