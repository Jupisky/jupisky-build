{"version":3,"sources":["components/WhenFieldChanges/index.tsx","routes/safe/components/Balances/SendModal/screens/SendCollectible/CollectibleSelectField/style.ts","routes/safe/components/Balances/SendModal/screens/SendCollectible/CollectibleSelectField/index.tsx","routes/safe/components/Balances/SendModal/screens/SendCollectible/style.ts","routes/safe/components/Balances/SendModal/screens/SendCollectible/TokenSelectField/style.ts","routes/safe/components/Balances/SendModal/screens/SendCollectible/TokenSelectField/index.tsx","routes/safe/components/Balances/SendModal/screens/SendCollectible/index.tsx","components/forms/Field/index.tsx","routes/safe/components/Balances/SendModal/screens/ModalHeader/style.ts","routes/safe/components/Balances/SendModal/screens/ModalHeader/index.tsx","routes/safe/components/Balances/utils/setTokenImgToPlaceholder.ts","components/forms/GnoForm/index.tsx","routes/safe/components/Balances/assets/token_placeholder.svg","components/layout/Bold/index.tsx","assets/icons/qrcode.svg","components/ScanQRModal/style.ts","components/ScanQRModal/index.tsx","components/ScanQRModal/ScanQRWrapper/index.tsx","components/Divider/index.tsx","components/forms/SelectField/index.tsx","routes/safe/components/Balances/SendModal/SafeInfo/index.tsx","../node_modules/react-final-form-listeners/dist/react-final-form-listeners.es.js","routes/safe/components/Balances/SendModal/screens/AddressBookInput/style.ts","routes/safe/components/Balances/SendModal/screens/AddressBookInput/index.tsx","logic/collectibles/store/selectors/index.ts","../node_modules/@material-ui/core/esm/ListItemIcon/ListItemIcon.js"],"names":["WhenFieldChanges","field","set","to","name","subscription","onChange","input","selectedTokenStyles","createStyles","container","minHeight","padding","width","tokenData","margin","lineHeight","tokenImage","marginRight","sm","selectStyles","selectMenu","paddingRight","useSelectedCollectibleStyles","makeStyles","SelectedCollectible","tokenId","tokens","classes","token","find","id","shortener","textShortener","charsStart","charsEnd","MenuItem","className","ListItemIcon","Img","alt","description","height","onError","setImageToPlaceholder","src","image","ListItemText","primary","secondary","toString","Paragraph","color","size","style","opacity","weight","useCollectibleSelectFieldStyles","CollectibleSelectField","initialValue","Field","component","SelectField","disabled","length","renderValue","nftTokenId","validate","required","map","value","assetAddress","styles","qrCodeBtn","cursor","formContainer","md","lg","buttonRow","justifyContent","gap","display","useSelectedTokenStyles","SelectedToken","assets","asset","numberOfTokens","formatAmount","symbol","useTokenSelectFieldStyles","TokenSelectField","tokenClasses","assetsAddresses","Object","keys","slug","formMutators","setMax","args","state","utils","changeValue","onTokenChange","setRecipient","useStyles","SendCollectible","initialValues","onClose","onNext","recipientAddress","selectedToken","nftAssets","useSelector","nftAssetsSelector","nftTokens","nftTokensSelector","addressBook","currentNetworkAddressBook","useState","defaultEntry","address","predefinedAddress","addressBookEntry","sameAddress","selectedEntry","setSelectedEntry","pristine","setPristine","isValidAddress","setIsValidAddress","useMemo","ModalHeader","subTitle","title","Hairline","GnoForm","onSubmit","values","recipientName","assetName","formState","mutators","selectedNFTTokens","filter","nftToken","handleScan","closeQrModal","scannedAddress","startsWith","replace","scannedName","shouldDisableSubmitButton","Block","SafeInfo","Divider","withArrow","onKeyDown","e","sameString","key","onClick","role","tabIndex","Row","noMargin","letterSpacing","align","Col","xs","hash","showAvatar","showCopyBtn","explorerUrl","getExplorerInfo","AddressBookInput","fieldMutator","center","middle","ScanQRWrapper","between","tokenAddress","Modal","Footer","Buttons","cancelButtonProps","confirmButtonProps","testId","text","GnoField","props","heading","boxSizing","maxHeight","annotation","secondaryText","marginLeft","headingText","fontSize","closeIcon","chainIndicator","alignItems","icon","iconUrl","connectedNetwork","getNetworkInfo","grow","ChainIndicator","chainId","IconButton","disableRipple","event","img","currentTarget","test","TokenPlaceholder","stylesBasedOn","flexDirection","flex","children","decorators","validation","render","handleSubmit","rest","submitting","validating","form","Bold","this","React","loaderContainer","close","detailsContainer","backgroundColor","background","button","ScanQRModal","isOpen","onScan","fileUploadModalOpen","setFileUploadModalOpen","error","setError","cameraBlocked","setCameraBlocked","scannerRef","openImageDialog","current","useEffect","onFileScannedResolve","successData","console","handleClose","open","layout","legacyMode","err","data","ref","facingMode","Button","minWidth","variant","qrModalOpen","setQrModalOpen","QRIcon","Wrapper","styled","div","StyledDivider","DividerSRC","type","SelectInput","disableError","formControlProps","restInput","label","meta","showError","submitError","dirtySinceLastSubmit","touched","inputProps","htmlFor","StyledBlock","border","currentSafeWithNames","safeAddress","ethBalance","safeName","nativeCoin","_extends","assign","target","i","arguments","source","prototype","hasOwnProperty","call","apply","_inheritsLoose","subClass","superClass","create","constructor","__proto__","Component","OnChangeState","_React$Component","_this","previous","_proto","componentDidUpdate","_this$props","setState","OnChange","_ref","createElement","allowNull","useTextFieldLabelStyle","root","overflow","borderRadius","useTextFieldInputStyle","BaseAddressBookInput","addressBookEntries","setValidationText","validationText","networkId","currentChainId","updateAddressInfo","addressEntry","validateAddress","addressErrorMessage","mustBeEthereumAddress","checkedAddr","checksumAddress","filteredEntries","filterAddressEntries","inputValue","onInputChange","_","reason","a","normalizedValue","trimSpaces","isFeatureEnabled","FEATURES","DOMAIN_LOOKUP","isValidEnsName","isValidCryptoDomainName","getAddressFromDomain","logError","Errors","_101","message","validatedAddress","labelStyles","inputStyles","Autocomplete","openOnFocus","filterOptions","freeSolo","options","renderInput","params","autoFocus","fullWidth","InputLabelProps","shrink","InputProps","getOptionLabel","renderOption","flexGrow","errorMsg","ContractsAddressBookInput","setFilteredEntries","filterContractAddresses","filterContractAddressBookEntries","filteredADBK","onSetSelectedEntry","mustBeEthereumContractAddress","contractAddressErrorMessage","NFT_ASSETS_REDUCER_ID","createSelector","NFT_TOKENS_REDUCER_ID","nftAssetsToListSelector","nftAssetsAddressFromNftTokensSelector","userNftTokens","addresses","uniqueAddresses","Set","Array","from","orderedNFTAssets","sort","b","localeCompare","nftAssetsFromNftTokensSelector","nftAssetsFromNftTokens","includes","other","_objectWithoutProperties","context","ListContext","clsx","alignItemsFlexStart","withStyles","theme","palette","action","active","flexShrink","marginTop"],"mappings":"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","file":"static/js/37.81e36697.chunk.js","sourcesContent":["import { OnChange } from 'react-final-form-listeners'\n\nimport GnoField from 'src/components/forms/Field'\n\nconst WhenFieldChanges = ({ field, set, to }) => (\n  <GnoField name={set} subscription={{}}>\n    {(\n      // No subscription. We only use Field to get to the change function\n      { input: { onChange } },\n    ) => (\n      <OnChange name={field}>\n        {() => {\n          onChange(to)\n        }}\n      </OnChange>\n    )}\n  </GnoField>\n)\nexport default WhenFieldChanges\n","import { sm } from 'src/theme/variables'\nimport { createStyles } from '@material-ui/core'\n\nexport const selectedTokenStyles = createStyles({\n  container: {\n    minHeight: '55px',\n    padding: 0,\n    width: '100%',\n  },\n  tokenData: {\n    padding: 0,\n    margin: 0,\n    lineHeight: '14px',\n  },\n  tokenImage: {\n    marginRight: sm,\n  },\n})\n\nexport const selectStyles = createStyles({\n  selectMenu: {\n    paddingRight: 0,\n  },\n  tokenImage: {\n    marginRight: sm,\n  },\n})\n","import ListItemIcon from '@material-ui/core/ListItemIcon'\nimport ListItemText from '@material-ui/core/ListItemText'\nimport MenuItem from '@material-ui/core/MenuItem'\nimport { makeStyles } from '@material-ui/core/styles'\n\nimport { selectStyles, selectedTokenStyles } from './style'\n\nimport Field from 'src/components/forms/Field'\nimport SelectField from 'src/components/forms/SelectField'\nimport { required } from 'src/components/forms/validator'\nimport Img from 'src/components/layout/Img'\nimport Paragraph from 'src/components/layout/Paragraph'\nimport { setImageToPlaceholder } from 'src/routes/safe/components/Balances/utils'\nimport { textShortener } from 'src/utils/strings'\nimport { NFTToken } from 'src/logic/collectibles/sources/collectibles.d'\n\nconst useSelectedCollectibleStyles = makeStyles(selectedTokenStyles)\n\ntype SelectedCollectibleProps = {\n  tokenId?: number | string\n  tokens: NFTToken[]\n}\n\nconst SelectedCollectible = ({ tokenId, tokens }: SelectedCollectibleProps): React.ReactElement => {\n  const classes = useSelectedCollectibleStyles()\n  const token = tokenId && tokens ? tokens.find(({ tokenId: id }) => tokenId === id) : null\n  const shortener = textShortener({ charsStart: 40, charsEnd: 0 })\n\n  return (\n    <MenuItem className={classes.container}>\n      {token ? (\n        <>\n          <ListItemIcon className={classes.tokenImage}>\n            <Img alt={token.description} height={28} onError={setImageToPlaceholder} src={token.image} />\n          </ListItemIcon>\n          <ListItemText\n            className={classes.tokenData}\n            primary={shortener(token.name)}\n            secondary={`token ID: ${shortener(token.tokenId.toString())}`}\n          />\n        </>\n      ) : (\n        <Paragraph color=\"disabled\" size=\"md\" style={{ opacity: 0.5 }} weight=\"light\">\n          Select a token*\n        </Paragraph>\n      )}\n    </MenuItem>\n  )\n}\n\nconst useCollectibleSelectFieldStyles = makeStyles(selectStyles)\n\ntype CollectibleSelectFieldProps = {\n  initialValue?: number | string\n  tokens: NFTToken[]\n}\n\nexport const CollectibleSelectField = ({ initialValue, tokens }: CollectibleSelectFieldProps): React.ReactElement => {\n  const classes = useCollectibleSelectFieldStyles()\n\n  return (\n    <Field\n      className={classes.selectMenu}\n      component={SelectField}\n      disabled={!tokens.length}\n      initialValue={initialValue}\n      name=\"nftTokenId\"\n      renderValue={(nftTokenId) => <SelectedCollectible tokenId={nftTokenId} tokens={tokens} />}\n      validate={required}\n    >\n      {tokens.map((token) => (\n        <MenuItem key={`${token.assetAddress}-${token.tokenId}`} value={token.tokenId}>\n          <ListItemIcon className={classes.tokenImage}>\n            <Img alt={token.name} height={28} onError={setImageToPlaceholder} src={token.image} />\n          </ListItemIcon>\n          <ListItemText primary={token.name} secondary={`token ID: ${token.tokenId}`} />\n        </MenuItem>\n      ))}\n    </Field>\n  )\n}\n","import { lg, md } from 'src/theme/variables'\nimport { createStyles } from '@material-ui/core'\n\nexport const styles = createStyles({\n  qrCodeBtn: {\n    cursor: 'pointer',\n  },\n  formContainer: {\n    padding: `${md} ${lg}`,\n  },\n  buttonRow: {\n    height: '84px',\n    justifyContent: 'center',\n    gap: '16px',\n  },\n})\n","import { sm } from 'src/theme/variables'\nimport { createStyles } from '@material-ui/core'\n\nexport const selectedTokenStyles = createStyles({\n  container: {\n    minHeight: '55px',\n    padding: 0,\n    width: '100%',\n  },\n  tokenData: {\n    padding: 0,\n    margin: 0,\n    lineHeight: '14px',\n  },\n  tokenImage: {\n    display: 'block',\n    marginRight: sm,\n    height: 28,\n    width: 'auto',\n  },\n})\n\nexport const selectStyles = createStyles({\n  selectMenu: {\n    paddingRight: 0,\n  },\n  tokenImage: {\n    marginRight: sm,\n  },\n})\n","import ListItemIcon from '@material-ui/core/ListItemIcon'\nimport ListItemText from '@material-ui/core/ListItemText'\nimport MenuItem from '@material-ui/core/MenuItem'\nimport { makeStyles } from '@material-ui/core/styles'\n\nimport { selectStyles, selectedTokenStyles } from './style'\n\nimport Field from 'src/components/forms/Field'\nimport SelectField from 'src/components/forms/SelectField'\nimport { required } from 'src/components/forms/validator'\nimport Img from 'src/components/layout/Img'\nimport Paragraph from 'src/components/layout/Paragraph'\nimport { formatAmount } from 'src/logic/tokens/utils/formatAmount'\nimport { setImageToPlaceholder } from 'src/routes/safe/components/Balances/utils'\nimport { textShortener } from 'src/utils/strings'\nimport { NFTAssets } from 'src/logic/collectibles/sources/collectibles.d'\n\nconst useSelectedTokenStyles = makeStyles(selectedTokenStyles)\n\ntype SelectedTokenProps = {\n  assetAddress?: string\n  assets: NFTAssets\n}\n\nconst SelectedToken = ({ assetAddress, assets }: SelectedTokenProps): React.ReactElement => {\n  const classes = useSelectedTokenStyles()\n  const asset = assetAddress ? assets[assetAddress] : null\n  const shortener = textShortener({ charsStart: 40, charsEnd: 0 })\n\n  return (\n    <MenuItem className={classes.container}>\n      {asset && asset.numberOfTokens ? (\n        <>\n          <ListItemIcon>\n            <Img className={classes.tokenImage} alt={asset.name} onError={setImageToPlaceholder} src={asset.image} />\n          </ListItemIcon>\n          <ListItemText\n            className={classes.tokenData}\n            primary={shortener(asset.name)}\n            secondary={`${formatAmount(asset.numberOfTokens.toString())} ${asset.symbol}`}\n          />\n        </>\n      ) : (\n        <Paragraph color=\"disabled\" size=\"md\" style={{ opacity: 0.5 }} weight=\"light\">\n          Select an asset*\n        </Paragraph>\n      )}\n    </MenuItem>\n  )\n}\n\nconst useTokenSelectFieldStyles = makeStyles(selectStyles)\n\ntype TokenSelectFieldProps = {\n  assets: NFTAssets\n  initialValue?: string\n}\n\nconst TokenSelectField = ({ assets, initialValue }: TokenSelectFieldProps): React.ReactElement => {\n  const classes = useTokenSelectFieldStyles()\n  const tokenClasses = useSelectedTokenStyles()\n  const assetsAddresses = Object.keys(assets)\n\n  return (\n    <Field\n      className={classes.selectMenu}\n      component={SelectField}\n      disabled={!assetsAddresses.length}\n      initialValue={initialValue}\n      name=\"assetAddress\"\n      renderValue={(assetAddress) => <SelectedToken assetAddress={assetAddress} assets={assets} />}\n      validate={required}\n    >\n      {assetsAddresses.map((assetAddress) => {\n        const asset = assets[assetAddress]\n\n        return (\n          <MenuItem key={asset.slug} value={assetAddress}>\n            <ListItemIcon>\n              <Img\n                className={tokenClasses.tokenImage}\n                alt={asset.name}\n                onError={setImageToPlaceholder}\n                src={asset.image}\n              />\n            </ListItemIcon>\n            <ListItemText\n              primary={asset.name}\n              secondary={`Count: ${formatAmount(asset.numberOfTokens.toString())} ${asset.symbol}`}\n            />\n          </MenuItem>\n        )\n      })}\n    </Field>\n  )\n}\n\nexport default TokenSelectField\n","import { EthHashInfo } from '@gnosis.pm/safe-react-components'\nimport { makeStyles } from '@material-ui/core/styles'\nimport { useState, useMemo } from 'react'\nimport { useSelector } from 'react-redux'\n\nimport Divider from 'src/components/Divider'\nimport GnoForm from 'src/components/forms/GnoForm'\nimport Block from 'src/components/layout/Block'\nimport Col from 'src/components/layout/Col'\nimport Hairline from 'src/components/layout/Hairline'\nimport Paragraph from 'src/components/layout/Paragraph'\nimport Row from 'src/components/layout/Row'\nimport { ScanQRWrapper } from 'src/components/ScanQRModal/ScanQRWrapper'\nimport { Modal } from 'src/components/Modal'\nimport WhenFieldChanges from 'src/components/WhenFieldChanges'\nimport { currentNetworkAddressBook } from 'src/logic/addressBook/store/selectors'\nimport { nftAssetsSelector, nftTokensSelector } from 'src/logic/collectibles/store/selectors'\nimport SafeInfo from 'src/routes/safe/components/Balances/SendModal/SafeInfo'\nimport { AddressBookInput } from 'src/routes/safe/components/Balances/SendModal/screens/AddressBookInput'\nimport { NFTToken } from 'src/logic/collectibles/sources/collectibles.d'\nimport { getExplorerInfo } from 'src/config'\nimport { sameAddress } from 'src/logic/wallets/ethAddresses'\nimport { sameString } from 'src/utils/strings'\n\nimport { CollectibleSelectField } from './CollectibleSelectField'\nimport { styles } from './style'\nimport TokenSelectField from './TokenSelectField'\nimport { Erc721Transfer } from '@gnosis.pm/safe-react-gateway-sdk'\nimport { ModalHeader } from '../ModalHeader'\n\nconst formMutators = {\n  setMax: (args, state, utils) => {\n    utils.changeValue(state, 'amount', () => args[0])\n  },\n  onTokenChange: (args, state, utils) => {\n    utils.changeValue(state, 'amount', () => '')\n  },\n  setRecipient: (args, state, utils) => {\n    utils.changeValue(state, 'recipientAddress', () => args[0])\n  },\n}\n\nconst useStyles = makeStyles(styles)\n\ntype SendCollectibleProps = {\n  initialValues: any\n  onClose: () => void\n  onNext: (txInfo: SendCollectibleTxInfo) => void\n  recipientAddress?: string\n  selectedToken?: NFTToken | Erc721Transfer\n}\n\nexport type SendCollectibleTxInfo = {\n  assetAddress: string\n  assetName: string\n  nftTokenId: string\n  recipientAddress?: string\n  recipientName?: string\n}\n\nconst SendCollectible = ({\n  initialValues,\n  onClose,\n  onNext,\n  recipientAddress,\n  selectedToken,\n}: SendCollectibleProps): React.ReactElement => {\n  const classes = useStyles()\n  const nftAssets = useSelector(nftAssetsSelector)\n  const nftTokens = useSelector(nftTokensSelector)\n  const addressBook = useSelector(currentNetworkAddressBook)\n  const [selectedEntry, setSelectedEntry] = useState<{ address: string; name: string } | null>(() => {\n    const defaultEntry = { address: recipientAddress || '', name: '' }\n\n    // if there's nothing to lookup for, we return the default entry\n    if (!initialValues?.recipientAddress && !recipientAddress) {\n      return defaultEntry\n    }\n\n    // if there's something to lookup for, `initialValues` has precedence over `recipientAddress`\n    const predefinedAddress = initialValues?.recipientAddress ?? recipientAddress\n    const addressBookEntry = addressBook.find(({ address }) => {\n      return sameAddress(predefinedAddress, address)\n    })\n\n    // if found in the Address Book, then we return the entry\n    if (addressBookEntry) {\n      return addressBookEntry\n    }\n\n    // otherwise we return the default entry\n    return defaultEntry\n  })\n  const [pristine, setPristine] = useState(true)\n  const [isValidAddress, setIsValidAddress] = useState(false)\n\n  useMemo(() => {\n    if (selectedEntry === null && pristine) {\n      setPristine(false)\n    }\n  }, [selectedEntry, pristine])\n\n  const handleSubmit = (values: SendCollectibleTxInfo) => {\n    // If the input wasn't modified, there was no mutation of the recipientAddress\n    if (!values.recipientAddress) {\n      values.recipientAddress = selectedEntry?.address\n    }\n    values.recipientName = selectedEntry?.name\n    values.assetName = nftAssets[values.assetAddress].name\n\n    onNext(values)\n  }\n\n  return (\n    <>\n      <ModalHeader onClose={onClose} subTitle=\"1 of 2\" title=\"Send collectible\" />\n      <Hairline />\n      <GnoForm formMutators={formMutators} initialValues={initialValues} onSubmit={handleSubmit}>\n        {(...args) => {\n          const formState = args[2]\n          const mutators = args[3]\n          const { assetAddress } = formState.values\n          const selectedNFTTokens = nftTokens.filter((nftToken) => nftToken.assetAddress === assetAddress)\n\n          const handleScan = (value, closeQrModal) => {\n            let scannedAddress = value\n\n            if (scannedAddress.startsWith('ethereum:')) {\n              scannedAddress = scannedAddress.replace('ethereum:', '')\n            }\n            const scannedName =\n              addressBook.find(({ address }) => {\n                return sameAddress(scannedAddress, address)\n              })?.name ?? ''\n            mutators.setRecipient(scannedAddress)\n            setSelectedEntry({\n              name: scannedName ?? '',\n              address: scannedAddress,\n            })\n            closeQrModal()\n          }\n\n          let shouldDisableSubmitButton = !isValidAddress\n\n          if (selectedEntry) {\n            shouldDisableSubmitButton = !selectedEntry.address\n          }\n\n          return (\n            <>\n              <WhenFieldChanges field=\"assetAddress\" set=\"nftTokenId\" to={''} />\n              <Block className={classes.formContainer}>\n                <SafeInfo />\n                <Divider withArrow />\n                {selectedEntry && selectedEntry.address ? (\n                  <div\n                    onKeyDown={(e) => {\n                      if (sameString(e.key, 'Tab')) {\n                        return\n                      }\n                      setSelectedEntry({ address: '', name: '' })\n                    }}\n                    onClick={() => {\n                      setSelectedEntry({ address: '', name: '' })\n                    }}\n                    role=\"listbox\"\n                    tabIndex={0}\n                  >\n                    <Row margin=\"xs\">\n                      <Paragraph color=\"disabled\" noMargin size=\"md\" style={{ letterSpacing: '-0.5px' }}>\n                        Recipient\n                      </Paragraph>\n                    </Row>\n                    <Row align=\"center\" margin=\"md\">\n                      <Col xs={12}>\n                        <EthHashInfo\n                          hash={selectedEntry.address}\n                          name={selectedEntry.name}\n                          showAvatar\n                          showCopyBtn\n                          explorerUrl={getExplorerInfo(selectedEntry.address)}\n                        />\n                      </Col>\n                    </Row>\n                  </div>\n                ) : (\n                  <>\n                    <Row margin=\"md\">\n                      <Col xs={11}>\n                        <AddressBookInput\n                          fieldMutator={mutators.setRecipient}\n                          pristine={pristine}\n                          setIsValidAddress={setIsValidAddress}\n                          setSelectedEntry={setSelectedEntry}\n                        />\n                      </Col>\n                      <Col center=\"xs\" className={classes} middle=\"xs\" xs={1}>\n                        <ScanQRWrapper handleScan={handleScan} />\n                      </Col>\n                    </Row>\n                  </>\n                )}\n                <Row margin=\"xs\">\n                  <Col between=\"lg\">\n                    <Paragraph color=\"disabled\" noMargin size=\"md\" style={{ letterSpacing: '-0.5px' }}>\n                      Collectible\n                    </Paragraph>\n                  </Col>\n                </Row>\n                <Row margin=\"sm\">\n                  <Col>\n                    <TokenSelectField\n                      assets={nftAssets}\n                      initialValue={\n                        (selectedToken as NFTToken)?.assetAddress ?? (selectedToken as Erc721Transfer)?.tokenAddress\n                      }\n                    />\n                  </Col>\n                </Row>\n                <Row margin=\"xs\">\n                  <Col between=\"lg\">\n                    <Paragraph color=\"disabled\" noMargin size=\"md\" style={{ letterSpacing: '-0.5px' }}>\n                      Token ID\n                    </Paragraph>\n                  </Col>\n                </Row>\n                <Row margin=\"md\">\n                  <Col>\n                    <CollectibleSelectField initialValue={selectedToken?.tokenId} tokens={selectedNFTTokens} />\n                  </Col>\n                </Row>\n              </Block>\n              <Modal.Footer>\n                <Modal.Footer.Buttons\n                  cancelButtonProps={{ onClick: onClose }}\n                  confirmButtonProps={{ disabled: shouldDisableSubmitButton, testId: 'review-tx-btn', text: 'Review' }}\n                />\n              </Modal.Footer>\n            </>\n          )\n        }}\n      </GnoForm>\n    </>\n  )\n}\n\nexport default SendCollectible\n","import { Field } from 'react-final-form'\n\n// $FlowFixMe\nconst GnoField = ({ ...props }: any) => <Field {...props} />\n\nexport default GnoField\n","import { lg, md, secondaryText } from 'src/theme/variables'\nimport { createStyles } from '@material-ui/core'\n\nexport const styles = createStyles({\n  heading: {\n    padding: `${md} ${lg}`,\n    justifyContent: 'flex-start',\n    boxSizing: 'border-box',\n    maxHeight: '74px',\n  },\n  annotation: {\n    letterSpacing: '-1px',\n    color: secondaryText,\n    marginRight: 'auto',\n    marginLeft: '20px',\n  },\n  headingText: {\n    fontSize: lg,\n  },\n  closeIcon: {\n    height: '35px',\n    width: '35px',\n  },\n  chainIndicator: {\n    padding: `0 ${md}`,\n    height: '20px',\n    alignItems: 'center',\n  },\n  icon: {\n    width: '20px',\n    marginRight: '10px',\n  },\n})\n","import IconButton from '@material-ui/core/IconButton'\nimport { makeStyles } from '@material-ui/core/styles'\nimport Close from '@material-ui/icons/Close'\nimport { ReactElement } from 'react'\n\nimport ChainIndicator from 'src/components/ChainIndicator'\nimport Paragraph from 'src/components/layout/Paragraph'\nimport Row from 'src/components/layout/Row'\nimport { getNetworkInfo } from 'src/config'\nimport { styles } from './style'\n\nconst useStyles = makeStyles(styles)\n\ninterface HeaderProps {\n  onClose: () => void\n  subTitle?: string\n  title: string\n  iconUrl?: string\n}\n\nexport const ModalHeader = ({ onClose, subTitle, title, iconUrl }: HeaderProps): ReactElement => {\n  const classes = useStyles()\n  const connectedNetwork = getNetworkInfo()\n\n  return (\n    <Row align=\"center\" className={classes.heading} grow>\n      {iconUrl && <img className={classes.icon} alt={title} src={iconUrl} />}\n      <Paragraph className={classes.headingText} noMargin weight=\"bolder\">\n        {title}\n      </Paragraph>\n      <Paragraph className={classes.annotation}>{subTitle ? subTitle : ''}</Paragraph>\n      <Row className={classes.chainIndicator}>\n        {connectedNetwork.id && <ChainIndicator chainId={connectedNetwork.id} />}\n      </Row>\n      <IconButton disableRipple onClick={onClose}>\n        <Close className={classes.closeIcon} />\n      </IconButton>\n    </Row>\n  )\n}\n","import { SyntheticEvent } from 'react'\n\nimport TokenPlaceholder from 'src/routes/safe/components/Balances/assets/token_placeholder.svg'\n\nexport const setImageToPlaceholder = (event: SyntheticEvent<HTMLImageElement, Event>): void => {\n  const img = event.currentTarget\n  if (!/token_placeholder/.test(img.src)) {\n    img.src = TokenPlaceholder\n  }\n}\n","import { ReactElement } from 'react'\nimport { Form } from 'react-final-form'\n\nconst stylesBasedOn = (padding) => ({\n  padding: `0 ${padding}%`,\n  flexDirection: 'column',\n  flex: '1 0 auto',\n})\n\nconst GnoForm = ({\n  children,\n  decorators,\n  formMutators,\n  initialValues,\n  onSubmit,\n  padding = 0,\n  subscription,\n  testId = '',\n  validation,\n}: any): ReactElement => (\n  <Form\n    decorators={decorators}\n    initialValues={initialValues}\n    mutators={formMutators}\n    onSubmit={onSubmit}\n    render={({ handleSubmit, ...rest }) => (\n      <form data-testid={testId} onSubmit={handleSubmit} style={stylesBasedOn(padding) as any}>\n        {children(rest.submitting, rest.validating, rest, rest.form.mutators)}\n      </form>\n    )}\n    subscription={subscription}\n    validate={validation}\n  />\n)\n\nexport default GnoForm\n","export default __webpack_public_path__ + \"static/media/token_placeholder.c1abe466.svg\";","import * as React from 'react'\n\nclass Bold extends React.PureComponent<any> {\n  render() {\n    const { children, ...props } = this.props\n\n    return <b {...props}>{children}</b>\n  }\n}\n\nexport default Bold\n","export default __webpack_public_path__ + \"static/media/qrcode.fec1b6d8.svg\";","import { background, lg, secondaryText, sm } from 'src/theme/variables'\nimport { createStyles } from '@material-ui/core'\n\nexport const styles = createStyles({\n  heading: {\n    padding: lg,\n    justifyContent: 'space-between',\n    maxHeight: '75px',\n    boxSizing: 'border-box',\n  },\n  loaderContainer: {\n    width: '100%',\n    height: '100%',\n  },\n  close: {\n    height: '25px',\n    width: '25px',\n    color: secondaryText,\n  },\n  detailsContainer: {\n    backgroundColor: background,\n    maxHeight: '450px',\n  },\n  buttonRow: {\n    height: '84px',\n    justifyContent: 'center',\n  },\n  button: {\n    '&:last-child': {\n      marginLeft: sm,\n    },\n  },\n})\n","import IconButton from '@material-ui/core/IconButton'\nimport { makeStyles } from '@material-ui/core/styles'\nimport Close from '@material-ui/icons/Close'\nimport * as React from 'react'\nimport QrReader from 'react-qr-reader'\n\nimport { styles } from './style'\n\nimport Modal from 'src/components/Modal'\nimport Block from 'src/components/layout/Block'\nimport Button from 'src/components/layout/Button'\nimport Col from 'src/components/layout/Col'\nimport Hairline from 'src/components/layout/Hairline'\nimport Paragraph from 'src/components/layout/Paragraph'\nimport Row from 'src/components/layout/Row'\nimport { useEffect, useState } from 'react'\n\nconst useStyles = makeStyles(styles)\n\ntype Props = {\n  isOpen: boolean\n  onClose: () => void\n  onScan: (value: string) => void\n}\n\nexport const ScanQRModal = ({ isOpen, onClose, onScan }: Props): React.ReactElement => {\n  const classes = useStyles()\n  const [fileUploadModalOpen, setFileUploadModalOpen] = useState<boolean>(false)\n  const [error, setError] = useState<string | null>(null)\n  const [cameraBlocked, setCameraBlocked] = useState<boolean>(false)\n  const scannerRef: any = React.createRef()\n  const openImageDialog = React.useCallback(() => {\n    scannerRef.current.openImageDialog()\n  }, [scannerRef])\n\n  useEffect(() => {\n    if (!fileUploadModalOpen && cameraBlocked && !error) {\n      setFileUploadModalOpen(true)\n      openImageDialog()\n    }\n  }, [cameraBlocked, openImageDialog, fileUploadModalOpen, setFileUploadModalOpen, error])\n\n  const onFileScannedResolve = (error: Error | null, successData: string | null) => {\n    if (error) {\n      console.error('QR code error', error)\n\n      if (error.name === 'NotAllowedError' || error.name === 'PermissionDismissedError') {\n        setCameraBlocked(true)\n        setFileUploadModalOpen(false)\n      } else {\n        setError('The QR could not be read')\n      }\n      return\n    }\n\n    if (successData) {\n      onScan(successData)\n    } else if (cameraBlocked) {\n      setError('The QR could not be read')\n    }\n  }\n\n  return (\n    <Modal description=\"Receive Tokens Form\" handleClose={onClose} open={isOpen} title=\"Receive Tokens\">\n      <Row align=\"center\" className={classes.heading} grow>\n        <Paragraph noMargin size=\"xl\">\n          Scan QR\n        </Paragraph>\n        <IconButton disableRipple onClick={onClose}>\n          <Close className={classes.close} />\n        </IconButton>\n      </Row>\n      <Hairline />\n      <Col className={classes.detailsContainer} layout=\"column\" middle=\"xs\">\n        {error && (\n          <Block padding=\"md\" margin=\"md\">\n            {error}\n          </Block>\n        )}\n        <QrReader\n          legacyMode={cameraBlocked}\n          onError={(err: Error) => onFileScannedResolve(err, null)}\n          onScan={(data: string) => onFileScannedResolve(null, data)}\n          ref={scannerRef}\n          style={{ width: '400px', height: '400px' }}\n          facingMode=\"user\"\n        />\n      </Col>\n      <Hairline />\n      <Row align=\"center\" className={classes.buttonRow}>\n        <Button className={classes.button} color=\"secondary\" minWidth={154} onClick={onClose}>\n          Close\n        </Button>\n        <Button\n          className={classes.button}\n          color=\"primary\"\n          minWidth={154}\n          onClick={() => {\n            setCameraBlocked(true)\n            setError(null)\n            setFileUploadModalOpen(false)\n          }}\n          variant=\"contained\"\n        >\n          Upload an image\n        </Button>\n      </Row>\n    </Modal>\n  )\n}\n","import { makeStyles } from '@material-ui/core/styles'\nimport { ReactElement, useState } from 'react'\n\nimport QRIcon from 'src/assets/icons/qrcode.svg'\nimport { ScanQRModal } from 'src/components/ScanQRModal'\nimport Img from 'src/components/layout/Img'\n\nconst useStyles = makeStyles({\n  qrCodeBtn: {\n    cursor: 'pointer',\n  },\n})\n\ntype Props = {\n  handleScan: (dataResult: string, closeQrModal: () => void) => void\n  testId?: string\n}\n\nexport const ScanQRWrapper = ({ handleScan, testId }: Props): ReactElement => {\n  const classes = useStyles()\n  const [qrModalOpen, setQrModalOpen] = useState(false)\n\n  const openQrModal = () => {\n    setQrModalOpen(true)\n  }\n\n  const closeQrModal = () => {\n    setQrModalOpen(false)\n  }\n\n  const onScanFinished = (value: string) => {\n    handleScan(value, closeQrModal)\n  }\n\n  return (\n    <>\n      <Img\n        alt=\"Scan QR\"\n        className={classes.qrCodeBtn}\n        height={20}\n        onClick={() => openQrModal()}\n        role=\"button\"\n        src={QRIcon}\n        testId={testId || 'qr-icon'}\n      />\n      {qrModalOpen && <ScanQRModal isOpen={qrModalOpen} onClose={closeQrModal} onScan={onScanFinished} />}\n    </>\n  )\n}\n","import { ReactElement } from 'react'\nimport styled from 'styled-components'\nimport { Icon, Divider as DividerSRC } from '@gnosis.pm/safe-react-components'\n\nconst Wrapper = styled.div`\n  display: flex;\n  align-items: center;\n  margin: 8px 0;\n\n  svg {\n    margin: 0 12px 0 4px;\n  }\n`\nconst StyledDivider = styled(DividerSRC)`\n  width: 100%;\n`\n\ntype Props = {\n  withArrow?: boolean\n}\n\nconst Divider = ({ withArrow }: Props): ReactElement => (\n  <Wrapper>\n    {withArrow && <Icon type=\"arrowDown\" size=\"md\" />}\n    <StyledDivider />\n  </Wrapper>\n)\n\nexport default Divider\n","import FormControl from '@material-ui/core/FormControl'\nimport FormHelperText from '@material-ui/core/FormHelperText'\nimport InputLabel from '@material-ui/core/InputLabel'\nimport Select from '@material-ui/core/Select'\n\nconst style = {\n  minWidth: '100%',\n}\n\nconst SelectInput = ({\n  classes,\n  disableError,\n  formControlProps,\n  input: { name, onChange, value, ...restInput },\n  label,\n  meta,\n  renderValue,\n  ...rest\n}) => {\n  const showError = ((meta.submitError && !meta.dirtySinceLastSubmit) || meta.error) && meta.touched && !disableError\n  const inputProps = {\n    ...restInput,\n    name,\n  }\n\n  return (\n    <FormControl {...formControlProps} error={showError} style={style}>\n      <InputLabel htmlFor={name}>{label}</InputLabel>\n      <Select\n        classes={classes}\n        inputProps={inputProps}\n        onChange={onChange}\n        renderValue={renderValue}\n        value={value}\n        {...rest}\n      />\n      {showError && <FormHelperText>{meta.error || meta.submitError}</FormHelperText>}\n    </FormControl>\n  )\n}\n\nexport default SelectInput\n","import { useSelector } from 'react-redux'\nimport { EthHashInfo } from '@gnosis.pm/safe-react-components'\nimport styled from 'styled-components'\n\nimport { getExplorerInfo, getNetworkInfo } from 'src/config'\nimport { currentSafeWithNames } from 'src/logic/safe/store/selectors'\nimport Paragraph from 'src/components/layout/Paragraph'\nimport Bold from 'src/components/layout/Bold'\nimport { border, xs } from 'src/theme/variables'\nimport Block from 'src/components/layout/Block'\n\nconst StyledBlock = styled(Block)`\n  font-size: 12px;\n  line-height: 1.08;\n  letter-spacing: -0.5px;\n  background-color: ${border};\n  width: fit-content;\n  padding: 5px 10px;\n  margin-top: ${xs};\n  margin-left: 40px;\n  border-radius: 3px;\n`\n\nconst SafeInfo = (): React.ReactElement => {\n  const { address: safeAddress, ethBalance, name: safeName } = useSelector(currentSafeWithNames)\n  const { nativeCoin } = getNetworkInfo()\n\n  return (\n    <>\n      <EthHashInfo\n        hash={safeAddress}\n        name={safeName}\n        explorerUrl={getExplorerInfo(safeAddress)}\n        showAvatar\n        showCopyBtn\n      />\n      {ethBalance && (\n        <StyledBlock>\n          <Paragraph noMargin>\n            Balance: <Bold data-testid=\"current-eth-balance\">{`${ethBalance} ${nativeCoin.symbol}`}</Bold>\n          </Paragraph>\n        </StyledBlock>\n      )}\n    </>\n  )\n}\n\nexport default SafeInfo\n","import { createElement, Component } from 'react';\nimport { Field } from 'react-final-form';\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\n\nvar ExternallyChangedState =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inheritsLoose(ExternallyChangedState, _React$Component);\n\n  function ExternallyChangedState(props) {\n    var _this;\n\n    _this = _React$Component.call(this, props) || this;\n    _this.state = {\n      previous: props.input.value,\n      externallyChanged: false\n    };\n    return _this;\n  }\n\n  var _proto = ExternallyChangedState.prototype;\n\n  _proto.componentDidUpdate = function componentDidUpdate() {\n    var _this$props = this.props,\n        value = _this$props.input.value,\n        active = _this$props.meta.active;\n    var previous = this.state.previous;\n\n    if (value !== previous) {\n      this.setState({\n        previous: value,\n        externallyChanged: !active\n      });\n    }\n  };\n\n  _proto.render = function render() {\n    return this.props.children(this.state.externallyChanged);\n  };\n\n  return ExternallyChangedState;\n}(Component);\n\nvar ExternallyChanged = function ExternallyChanged(_ref) {\n  var name = _ref.name,\n      children = _ref.children;\n  return createElement(Field, {\n    name: name,\n    subscription: {\n      active: true,\n      value: true\n    },\n    allowNull: true,\n    render: function render(props) {\n      return createElement(ExternallyChangedState, _extends({}, props, {\n        children: children\n      }));\n    }\n  });\n};\n\nvar OnBlurState =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inheritsLoose(OnBlurState, _React$Component);\n\n  function OnBlurState(props) {\n    var _this;\n\n    _this = _React$Component.call(this, props) || this;\n    _this.state = {\n      previous: !!props.meta.active\n    };\n    return _this;\n  }\n\n  var _proto = OnBlurState.prototype;\n\n  _proto.componentDidUpdate = function componentDidUpdate() {\n    var _this$props = this.props,\n        children = _this$props.children,\n        active = _this$props.meta.active;\n    var previous = this.state.previous;\n\n    if (previous && !active) {\n      children();\n    }\n\n    if (previous !== active) {\n      this.setState({\n        previous: active\n      });\n    }\n  };\n\n  _proto.render = function render() {\n    return null;\n  };\n\n  return OnBlurState;\n}(Component);\n\nvar OnBlur = function OnBlur(_ref) {\n  var name = _ref.name,\n      children = _ref.children;\n  return createElement(Field, {\n    name: name,\n    subscription: {\n      active: true\n    },\n    render: function render(props) {\n      return createElement(OnBlurState, _extends({}, props, {\n        children: children\n      }));\n    }\n  });\n};\n\nvar OnChangeState =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inheritsLoose(OnChangeState, _React$Component);\n\n  function OnChangeState(props) {\n    var _this;\n\n    _this = _React$Component.call(this, props) || this;\n    _this.state = {\n      previous: props.input.value\n    };\n    return _this;\n  }\n\n  var _proto = OnChangeState.prototype;\n\n  _proto.componentDidUpdate = function componentDidUpdate() {\n    var _this$props = this.props,\n        children = _this$props.children,\n        value = _this$props.input.value;\n    var previous = this.state.previous;\n\n    if (value !== previous) {\n      this.setState({\n        previous: value\n      });\n      children(value, previous);\n    }\n  };\n\n  _proto.render = function render() {\n    return null;\n  };\n\n  return OnChangeState;\n}(Component);\n\nvar OnChange = function OnChange(_ref) {\n  var name = _ref.name,\n      children = _ref.children;\n  return createElement(Field, {\n    name: name,\n    subscription: {\n      value: true\n    },\n    allowNull: true,\n    render: function render(props) {\n      return createElement(OnChangeState, _extends({}, props, {\n        children: children\n      }));\n    }\n  });\n};\n\nvar OnFocusState =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inheritsLoose(OnFocusState, _React$Component);\n\n  function OnFocusState(props) {\n    var _this;\n\n    _this = _React$Component.call(this, props) || this;\n    _this.state = {\n      previous: !!props.meta.active\n    };\n    return _this;\n  }\n\n  var _proto = OnFocusState.prototype;\n\n  _proto.componentDidUpdate = function componentDidUpdate() {\n    var _this$props = this.props,\n        children = _this$props.children,\n        active = _this$props.meta.active;\n    var previous = this.state.previous;\n\n    if (active && !previous) {\n      this.setState({\n        previous: active\n      });\n      children();\n    } else if (!active && previous) {\n      this.setState({\n        previous: active\n      });\n    }\n  };\n\n  _proto.render = function render() {\n    return null;\n  };\n\n  return OnFocusState;\n}(Component);\n\nvar OnFocus = function OnFocus(_ref) {\n  var name = _ref.name,\n      children = _ref.children;\n  return createElement(Field, {\n    name: name,\n    subscription: {\n      active: true\n    },\n    render: function render(props) {\n      return createElement(OnFocusState, _extends({}, props, {\n        children: children\n      }));\n    }\n  });\n};\n\nexport { ExternallyChanged, OnBlur, OnChange, OnFocus };\n","import { createStyles, makeStyles } from '@material-ui/core'\n\nexport const useTextFieldLabelStyle = makeStyles(\n  createStyles({\n    root: {\n      overflow: 'hidden',\n      borderRadius: 4,\n      fontSize: '15px',\n      width: '500px',\n    },\n  }),\n)\n\nexport const useTextFieldInputStyle = makeStyles(\n  createStyles({\n    root: {\n      fontSize: '14px',\n      width: '420px',\n    },\n  }),\n)\n","import { EthHashInfo } from '@gnosis.pm/safe-react-components'\nimport MuiTextField from '@material-ui/core/TextField'\nimport Autocomplete, { AutocompleteProps } from '@material-ui/lab/Autocomplete'\nimport { Dispatch, ReactElement, SetStateAction, useEffect, useState } from 'react'\nimport { useSelector } from 'react-redux'\n\nimport { mustBeEthereumAddress, mustBeEthereumContractAddress } from 'src/components/forms/validator'\nimport { isFeatureEnabled } from 'src/config'\nimport { FEATURES } from 'src/config/networks/network.d'\nimport { AddressBookEntry } from 'src/logic/addressBook/model/addressBook'\nimport { currentNetworkAddressBook } from 'src/logic/addressBook/store/selectors'\nimport { filterContractAddressBookEntries, filterAddressEntries } from 'src/logic/addressBook/utils'\nimport { isValidEnsName, isValidCryptoDomainName } from 'src/logic/wallets/ethAddresses'\nimport { getAddressFromDomain } from 'src/logic/wallets/getWeb3'\nimport {\n  useTextFieldInputStyle,\n  useTextFieldLabelStyle,\n} from 'src/routes/safe/components/Balances/SendModal/screens/AddressBookInput/style'\nimport { trimSpaces } from 'src/utils/strings'\nimport { Errors, logError } from 'src/logic/exceptions/CodedException'\nimport { checksumAddress } from 'src/utils/checksumAddress'\nimport { currentChainId } from 'src/logic/config/store/selectors'\n\nexport interface AddressBookProps {\n  fieldMutator: (address: string) => void\n  label?: string\n  pristine?: boolean\n  recipientAddress?: string\n  errorMsg?: string\n  setIsValidAddress: (valid: boolean) => void\n  setSelectedEntry: Dispatch<SetStateAction<{ address: string; name: string }> | null>\n}\n\nexport interface BaseAddressBookInputProps extends AddressBookProps {\n  addressBookEntries: AddressBookEntry[]\n  setSelectedEntry: (args: { address: string; name: string } | null) => void\n  setValidationText: Dispatch<SetStateAction<string | undefined>>\n  validationText: string | undefined\n}\n\nconst BaseAddressBookInput = ({\n  addressBookEntries,\n  fieldMutator,\n  label = 'Recipient',\n  setIsValidAddress,\n  setSelectedEntry,\n  setValidationText,\n  validationText,\n}: BaseAddressBookInputProps): ReactElement => {\n  const networkId = useSelector(currentChainId)\n\n  const updateAddressInfo = (addressEntry: AddressBookEntry): void => {\n    setSelectedEntry(addressEntry)\n    fieldMutator(addressEntry.address)\n  }\n\n  const validateAddress = (address: string): AddressBookEntry | string | undefined => {\n    const addressErrorMessage = mustBeEthereumAddress(address)\n    setIsValidAddress(!addressErrorMessage)\n\n    if (addressErrorMessage) {\n      setValidationText(addressErrorMessage)\n      return\n    }\n\n    // Automatically checksum valid addresses\n    let checkedAddr: string\n    try {\n      checkedAddr = checksumAddress(address)\n    } catch (err) {\n      checkedAddr = address\n    }\n\n    const filteredEntries = filterAddressEntries(addressBookEntries, { inputValue: checkedAddr })\n    return filteredEntries.length === 1 ? filteredEntries[0] : checkedAddr\n  }\n\n  const onChange: AutocompleteProps<AddressBookEntry, false, false, true>['onChange'] = (_, value, reason) => {\n    switch (reason) {\n      case 'select-option': {\n        const { address, name, chainId } = value as AddressBookEntry\n        updateAddressInfo({ address, name, chainId })\n        break\n      }\n    }\n  }\n\n  const onInputChange: AutocompleteProps<AddressBookEntry, false, false, true>['onInputChange'] = async (\n    _,\n    value,\n    reason,\n  ) => {\n    switch (reason) {\n      case 'input': {\n        const normalizedValue = trimSpaces(value)\n\n        if (!normalizedValue) {\n          break\n        }\n\n        // ENS-enabled resolve/validation\n        if (\n          isFeatureEnabled(FEATURES.DOMAIN_LOOKUP) &&\n          (isValidEnsName(normalizedValue) || isValidCryptoDomainName(normalizedValue))\n        ) {\n          let address = ''\n          try {\n            address = await getAddressFromDomain(normalizedValue)\n          } catch (err) {\n            logError(Errors._101, err.message)\n          }\n\n          const validatedAddress = validateAddress(address)\n\n          if (!validatedAddress) {\n            fieldMutator('')\n            break\n          }\n\n          const newEntry =\n            typeof validatedAddress === 'string'\n              ? {\n                  address,\n                  name: normalizedValue,\n                  chainId: networkId,\n                }\n              : validatedAddress\n\n          updateAddressInfo(newEntry)\n          break\n        }\n\n        // ETH address validation\n        const validatedAddress = validateAddress(normalizedValue)\n\n        if (!validatedAddress) {\n          fieldMutator('')\n          break\n        }\n\n        const newEntry =\n          typeof validatedAddress === 'string'\n            ? {\n                address: validatedAddress,\n                name: '',\n                chainId: networkId,\n              }\n            : validatedAddress\n\n        updateAddressInfo(newEntry)\n\n        break\n      }\n    }\n  }\n\n  const labelStyles = useTextFieldLabelStyle()\n  const inputStyles = useTextFieldInputStyle()\n\n  return (\n    <Autocomplete<AddressBookEntry, false, false, true>\n      closeIcon={null}\n      openOnFocus={false}\n      filterOptions={filterAddressEntries}\n      freeSolo\n      onChange={onChange}\n      onInputChange={onInputChange}\n      options={addressBookEntries}\n      id=\"address-book-input\"\n      renderInput={(params) => (\n        <MuiTextField\n          {...params}\n          autoFocus={true}\n          error={!!validationText}\n          fullWidth\n          variant=\"filled\"\n          label={validationText ? validationText : label}\n          InputLabelProps={{ shrink: true, required: true, classes: labelStyles }}\n          InputProps={{ ...params.InputProps, classes: inputStyles }}\n        />\n      )}\n      getOptionLabel={({ address }) => address}\n      renderOption={({ address, name }) => <EthHashInfo hash={address} name={name} showAvatar />}\n      role=\"listbox\"\n      style={{ display: 'flex', flexGrow: 1 }}\n    />\n  )\n}\n\nexport const AddressBookInput = (props: AddressBookProps): ReactElement => {\n  const addressBookEntries = useSelector(currentNetworkAddressBook)\n  const [validationText, setValidationText] = useState<string>('')\n\n  useEffect(() => {\n    if (props.errorMsg) {\n      setValidationText(props.errorMsg)\n    }\n  }, [props.errorMsg])\n\n  return (\n    <BaseAddressBookInput\n      addressBookEntries={addressBookEntries}\n      setValidationText={setValidationText}\n      validationText={validationText}\n      {...props}\n    />\n  )\n}\n\nexport const ContractsAddressBookInput = ({\n  setIsValidAddress,\n  setSelectedEntry,\n  ...props\n}: AddressBookProps): ReactElement => {\n  const addressBookEntries = useSelector(currentNetworkAddressBook)\n  const [filteredEntries, setFilteredEntries] = useState<AddressBookEntry[]>([])\n  const [validationText, setValidationText] = useState<string>('')\n\n  useEffect(() => {\n    const filterContractAddresses = async (): Promise<void> => {\n      const filteredADBK = await filterContractAddressBookEntries(addressBookEntries)\n      setFilteredEntries(filteredADBK)\n    }\n    filterContractAddresses()\n  }, [addressBookEntries])\n\n  const onSetSelectedEntry = async (selectedEntry) => {\n    if (selectedEntry?.address) {\n      // verify if `address` is a contract\n      const contractAddressErrorMessage = await mustBeEthereumContractAddress(selectedEntry.address)\n      setIsValidAddress(!contractAddressErrorMessage)\n      setValidationText(contractAddressErrorMessage ?? '')\n      setSelectedEntry(selectedEntry)\n    }\n  }\n\n  return (\n    <BaseAddressBookInput\n      addressBookEntries={filteredEntries}\n      setIsValidAddress={setIsValidAddress}\n      setSelectedEntry={onSetSelectedEntry}\n      setValidationText={setValidationText}\n      validationText={validationText}\n      {...props}\n    />\n  )\n}\n","import { createSelector } from 'reselect'\nimport { NFTAsset, NFTAssets, NFTToken, NFTTokens } from 'src/logic/collectibles/sources/collectibles.d'\n\nimport { AppReduxState } from 'src/store'\nimport { NFT_ASSETS_REDUCER_ID, NFT_TOKENS_REDUCER_ID } from 'src/logic/collectibles/store/reducer/collectibles'\nexport const nftAssets = (state: AppReduxState): NFTAssets => state[NFT_ASSETS_REDUCER_ID]\nexport const nftTokens = (state: AppReduxState): NFTTokens => state[NFT_TOKENS_REDUCER_ID]\n\nexport const nftAssetsSelector = createSelector(nftAssets, (assets) => assets)\n\nexport const nftTokensSelector = createSelector(nftTokens, (tokens) => tokens)\n\nconst nftAssetsToListSelector = createSelector(nftAssets, (assets): NFTAsset[] => {\n  return assets ? Object.values(assets) : []\n})\n\nconst nftAssetsAddressFromNftTokensSelector = createSelector(nftTokensSelector, (userNftTokens): string[] => {\n  const addresses = userNftTokens.map((nftToken) => nftToken.assetAddress)\n  const uniqueAddresses = new Set(addresses)\n  return Array.from(uniqueAddresses)\n})\n\nexport const orderedNFTAssets = createSelector(nftTokensSelector, (userNftTokens): NFTToken[] =>\n  userNftTokens.sort((a, b) => a.name.localeCompare(b.name)),\n)\n\nexport const nftAssetsFromNftTokensSelector = createSelector(\n  nftAssetsToListSelector,\n  nftAssetsAddressFromNftTokensSelector,\n  (nftAssets, nftAssetsFromNftTokens): NFTAsset[] => {\n    return nftAssets\n      .sort((a, b) => a.name.localeCompare(b.name))\n      .filter(({ address }) => nftAssetsFromNftTokens.includes(address))\n  },\n)\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport ListContext from '../List/ListContext';\nexport var styles = function styles(theme) {\n  return {\n    /* Styles applied to the root element. */\n    root: {\n      minWidth: 56,\n      color: theme.palette.action.active,\n      flexShrink: 0,\n      display: 'inline-flex'\n    },\n\n    /* Styles applied to the root element when the parent `ListItem` uses `alignItems=\"flex-start\"`. */\n    alignItemsFlexStart: {\n      marginTop: 8\n    }\n  };\n};\n/**\n * A simple wrapper to apply `List` styles to an `Icon` or `SvgIcon`.\n */\n\nvar ListItemIcon = /*#__PURE__*/React.forwardRef(function ListItemIcon(props, ref) {\n  var classes = props.classes,\n      className = props.className,\n      other = _objectWithoutProperties(props, [\"classes\", \"className\"]);\n\n  var context = React.useContext(ListContext);\n  return /*#__PURE__*/React.createElement(\"div\", _extends({\n    className: clsx(classes.root, className, context.alignItems === 'flex-start' && classes.alignItemsFlexStart),\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? ListItemIcon.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component, normally `Icon`, `SvgIcon`,\n   * or a `@material-ui/icons` SVG icon element.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiListItemIcon'\n})(ListItemIcon);"],"sourceRoot":""}