{"version":3,"sources":["routes/safe/components/Balances/SendModal/screens/ReviewSendFundsTx/style.ts","routes/safe/components/Balances/SendModal/screens/ReviewSendFundsTx/index.tsx","routes/safe/components/Balances/utils/setTokenImgToPlaceholder.ts","routes/safe/components/Balances/assets/token_placeholder.svg","components/layout/Bold/index.tsx","components/Divider/index.tsx","routes/safe/components/Balances/SendModal/SafeInfo/index.tsx","components/ExecuteCheckbox/index.tsx","logic/tokens/store/actions/fetchTokens.ts"],"names":["styles","createStyles","container","padding","md","lg","amount","marginLeft","sm","buttonRow","height","justifyContent","gap","gasCostsContainer","backgroundColor","background","useStyles","makeStyles","ReviewSendFundsTx","onClose","onPrev","tx","classes","dispatch","useDispatch","safeAddress","extractSafeAddress","nativeCoin","getNetworkInfo","tokens","useSelector","extendedSafeTokensSelector","txToken","useMemo","find","token","sameAddress","address","isSendingNativeToken","txRecipient","recipientAddress","txValue","toTokenUnit","decimals","data","txAmount","useState","setData","useEffect","updateTxDataAsync","a","txData","EMPTY_DATA","ERC20TokenInstance","getERC20TokenContract","erc20TransferAmount","methods","transfer","encodeABI","useTxData","manualSafeTxGas","setManualSafeTxGas","manualGasPrice","setManualGasPrice","manualGasLimit","setManualGasLimit","useEstimateTransactionGas","txType","safeTxGas","gasCostFormatted","gasPriceFormatted","gasLimit","gasEstimation","txEstimationExecutionStatus","isExecution","isCreation","isOffChainSignature","useEstimationStatus","buttonStatus","setButtonStatus","isSpendingLimit","sameString","executionApproved","setExecutionApproved","doExecute","submitTx","txParameters","ButtonStatus","LOADING","READY","logError","Errors","_802","tokenSpendingLimit","spendingLimitTokenAddress","ZERO_ADDRESS","spendingLimit","getSpendingLimitContract","executeAllowanceTransfer","delegate","send","from","on","_801","message","createTransaction","to","valueInWei","txNonce","safeNonce","ethParameters","notifiedTransaction","TX_NOTIFICATION_TYPES","STANDARD_TX","delayExecution","EditableTxParameters","ethGasLimit","ethGasPrice","closeEditModalCallback","oldGasPrice","newGasPrice","oldSafeTxGas","newSafeTxGas","toggleEditMode","ModalHeader","subTitle","title","Hairline","Block","className","SafeInfo","Divider","withArrow","Row","margin","Paragraph","color","noMargin","size","style","letterSpacing","align","Col","xs","hash","name","recipientName","showCopyBtn","showAvatar","explorerUrl","getExplorerInfo","Img","alt","onError","setImageToPlaceholder","src","logoUri","symbol","ExecuteCheckbox","onChange","TxParametersDetail","onEdit","isTransactionCreation","isTransactionExecution","EstimationStatus","Modal","Footer","withoutBorder","Buttons","cancelButtonProps","onClick","text","confirmButtonProps","status","undefined","testId","event","img","currentTarget","test","TokenPlaceholder","Bold","this","props","children","React","Wrapper","styled","div","StyledDivider","DividerSRC","type","StyledBlock","border","currentSafeWithNames","ethBalance","safeName","control","defaultChecked","e","target","checked","label","memoize","tokenAddress","getWeb3","eth","Contract","ERC20Contract","abi","getERC721TokenContract","ERC721Contract"],"mappings":"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","file":"static/js/46.b547850b.chunk.js","sourcesContent":["import { background, lg, md, sm } from 'src/theme/variables'\nimport { createStyles } from '@material-ui/core'\n\nexport const styles = createStyles({\n  container: {\n    padding: `${md} ${lg}`,\n  },\n  amount: {\n    marginLeft: sm,\n  },\n  buttonRow: {\n    height: '84px',\n    justifyContent: 'center',\n    gap: '16px',\n  },\n  gasCostsContainer: {\n    backgroundColor: background,\n    padding: `0 ${lg}`,\n  },\n})\n","import { makeStyles } from '@material-ui/core/styles'\nimport { useEffect, useMemo, useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { EthHashInfo } from '@gnosis.pm/safe-react-components'\n\nimport { toTokenUnit } from 'src/logic/tokens/utils/humanReadableValue'\nimport { getExplorerInfo, getNetworkInfo } from 'src/config'\nimport Divider from 'src/components/Divider'\nimport Block from 'src/components/layout/Block'\nimport Col from 'src/components/layout/Col'\nimport Hairline from 'src/components/layout/Hairline'\nimport Img from 'src/components/layout/Img'\nimport Paragraph from 'src/components/layout/Paragraph'\nimport Row from 'src/components/layout/Row'\nimport { getSpendingLimitContract } from 'src/logic/contracts/spendingLimitContracts'\nimport { createTransaction } from 'src/logic/safe/store/actions/createTransaction'\nimport { TX_NOTIFICATION_TYPES } from 'src/logic/safe/transactions'\nimport { getERC20TokenContract } from 'src/logic/tokens/store/actions/fetchTokens'\nimport { sameAddress, ZERO_ADDRESS } from 'src/logic/wallets/ethAddresses'\nimport { EMPTY_DATA } from 'src/logic/wallets/ethTransactions'\nimport SafeInfo from 'src/routes/safe/components/Balances/SendModal/SafeInfo'\nimport { setImageToPlaceholder } from 'src/routes/safe/components/Balances/utils'\nimport { extendedSafeTokensSelector } from 'src/routes/safe/container/selector'\nimport { SpendingLimit } from 'src/logic/safe/store/models/safe'\nimport { sameString } from 'src/utils/strings'\nimport { TokenProps } from 'src/logic/tokens/store/model/token'\nimport { RecordOf } from 'immutable'\nimport { EstimationStatus, useEstimateTransactionGas } from 'src/logic/hooks/useEstimateTransactionGas'\nimport { useEstimationStatus } from 'src/logic/hooks/useEstimationStatus'\nimport { ButtonStatus, Modal } from 'src/components/Modal'\nimport { TransactionFees } from 'src/components/TransactionsFees'\n\nimport { styles } from './style'\nimport { EditableTxParameters } from 'src/routes/safe/components/Transactions/helpers/EditableTxParameters'\nimport { TxParametersDetail } from 'src/routes/safe/components/Transactions/helpers/TxParametersDetail'\nimport { TxParameters } from 'src/routes/safe/container/hooks/useTransactionParameters'\nimport { Errors, logError } from 'src/logic/exceptions/CodedException'\nimport { ModalHeader } from '../ModalHeader'\nimport { extractSafeAddress } from 'src/routes/routes'\nimport ExecuteCheckbox from 'src/components/ExecuteCheckbox'\n\nconst useStyles = makeStyles(styles)\n\nexport type ReviewTxProp = {\n  recipientAddress: string\n  recipientName?: string\n  amount: string\n  txRecipient: string\n  token: string\n  txType?: string\n  tokenSpendingLimit?: SpendingLimit\n}\n\ntype ReviewTxProps = {\n  onClose: () => void\n  onPrev: () => void\n  tx: ReviewTxProp\n}\n\nconst useTxData = (\n  isSendingNativeToken: boolean,\n  txAmount: string,\n  recipientAddress: string,\n  txToken?: RecordOf<TokenProps>,\n): string => {\n  const [data, setData] = useState('')\n\n  useEffect(() => {\n    const updateTxDataAsync = async () => {\n      if (!txToken) {\n        return\n      }\n\n      let txData = EMPTY_DATA\n      if (!isSendingNativeToken) {\n        const ERC20TokenInstance = getERC20TokenContract(txToken.address)\n        const erc20TransferAmount = toTokenUnit(txAmount, txToken.decimals)\n        txData = ERC20TokenInstance.methods.transfer(recipientAddress, erc20TransferAmount).encodeABI()\n      }\n      setData(txData)\n    }\n\n    updateTxDataAsync()\n  }, [isSendingNativeToken, recipientAddress, txAmount, txToken])\n\n  return data\n}\n\nconst ReviewSendFundsTx = ({ onClose, onPrev, tx }: ReviewTxProps): React.ReactElement => {\n  const classes = useStyles()\n  const dispatch = useDispatch()\n  const safeAddress = extractSafeAddress()\n  const { nativeCoin } = getNetworkInfo()\n  const tokens: any = useSelector(extendedSafeTokensSelector)\n  const txToken = useMemo(() => tokens.find((token) => sameAddress(token.address, tx.token)), [tokens, tx.token])\n  const isSendingNativeToken = useMemo(\n    () => sameAddress(txToken?.address, nativeCoin.address),\n    [txToken, nativeCoin.address],\n  )\n  const txRecipient = isSendingNativeToken ? tx.recipientAddress : txToken?.address || ''\n  const txValue = isSendingNativeToken ? toTokenUnit(tx.amount, nativeCoin.decimals) : '0'\n  const data = useTxData(isSendingNativeToken, tx.amount, tx.recipientAddress, txToken)\n  const [manualSafeTxGas, setManualSafeTxGas] = useState('0')\n  const [manualGasPrice, setManualGasPrice] = useState<string | undefined>()\n  const [manualGasLimit, setManualGasLimit] = useState<string | undefined>()\n\n  const {\n    gasCostFormatted,\n    gasPriceFormatted,\n    gasLimit,\n    gasEstimation,\n    txEstimationExecutionStatus,\n    isExecution,\n    isCreation,\n    isOffChainSignature,\n  } = useEstimateTransactionGas({\n    txData: data,\n    txRecipient,\n    txType: tx.txType,\n    txAmount: txValue,\n    safeTxGas: manualSafeTxGas,\n    manualGasPrice,\n    manualGasLimit,\n  })\n\n  const [buttonStatus, setButtonStatus] = useEstimationStatus(txEstimationExecutionStatus)\n  const isSpendingLimit = sameString(tx.txType, 'spendingLimit')\n  const [executionApproved, setExecutionApproved] = useState<boolean>(true)\n  const doExecute = isExecution && executionApproved\n\n  const submitTx = async (txParameters: TxParameters) => {\n    setButtonStatus(ButtonStatus.LOADING)\n\n    if (!safeAddress) {\n      setButtonStatus(ButtonStatus.READY)\n      logError(Errors._802)\n      return\n    }\n\n    if (isSpendingLimit && txToken && tx.tokenSpendingLimit) {\n      const spendingLimitTokenAddress = isSendingNativeToken ? ZERO_ADDRESS : txToken.address\n      const spendingLimit = getSpendingLimitContract()\n      try {\n        await spendingLimit.methods\n          .executeAllowanceTransfer(\n            safeAddress,\n            spendingLimitTokenAddress,\n            tx.recipientAddress,\n            toTokenUnit(tx.amount, txToken.decimals),\n            ZERO_ADDRESS,\n            0,\n            tx.tokenSpendingLimit.delegate,\n            EMPTY_DATA,\n          )\n          .send({ from: tx.tokenSpendingLimit.delegate })\n          .on('transactionHash', () => onClose())\n      } catch (err) {\n        setButtonStatus(ButtonStatus.READY)\n        logError(Errors._801, err.message)\n      }\n      return\n    }\n\n    dispatch(\n      createTransaction({\n        safeAddress: safeAddress,\n        to: txRecipient as string,\n        valueInWei: txValue,\n        txData: data,\n        txNonce: txParameters.safeNonce,\n        safeTxGas: txParameters.safeTxGas,\n        ethParameters: txParameters,\n        notifiedTransaction: TX_NOTIFICATION_TYPES.STANDARD_TX,\n        delayExecution: !executionApproved,\n      }),\n    )\n    onClose()\n  }\n\n  const closeEditModalCallback = (txParameters: TxParameters) => {\n    const oldGasPrice = gasPriceFormatted\n    const newGasPrice = txParameters.ethGasPrice\n    const oldSafeTxGas = gasEstimation\n    const newSafeTxGas = txParameters.safeTxGas\n\n    if (newGasPrice && oldGasPrice !== newGasPrice) {\n      setManualGasPrice(txParameters.ethGasPrice)\n    }\n\n    if (txParameters.ethGasLimit && gasLimit !== txParameters.ethGasLimit) {\n      setManualGasLimit(txParameters.ethGasLimit)\n    }\n\n    if (newSafeTxGas && oldSafeTxGas !== newSafeTxGas) {\n      setManualSafeTxGas(newSafeTxGas)\n    }\n  }\n\n  return (\n    <EditableTxParameters\n      isOffChainSignature={isOffChainSignature}\n      isExecution={doExecute}\n      ethGasLimit={gasLimit}\n      ethGasPrice={gasPriceFormatted}\n      safeTxGas={gasEstimation}\n      closeEditModalCallback={closeEditModalCallback}\n    >\n      {(txParameters, toggleEditMode) => (\n        <>\n          {/* Header */}\n          <ModalHeader onClose={onClose} subTitle=\"2 of 2\" title=\"Send funds\" />\n\n          <Hairline />\n\n          <Block className={classes.container}>\n            {/* SafeInfo */}\n            <SafeInfo />\n            <Divider withArrow />\n\n            {/* Recipient */}\n            <Row margin=\"xs\">\n              <Paragraph color=\"disabled\" noMargin size=\"md\" style={{ letterSpacing: '-0.5px' }}>\n                Recipient\n              </Paragraph>\n            </Row>\n            <Row align=\"center\" margin=\"md\" data-testid=\"recipient-review-step\">\n              <Col xs={12}>\n                <EthHashInfo\n                  hash={tx.recipientAddress}\n                  name={tx.recipientName}\n                  showCopyBtn\n                  showAvatar\n                  explorerUrl={getExplorerInfo(tx.recipientAddress)}\n                />\n              </Col>\n            </Row>\n\n            {/* Amount */}\n            <Row margin=\"xs\">\n              <Paragraph color=\"disabled\" noMargin size=\"md\" style={{ letterSpacing: '-0.5px' }}>\n                Amount\n              </Paragraph>\n            </Row>\n            <Row align=\"center\" margin=\"md\">\n              <Img alt={txToken?.name as string} height={28} onError={setImageToPlaceholder} src={txToken?.logoUri} />\n              <Paragraph\n                className={classes.amount}\n                noMargin\n                size=\"md\"\n                data-testid={`amount-${txToken?.symbol as string}-review-step`}\n              >\n                {tx.amount} {txToken?.symbol}\n              </Paragraph>\n            </Row>\n\n            {isExecution && !isSpendingLimit && <ExecuteCheckbox onChange={setExecutionApproved} />}\n\n            {/* Tx Parameters */}\n            {/* FIXME TxParameters should be updated to be used with spending limits */}\n            {!isSpendingLimit && (\n              <TxParametersDetail\n                txParameters={txParameters}\n                onEdit={toggleEditMode}\n                isTransactionCreation={isCreation}\n                isTransactionExecution={doExecute}\n                isOffChainSignature={isOffChainSignature}\n              />\n            )}\n          </Block>\n\n          {/* Disclaimer */}\n          {/* FIXME Estimation should be fixed to be used with spending limits */}\n          {!isSpendingLimit && txEstimationExecutionStatus !== EstimationStatus.LOADING && (\n            <div className={classes.gasCostsContainer}>\n              <TransactionFees\n                gasCostFormatted={gasCostFormatted}\n                isExecution={doExecute}\n                isCreation={isCreation}\n                isOffChainSignature={isOffChainSignature}\n                txEstimationExecutionStatus={txEstimationExecutionStatus}\n              />\n            </div>\n          )}\n\n          {/* Footer */}\n          <Modal.Footer withoutBorder={!isSpendingLimit && buttonStatus !== ButtonStatus.LOADING}>\n            <Modal.Footer.Buttons\n              cancelButtonProps={{ onClick: onPrev, text: 'Back' }}\n              confirmButtonProps={{\n                onClick: () => submitTx(txParameters),\n                status: buttonStatus,\n                text: txEstimationExecutionStatus === EstimationStatus.LOADING ? 'Estimating' : undefined,\n                testId: 'submit-tx-btn',\n              }}\n            />\n          </Modal.Footer>\n        </>\n      )}\n    </EditableTxParameters>\n  )\n}\n\nexport default ReviewSendFundsTx\n","import { SyntheticEvent } from 'react'\n\nimport TokenPlaceholder from 'src/routes/safe/components/Balances/assets/token_placeholder.svg'\n\nexport const setImageToPlaceholder = (event: SyntheticEvent<HTMLImageElement, Event>): void => {\n  const img = event.currentTarget\n  if (!/token_placeholder/.test(img.src)) {\n    img.src = TokenPlaceholder\n  }\n}\n","export default __webpack_public_path__ + \"static/media/token_placeholder.c1abe466.svg\";","import * as React from 'react'\n\nclass Bold extends React.PureComponent<any> {\n  render() {\n    const { children, ...props } = this.props\n\n    return <b {...props}>{children}</b>\n  }\n}\n\nexport default Bold\n","import { ReactElement } from 'react'\nimport styled from 'styled-components'\nimport { Icon, Divider as DividerSRC } from '@gnosis.pm/safe-react-components'\n\nconst Wrapper = styled.div`\n  display: flex;\n  align-items: center;\n  margin: 8px 0;\n\n  svg {\n    margin: 0 12px 0 4px;\n  }\n`\nconst StyledDivider = styled(DividerSRC)`\n  width: 100%;\n`\n\ntype Props = {\n  withArrow?: boolean\n}\n\nconst Divider = ({ withArrow }: Props): ReactElement => (\n  <Wrapper>\n    {withArrow && <Icon type=\"arrowDown\" size=\"md\" />}\n    <StyledDivider />\n  </Wrapper>\n)\n\nexport default Divider\n","import { useSelector } from 'react-redux'\nimport { EthHashInfo } from '@gnosis.pm/safe-react-components'\nimport styled from 'styled-components'\n\nimport { getExplorerInfo, getNetworkInfo } from 'src/config'\nimport { currentSafeWithNames } from 'src/logic/safe/store/selectors'\nimport Paragraph from 'src/components/layout/Paragraph'\nimport Bold from 'src/components/layout/Bold'\nimport { border, xs } from 'src/theme/variables'\nimport Block from 'src/components/layout/Block'\n\nconst StyledBlock = styled(Block)`\n  font-size: 12px;\n  line-height: 1.08;\n  letter-spacing: -0.5px;\n  background-color: ${border};\n  width: fit-content;\n  padding: 5px 10px;\n  margin-top: ${xs};\n  margin-left: 40px;\n  border-radius: 3px;\n`\n\nconst SafeInfo = (): React.ReactElement => {\n  const { address: safeAddress, ethBalance, name: safeName } = useSelector(currentSafeWithNames)\n  const { nativeCoin } = getNetworkInfo()\n\n  return (\n    <>\n      <EthHashInfo\n        hash={safeAddress}\n        name={safeName}\n        explorerUrl={getExplorerInfo(safeAddress)}\n        showAvatar\n        showCopyBtn\n      />\n      {ethBalance && (\n        <StyledBlock>\n          <Paragraph noMargin>\n            Balance: <Bold data-testid=\"current-eth-balance\">{`${ethBalance} ${nativeCoin.symbol}`}</Bold>\n          </Paragraph>\n        </StyledBlock>\n      )}\n    </>\n  )\n}\n\nexport default SafeInfo\n","import { ReactElement } from 'react'\nimport { Checkbox, FormControlLabel } from '@material-ui/core'\nimport Row from 'src/components/layout/Row'\nimport Paragraph from '../layout/Paragraph'\n\ninterface ExecuteCheckboxProps {\n  onChange: (val: boolean) => unknown\n}\n\nconst ExecuteCheckbox = ({ onChange }: ExecuteCheckboxProps): ReactElement | null => {\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\n    onChange(e.target.checked)\n  }\n  return (\n    <Row margin=\"md\">\n      <Paragraph noMargin>\n        If you want to sign the transaction now but manually execute it later, click on the checkbox below.\n      </Paragraph>\n      <FormControlLabel\n        control={<Checkbox defaultChecked color=\"primary\" onChange={handleChange} />}\n        label=\"Execute transaction\"\n        data-testid=\"execute-checkbox\"\n      />\n    </Row>\n  )\n}\n\nexport default ExecuteCheckbox\n","import ERC20Contract from '@openzeppelin/contracts/build/contracts/ERC20.json'\nimport ERC721Contract from '@openzeppelin/contracts/build/contracts/ERC721.json'\nimport { List } from 'immutable'\nimport memoize from 'lodash.memoize'\nimport { AnyAction } from 'redux'\nimport { ThunkDispatch } from 'redux-thunk'\nimport { AbiItem } from 'web3-utils'\n\nimport { ERC20 } from 'src/types/contracts/ERC20.d'\nimport { ERC721 } from 'src/types/contracts/ERC721.d'\nimport { addTokens } from 'src/logic/tokens/store/actions/addTokens'\nimport { fetchErc20AndErc721AssetsList } from 'src/logic/tokens/api'\nimport { makeToken } from 'src/logic/tokens/store/model/token'\nimport { tokensSelector } from 'src/logic/tokens/store/selectors'\nimport { getWeb3 } from 'src/logic/wallets/getWeb3'\nimport { AppReduxState } from 'src/store'\nimport { Errors, logError } from 'src/logic/exceptions/CodedException'\nimport { TokenResult } from '../../api/fetchErc20AndErc721AssetsList'\n\nconst createERC20TokenContract = (tokenAddress: string): ERC20 => {\n  const web3 = getWeb3()\n  return new web3.eth.Contract(ERC20Contract.abi as AbiItem[], tokenAddress) as unknown as ERC20\n}\n\nconst createERC721TokenContract = (tokenAddress: string): ERC721 => {\n  const web3 = getWeb3()\n  return new web3.eth.Contract(ERC721Contract.abi as AbiItem[], tokenAddress) as unknown as ERC721\n}\n\nexport const getERC20TokenContract = memoize(createERC20TokenContract)\n\nexport const getERC721TokenContract = memoize(createERC721TokenContract)\n\nexport const containsMethodByHash = async (contractAddress: string, methodHash: string): Promise<boolean> => {\n  const web3 = getWeb3()\n  const byteCode = await web3.eth.getCode(contractAddress)\n\n  return byteCode.indexOf(methodHash.replace('0x', '')) !== -1\n}\n\nexport const fetchTokens =\n  () =>\n  async (\n    dispatch: ThunkDispatch<AppReduxState, undefined, AnyAction>,\n    getState: () => AppReduxState,\n  ): Promise<void> => {\n    const currentSavedTokens = tokensSelector(getState())\n\n    let tokenList: TokenResult[]\n    try {\n      const resp = await fetchErc20AndErc721AssetsList()\n      tokenList = resp.data.results\n    } catch (e) {\n      logError(Errors._600, e.message)\n      return\n    }\n\n    const erc20Tokens = tokenList.filter((token) => token.type.toLowerCase() === 'erc20')\n\n    if (currentSavedTokens?.size === erc20Tokens.length) {\n      return\n    }\n\n    const tokens = List(erc20Tokens.map((token) => makeToken(token)))\n\n    dispatch(addTokens(tokens))\n  }\n"],"sourceRoot":""}