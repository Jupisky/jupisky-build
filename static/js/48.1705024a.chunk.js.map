{"version":3,"sources":["routes/safe/components/Balances/SendModal/screens/ContractInteraction/ReviewCustomTx/style.ts","routes/safe/components/Balances/SendModal/screens/ContractInteraction/ReviewCustomTx/index.tsx","routes/safe/components/Balances/utils/setTokenImgToPlaceholder.ts","routes/safe/components/Balances/assets/token_placeholder.svg","components/layout/Bold/index.tsx","components/Divider/index.tsx","routes/safe/components/Balances/SendModal/SafeInfo/index.tsx","components/ExecuteCheckbox/index.tsx"],"names":["styles","createStyles","container","padding","md","lg","value","marginLeft","sm","outerData","borderRadius","border","minHeight","data","wordBreak","overflow","fontSize","fontFamily","maxHeight","letterSpacing","fontStretch","lineHeight","buttonRow","height","justifyContent","gap","gasCostsContainer","backgroundColor","background","useStyles","makeStyles","ReviewCustomTx","onClose","onPrev","tx","classes","dispatch","useDispatch","safeAddress","extractSafeAddress","nativeCoin","getNetworkInfo","useState","executionApproved","setExecutionApproved","useEstimateTransactionGas","txRecipient","contractAddress","txData","trim","txAmount","toTokenUnit","decimals","gasLimit","gasEstimation","gasPriceFormatted","gasCostFormatted","txEstimationExecutionStatus","isExecution","isCreation","isOffChainSignature","doExecute","useEstimationStatus","buttonStatus","EditableTxParameters","ethGasLimit","ethGasPrice","safeTxGas","toString","txParameters","toggleEditMode","ModalHeader","subTitle","title","Hairline","Block","className","SafeInfo","Divider","withArrow","Row","margin","Paragraph","color","noMargin","size","style","align","Col","xs","hash","name","contractName","showAvatar","showCopyBtn","explorerUrl","getExplorerInfo","Img","alt","onError","setImageToPlaceholder","src","getEthAsToken","logoUri","ExecuteCheckbox","onChange","TxParametersDetail","onEdit","isTransactionCreation","isTransactionExecution","EstimationStatus","LOADING","Modal","Footer","withoutBorder","ButtonStatus","Buttons","cancelButtonProps","onClick","text","confirmButtonProps","txValue","createTransaction","to","valueInWei","txNonce","safeNonce","ethParameters","notifiedTransaction","TX_NOTIFICATION_TYPES","STANDARD_TX","delayExecution","console","error","submitTx","status","undefined","testId","event","img","currentTarget","test","TokenPlaceholder","Bold","this","props","children","React","Wrapper","styled","div","StyledDivider","DividerSRC","type","StyledBlock","useSelector","currentSafeWithNames","address","ethBalance","safeName","symbol","control","defaultChecked","e","target","checked","label"],"mappings":"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","file":"static/js/48.1705024a.chunk.js","sourcesContent":["import { background, border, lg, md, sm } from 'src/theme/variables'\nimport { createStyles } from '@material-ui/core'\n\nexport const styles = createStyles({\n  container: {\n    padding: `${md} ${lg}`,\n  },\n  value: {\n    marginLeft: sm,\n  },\n  outerData: {\n    borderRadius: '5px',\n    border: `1px solid ${border}`,\n    padding: '11px',\n    minHeight: '21px',\n  },\n  data: {\n    wordBreak: 'break-all',\n    overflow: 'auto',\n    fontSize: '14px',\n    fontFamily: 'Averta',\n    maxHeight: '100px',\n    letterSpacing: 'normal',\n    fontStretch: 'normal',\n    lineHeight: '1.43',\n  },\n  buttonRow: {\n    height: '84px',\n    justifyContent: 'center',\n    gap: '16px',\n  },\n  gasCostsContainer: {\n    backgroundColor: background,\n    padding: `${sm} ${lg}`,\n  },\n})\n","import { ReactElement, useState } from 'react'\nimport { useDispatch } from 'react-redux'\nimport { makeStyles } from '@material-ui/core/styles'\nimport { EthHashInfo } from '@gnosis.pm/safe-react-components'\n\nimport { getExplorerInfo, getNetworkInfo } from 'src/config'\nimport { toTokenUnit } from 'src/logic/tokens/utils/humanReadableValue'\nimport Divider from 'src/components/Divider'\nimport Block from 'src/components/layout/Block'\nimport Col from 'src/components/layout/Col'\nimport Hairline from 'src/components/layout/Hairline'\nimport Img from 'src/components/layout/Img'\nimport Paragraph from 'src/components/layout/Paragraph'\nimport Row from 'src/components/layout/Row'\nimport { createTransaction } from 'src/logic/safe/store/actions/createTransaction'\nimport { TX_NOTIFICATION_TYPES } from 'src/logic/safe/transactions'\nimport { getEthAsToken } from 'src/logic/tokens/utils/tokenHelpers'\nimport SafeInfo from 'src/routes/safe/components/Balances/SendModal/SafeInfo'\nimport { setImageToPlaceholder } from 'src/routes/safe/components/Balances/utils'\nimport { TxParametersDetail } from 'src/routes/safe/components/Transactions/helpers/TxParametersDetail'\nimport { useEstimateTransactionGas, EstimationStatus } from 'src/logic/hooks/useEstimateTransactionGas'\nimport { useEstimationStatus } from 'src/logic/hooks/useEstimationStatus'\nimport { ButtonStatus, Modal } from 'src/components/Modal'\nimport { TransactionFees } from 'src/components/TransactionsFees'\nimport { EditableTxParameters } from 'src/routes/safe/components/Transactions/helpers/EditableTxParameters'\nimport { styles } from './style'\nimport { TxParameters } from 'src/routes/safe/container/hooks/useTransactionParameters'\nimport { ModalHeader } from 'src/routes/safe/components/Balances/SendModal/screens/ModalHeader'\nimport { extractSafeAddress } from 'src/routes/routes'\nimport ExecuteCheckbox from 'src/components/ExecuteCheckbox'\n\nexport type ReviewCustomTxProps = {\n  contractAddress: string\n  contractName?: string\n  data: string\n  value: string\n}\n\ntype Props = {\n  onClose: () => void\n  onPrev: () => void\n  tx: ReviewCustomTxProps\n}\n\nconst useStyles = makeStyles(styles)\n\nconst ReviewCustomTx = ({ onClose, onPrev, tx }: Props): ReactElement => {\n  const classes = useStyles()\n  const dispatch = useDispatch()\n  const safeAddress = extractSafeAddress()\n  const { nativeCoin } = getNetworkInfo()\n  const [executionApproved, setExecutionApproved] = useState<boolean>(true)\n\n  const {\n    gasLimit,\n    gasEstimation,\n    gasPriceFormatted,\n    gasCostFormatted,\n    txEstimationExecutionStatus,\n    isExecution,\n    isCreation,\n    isOffChainSignature,\n  } = useEstimateTransactionGas({\n    txRecipient: tx.contractAddress as string,\n    txData: tx.data ? tx.data.trim() : '',\n    txAmount: tx.value ? toTokenUnit(tx.value, nativeCoin.decimals) : '0',\n  })\n\n  const doExecute = isExecution && executionApproved\n  const [buttonStatus] = useEstimationStatus(txEstimationExecutionStatus)\n\n  const submitTx = (txParameters: TxParameters) => {\n    const txRecipient = tx.contractAddress\n    const txData = tx.data ? tx.data.trim() : ''\n    const txValue = tx.value ? toTokenUnit(tx.value, nativeCoin.decimals) : '0'\n\n    if (safeAddress) {\n      dispatch(\n        createTransaction({\n          safeAddress: safeAddress,\n          to: txRecipient as string,\n          valueInWei: txValue,\n          txData,\n          txNonce: txParameters.safeNonce,\n          safeTxGas: txParameters.safeTxGas,\n          ethParameters: txParameters,\n          notifiedTransaction: TX_NOTIFICATION_TYPES.STANDARD_TX,\n          delayExecution: !executionApproved,\n        }),\n      )\n    } else {\n      console.error('There was an error trying to submit the transaction, the safeAddress was not found')\n    }\n    onClose()\n  }\n\n  return (\n    <EditableTxParameters\n      isOffChainSignature={isOffChainSignature}\n      isExecution={doExecute}\n      ethGasLimit={gasLimit}\n      ethGasPrice={gasPriceFormatted}\n      safeTxGas={gasEstimation.toString()}\n    >\n      {(txParameters, toggleEditMode) => (\n        <>\n          <ModalHeader onClose={onClose} subTitle=\"2 of 2\" title=\"Contract interaction\" />\n          <Hairline />\n          <Block className={classes.container}>\n            <SafeInfo />\n            <Divider withArrow />\n            <Row margin=\"xs\">\n              <Paragraph color=\"disabled\" noMargin size=\"md\" style={{ letterSpacing: '-0.5px' }}>\n                Recipient\n              </Paragraph>\n            </Row>\n\n            <Row align=\"center\" margin=\"md\">\n              <Col xs={12}>\n                <EthHashInfo\n                  hash={tx.contractAddress as string}\n                  name={tx.contractName ?? ''}\n                  showAvatar\n                  showCopyBtn\n                  explorerUrl={getExplorerInfo(tx.contractAddress as string)}\n                />\n              </Col>\n            </Row>\n            <Row margin=\"xs\">\n              <Paragraph color=\"disabled\" noMargin size=\"md\" style={{ letterSpacing: '-0.5px' }}>\n                Value\n              </Paragraph>\n            </Row>\n            <Row align=\"center\" margin=\"md\">\n              <Img alt=\"Ether\" height={28} onError={setImageToPlaceholder} src={getEthAsToken('0').logoUri || ''} />\n              <Paragraph className={classes.value} noMargin size=\"md\">\n                {tx.value || 0}\n                {' ' + nativeCoin.name}\n              </Paragraph>\n            </Row>\n            <Row margin=\"xs\">\n              <Paragraph color=\"disabled\" noMargin size=\"md\" style={{ letterSpacing: '-0.5px' }}>\n                Data (hex encoded)\n              </Paragraph>\n            </Row>\n            <Row align=\"center\" margin=\"md\">\n              <Col className={classes.outerData}>\n                <Row className={classes.data} size=\"md\">\n                  {tx.data}\n                </Row>\n              </Col>\n            </Row>\n\n            {isExecution && <ExecuteCheckbox onChange={setExecutionApproved} />}\n\n            {/* Tx Parameters */}\n            <TxParametersDetail\n              txParameters={txParameters}\n              onEdit={toggleEditMode}\n              isTransactionCreation={isCreation}\n              isTransactionExecution={doExecute}\n              isOffChainSignature={isOffChainSignature}\n            />\n          </Block>\n          {txEstimationExecutionStatus === EstimationStatus.LOADING ? null : (\n            <Block className={classes.gasCostsContainer}>\n              <TransactionFees\n                gasCostFormatted={gasCostFormatted}\n                isExecution={doExecute}\n                isCreation={isCreation}\n                isOffChainSignature={isOffChainSignature}\n                txEstimationExecutionStatus={txEstimationExecutionStatus}\n              />\n            </Block>\n          )}\n          <Modal.Footer withoutBorder={buttonStatus !== ButtonStatus.LOADING}>\n            <Modal.Footer.Buttons\n              cancelButtonProps={{ onClick: onPrev, text: 'Back' }}\n              confirmButtonProps={{\n                onClick: () => submitTx(txParameters),\n                status: buttonStatus,\n                text: txEstimationExecutionStatus === EstimationStatus.LOADING ? 'Estimating' : undefined,\n                testId: 'submit-tx-btn',\n              }}\n            />\n          </Modal.Footer>\n        </>\n      )}\n    </EditableTxParameters>\n  )\n}\n\nexport default ReviewCustomTx\n","import { SyntheticEvent } from 'react'\n\nimport TokenPlaceholder from 'src/routes/safe/components/Balances/assets/token_placeholder.svg'\n\nexport const setImageToPlaceholder = (event: SyntheticEvent<HTMLImageElement, Event>): void => {\n  const img = event.currentTarget\n  if (!/token_placeholder/.test(img.src)) {\n    img.src = TokenPlaceholder\n  }\n}\n","export default __webpack_public_path__ + \"static/media/token_placeholder.c1abe466.svg\";","import * as React from 'react'\n\nclass Bold extends React.PureComponent<any> {\n  render() {\n    const { children, ...props } = this.props\n\n    return <b {...props}>{children}</b>\n  }\n}\n\nexport default Bold\n","import { ReactElement } from 'react'\nimport styled from 'styled-components'\nimport { Icon, Divider as DividerSRC } from '@gnosis.pm/safe-react-components'\n\nconst Wrapper = styled.div`\n  display: flex;\n  align-items: center;\n  margin: 8px 0;\n\n  svg {\n    margin: 0 12px 0 4px;\n  }\n`\nconst StyledDivider = styled(DividerSRC)`\n  width: 100%;\n`\n\ntype Props = {\n  withArrow?: boolean\n}\n\nconst Divider = ({ withArrow }: Props): ReactElement => (\n  <Wrapper>\n    {withArrow && <Icon type=\"arrowDown\" size=\"md\" />}\n    <StyledDivider />\n  </Wrapper>\n)\n\nexport default Divider\n","import { useSelector } from 'react-redux'\nimport { EthHashInfo } from '@gnosis.pm/safe-react-components'\nimport styled from 'styled-components'\n\nimport { getExplorerInfo, getNetworkInfo } from 'src/config'\nimport { currentSafeWithNames } from 'src/logic/safe/store/selectors'\nimport Paragraph from 'src/components/layout/Paragraph'\nimport Bold from 'src/components/layout/Bold'\nimport { border, xs } from 'src/theme/variables'\nimport Block from 'src/components/layout/Block'\n\nconst StyledBlock = styled(Block)`\n  font-size: 12px;\n  line-height: 1.08;\n  letter-spacing: -0.5px;\n  background-color: ${border};\n  width: fit-content;\n  padding: 5px 10px;\n  margin-top: ${xs};\n  margin-left: 40px;\n  border-radius: 3px;\n`\n\nconst SafeInfo = (): React.ReactElement => {\n  const { address: safeAddress, ethBalance, name: safeName } = useSelector(currentSafeWithNames)\n  const { nativeCoin } = getNetworkInfo()\n\n  return (\n    <>\n      <EthHashInfo\n        hash={safeAddress}\n        name={safeName}\n        explorerUrl={getExplorerInfo(safeAddress)}\n        showAvatar\n        showCopyBtn\n      />\n      {ethBalance && (\n        <StyledBlock>\n          <Paragraph noMargin>\n            Balance: <Bold data-testid=\"current-eth-balance\">{`${ethBalance} ${nativeCoin.symbol}`}</Bold>\n          </Paragraph>\n        </StyledBlock>\n      )}\n    </>\n  )\n}\n\nexport default SafeInfo\n","import { ReactElement } from 'react'\nimport { Checkbox, FormControlLabel } from '@material-ui/core'\nimport Row from 'src/components/layout/Row'\nimport Paragraph from '../layout/Paragraph'\n\ninterface ExecuteCheckboxProps {\n  onChange: (val: boolean) => unknown\n}\n\nconst ExecuteCheckbox = ({ onChange }: ExecuteCheckboxProps): ReactElement | null => {\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\n    onChange(e.target.checked)\n  }\n  return (\n    <Row margin=\"md\">\n      <Paragraph noMargin>\n        If you want to sign the transaction now but manually execute it later, click on the checkbox below.\n      </Paragraph>\n      <FormControlLabel\n        control={<Checkbox defaultChecked color=\"primary\" onChange={handleChange} />}\n        label=\"Execute transaction\"\n        data-testid=\"execute-checkbox\"\n      />\n    </Row>\n  )\n}\n\nexport default ExecuteCheckbox\n"],"sourceRoot":""}