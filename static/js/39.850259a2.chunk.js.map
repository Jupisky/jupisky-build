{"version":3,"sources":["components/forms/Field/index.tsx","components/forms/TextField/index.tsx","assets/icons/qrcode.svg","components/ScanQRModal/style.ts","components/ScanQRModal/index.tsx","components/ScanQRModal/ScanQRWrapper/index.tsx","components/layout/Heading/index.tsx","components/layout/Heading/index.module.scss","components/NetworkLabel/NetworkLabel.tsx","components/Stepper/stepperContext.tsx","components/forms/AddressInput/index.tsx","components/layout/Page/index.tsx","components/layout/Page/index.module.scss","components/Stepper/Stepper.tsx","components/StepperForm/StepperForm.tsx","logic/hooks/useMnemonicName.ts","logic/hooks/useMnemonicName.dict.ts","routes/LoadSafePage/steps/SelectNetworkStep.tsx","routes/LoadSafePage/fields/loadFields.tsx","routes/LoadSafePage/fields/utils.ts","routes/LoadSafePage/steps/LoadSafeAddressStep.tsx","routes/LoadSafePage/steps/LoadSafeOwnersStep.tsx","routes/LoadSafePage/steps/ReviewLoadStep.tsx","routes/LoadSafePage/LoadSafePage.tsx"],"names":["GnoField","props","overflowStyle","overflow","width","useStyles","makeStyles","createStyles","root","paddingTop","lg","paddingBottom","lineHeight","TextField","input","name","onChange","value","restInput","inputAdornment","meta","multiline","rows","testId","text","rest","classes","helperText","undefined","showError","touched","pristine","valid","hasError","error","modifiedSinceLastSubmit","submitError","errorMessage","isInactiveAndPristineOrUntouched","active","isInvalidAndUntouched","disableUnderline","inputRoot","statusClasses","inputProps","autoComplete","inputRootProps","className","InputProps","style","styles","heading","padding","justifyContent","maxHeight","boxSizing","loaderContainer","height","close","color","secondaryText","detailsContainer","backgroundColor","background","buttonRow","button","marginLeft","sm","ScanQRModal","isOpen","onClose","onScan","useState","fileUploadModalOpen","setFileUploadModalOpen","setError","cameraBlocked","setCameraBlocked","scannerRef","React","openImageDialog","current","useEffect","onFileScannedResolve","successData","console","Modal","description","handleClose","open","title","Row","align","grow","Paragraph","noMargin","size","IconButton","disableRipple","onClick","Hairline","Col","layout","middle","Block","margin","legacyMode","onError","err","data","ref","facingMode","Button","minWidth","variant","qrCodeBtn","cursor","ScanQRWrapper","handleScan","qrModalOpen","setQrModalOpen","closeQrModal","Img","alt","role","src","QRIcon","cx","classNames","bind","Heading","children","tag","truncate","capitalize","module","exports","NetworkLabel","networkInfo","flexGrow","selectedNetwork","getNetworkInfo","textColor","StyledLabel","label","styled","span","extraSmallFontSize","xs","border","fontColor","StepperContext","createContext","useStepper","context","useContext","Object","keys","length","Error","StepperProvider","onFinish","store","disableNextButton","stepsComponents","currentStep","setCurrentStep","steps","Children","toArray","CurrentStepComponent","nextButtonType","nextButtonLabel","isSubmitButton","isFirstStep","isLastStep","customNextButtonLabel","state","onClickPreviousStep","history","goBack","step","onClickNextStep","Provider","AddressInput","placeholder","fieldMutator","validators","defaultValue","disabled","currentInput","setCurrentInput","resolutions","setResolutions","resolvedAddress","isResolving","adornment","endAdornment","position","component","type","spellCheck","validate","composeValidators","required","mustBeEthereumAddress","a","address","trimSpaces","isValidEnsName","isValidCryptoDomainName","prev","getAddressFromDomain","resolverAddr","formattedAddress","checksumAddress","logError","Errors","_101","message","checkedAddress","isValidAddress","Page","page","StepperComponent","Stepper","activeStep","orientation","map","index","isStepLabelClickable","currentComponent","backButtonLabel","StepLabel","stepLabel","StepContent","Paper","elevation","controlStyle","center","backButton","nextButton","theme","maxWidth","boxShadow","borderRadius","marginRight","fontWeight","boldFont","palette","secondary","main","StepElement","StepperForm","onSubmit","initialValues","setValidate","onSubmitForm","setOnSubmitForm","useMemo","filter","Boolean","list","ComponentStep","values","handleSubmit","submitting","StepFormElement","animals","trim","split","adjectives","getRandomItem","arr","Math","floor","random","useMnemonicName","noun","setName","adj","getRandomName","useMnemonicSafeName","networkName","getNetworkLabel","toLowerCase","SelectNetworkStep","isNetworkSelectorPopupOpen","setIsNetworkSelectorPopupOpen","openNetworkSelectorPopup","networks","getNetworks","Container","SwitchNetworkContainer","Dialog","StyledDialogTitle","disableTypography","Typography","StyledDialogContent","dividers","List","network","NetworkLabelItem","networkId","id","setNetwork","DialogContent","DialogTitle","div","FIELD_LOAD_CUSTOM_SAFE_NAME","FIELD_LOAD_SUGGESTED_SAFE_NAME","FIELD_LOAD_SAFE_ADDRESS","FIELD_LOAD_IS_LOADING_SAFE_ADDRESS","FIELD_SAFE_OWNER_LIST","FIELD_SAFE_THRESHOLD","getLoadSafeName","formValues","addressBook","safeAddress","LoadSafeAddressStep","ownersWithName","setOwnersWithName","threshold","setThreshold","isValidSafeAddress","setIsValidSafeAddress","isSafeInfoLoading","setIsSafeInfoLoading","loadSafeForm","useForm","useSelector","currentNetworkAddressBookAsMap","useField","safeAddressError","checkSafeAddress","isChecksumAddress","getSafeInfo","owners","makeAddressBookEntry","change","safeName","getState","StyledLink","href","rel","target","FieldContainer","Field","val","InputAdornment","CheckIconAddressAdornment","loadSafeAddressStepValidations","errors","CheckCircle","LoadSafeOwnersStep","TitleContainer","TableContainer","HeaderContainer","ownerFieldName","OwnerContainer","initialValue","minMaxLength","OwnerAddressContainer","hash","showAvatar","showCopyBtn","explorerUrl","getExplorerInfo","md","ReviewLoadStep","userAddress","userAccountSelector","ownerList","ownerListWithNames","owner","ownerNameValue","isUserConnectedWalletASAfeOwner","some","checkIfUserAddressIsAnOwner","DetailsContainer","StyledParagraph","weight","SafeAddressContainer","shortenHash","OwnersContainer","OwnerItemContainer","Load","dispatch","useDispatch","useHistory","extractPrefixedSafeAddress","LOAD_SPECIFIC_SAFE_ROUTE","shortName","safeRandomName","initialFormValues","setInitialFormValues","updateAddressBook","ownerEntries","safeEntry","addressBookSafeLoad","onSubmitLoadSafe","checksummedAddress","buildSafe","safeProps","loadStoredSafes","storedSafes","saveSafes","addOrUpdateSafe","push","generateSafeRoute","SAFE_ROUTES","ASSETS_BALANCES","getCurrentShortChainName","BackIcon"],"mappings":"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","file":"static/js/39.850259a2.chunk.js","sourcesContent":["import { Field } from 'react-final-form'\n\n// $FlowFixMe\nconst GnoField = ({ ...props }: any) => <Field {...props} />\n\nexport default GnoField\n","import MuiTextField from '@material-ui/core/TextField'\nimport { createStyles, makeStyles } from '@material-ui/core/styles'\n\nimport { lg } from 'src/theme/variables'\n\n// Neded for solving a fix in Windows browsers\nconst overflowStyle = {\n  overflow: 'hidden',\n  width: '100%',\n}\n\nconst styles = () =>\n  createStyles({\n    root: {\n      paddingTop: lg,\n      paddingBottom: '12px',\n      lineHeight: 0,\n    },\n  })\n\nconst useStyles = makeStyles(styles)\n\ntype Props = {\n  input: {\n    name: string\n    onChange?: () => void\n    value: string\n    placeholder: string\n    type: string\n  }\n  meta: {\n    touched?: boolean\n    pristine?: boolean\n    valid?: boolean\n    error?: string\n    modifiedSinceLastSubmit?: boolean\n    submitError?: boolean\n    active?: boolean\n  }\n  inputAdornment?: { endAdornment: React.ReactElement } | undefined\n  multiline: boolean\n  rows?: string\n  testId: string\n  text: string\n  disabled?: boolean\n  rowsMax?: number\n  className?: string\n}\n\nconst TextField = (props: Props): React.ReactElement => {\n  const {\n    input: { name, onChange, value, ...restInput },\n    inputAdornment,\n    meta,\n    multiline,\n    rows,\n    testId,\n    text,\n    ...rest\n  } = props\n  const classes = useStyles()\n  const helperText = value ? text : undefined\n  const showError = (meta.touched || !meta.pristine) && !meta.valid\n  const hasError = !!meta.error || (!meta.modifiedSinceLastSubmit && !!meta.submitError)\n  const errorMessage = meta.error || meta.submitError\n  const isInactiveAndPristineOrUntouched = !meta.active && (meta.pristine || !meta.touched)\n  const isInvalidAndUntouched = typeof meta.error === 'undefined' ? true : !meta.touched\n\n  const disableUnderline = isInactiveAndPristineOrUntouched && isInvalidAndUntouched\n\n  const inputRoot = helperText ? classes.root : ''\n  const statusClasses = meta.valid ? 'isValid' : hasError && showError ? 'isInvalid' : ''\n  const inputProps = {\n    ...restInput,\n    autoComplete: 'off',\n    'data-testid': testId,\n  }\n  const inputRootProps = {\n    ...inputAdornment,\n    className: `${inputRoot} ${statusClasses}`,\n    disableUnderline: disableUnderline,\n  }\n\n  return (\n    <MuiTextField\n      error={hasError && showError}\n      helperText={hasError && showError ? errorMessage : helperText || ' '}\n      inputProps={inputProps} // blank in order to force to have helper text\n      InputProps={inputRootProps}\n      multiline={multiline}\n      name={name}\n      onChange={onChange}\n      rows={rows}\n      style={overflowStyle}\n      value={value}\n      {...rest}\n    />\n  )\n}\n\nexport default TextField\n","export default __webpack_public_path__ + \"static/media/qrcode.fec1b6d8.svg\";","import { background, lg, secondaryText, sm } from 'src/theme/variables'\nimport { createStyles } from '@material-ui/core'\n\nexport const styles = createStyles({\n  heading: {\n    padding: lg,\n    justifyContent: 'space-between',\n    maxHeight: '75px',\n    boxSizing: 'border-box',\n  },\n  loaderContainer: {\n    width: '100%',\n    height: '100%',\n  },\n  close: {\n    height: '25px',\n    width: '25px',\n    color: secondaryText,\n  },\n  detailsContainer: {\n    backgroundColor: background,\n    maxHeight: '450px',\n  },\n  buttonRow: {\n    height: '84px',\n    justifyContent: 'center',\n  },\n  button: {\n    '&:last-child': {\n      marginLeft: sm,\n    },\n  },\n})\n","import IconButton from '@material-ui/core/IconButton'\nimport { makeStyles } from '@material-ui/core/styles'\nimport Close from '@material-ui/icons/Close'\nimport * as React from 'react'\nimport QrReader from 'react-qr-reader'\n\nimport { styles } from './style'\n\nimport Modal from 'src/components/Modal'\nimport Block from 'src/components/layout/Block'\nimport Button from 'src/components/layout/Button'\nimport Col from 'src/components/layout/Col'\nimport Hairline from 'src/components/layout/Hairline'\nimport Paragraph from 'src/components/layout/Paragraph'\nimport Row from 'src/components/layout/Row'\nimport { useEffect, useState } from 'react'\n\nconst useStyles = makeStyles(styles)\n\ntype Props = {\n  isOpen: boolean\n  onClose: () => void\n  onScan: (value: string) => void\n}\n\nexport const ScanQRModal = ({ isOpen, onClose, onScan }: Props): React.ReactElement => {\n  const classes = useStyles()\n  const [fileUploadModalOpen, setFileUploadModalOpen] = useState<boolean>(false)\n  const [error, setError] = useState<string | null>(null)\n  const [cameraBlocked, setCameraBlocked] = useState<boolean>(false)\n  const scannerRef: any = React.createRef()\n  const openImageDialog = React.useCallback(() => {\n    scannerRef.current.openImageDialog()\n  }, [scannerRef])\n\n  useEffect(() => {\n    if (!fileUploadModalOpen && cameraBlocked && !error) {\n      setFileUploadModalOpen(true)\n      openImageDialog()\n    }\n  }, [cameraBlocked, openImageDialog, fileUploadModalOpen, setFileUploadModalOpen, error])\n\n  const onFileScannedResolve = (error: Error | null, successData: string | null) => {\n    if (error) {\n      console.error('QR code error', error)\n\n      if (error.name === 'NotAllowedError' || error.name === 'PermissionDismissedError') {\n        setCameraBlocked(true)\n        setFileUploadModalOpen(false)\n      } else {\n        setError('The QR could not be read')\n      }\n      return\n    }\n\n    if (successData) {\n      onScan(successData)\n    } else if (cameraBlocked) {\n      setError('The QR could not be read')\n    }\n  }\n\n  return (\n    <Modal description=\"Receive Tokens Form\" handleClose={onClose} open={isOpen} title=\"Receive Tokens\">\n      <Row align=\"center\" className={classes.heading} grow>\n        <Paragraph noMargin size=\"xl\">\n          Scan QR\n        </Paragraph>\n        <IconButton disableRipple onClick={onClose}>\n          <Close className={classes.close} />\n        </IconButton>\n      </Row>\n      <Hairline />\n      <Col className={classes.detailsContainer} layout=\"column\" middle=\"xs\">\n        {error && (\n          <Block padding=\"md\" margin=\"md\">\n            {error}\n          </Block>\n        )}\n        <QrReader\n          legacyMode={cameraBlocked}\n          onError={(err: Error) => onFileScannedResolve(err, null)}\n          onScan={(data: string) => onFileScannedResolve(null, data)}\n          ref={scannerRef}\n          style={{ width: '400px', height: '400px' }}\n          facingMode=\"user\"\n        />\n      </Col>\n      <Hairline />\n      <Row align=\"center\" className={classes.buttonRow}>\n        <Button className={classes.button} color=\"secondary\" minWidth={154} onClick={onClose}>\n          Close\n        </Button>\n        <Button\n          className={classes.button}\n          color=\"primary\"\n          minWidth={154}\n          onClick={() => {\n            setCameraBlocked(true)\n            setError(null)\n            setFileUploadModalOpen(false)\n          }}\n          variant=\"contained\"\n        >\n          Upload an image\n        </Button>\n      </Row>\n    </Modal>\n  )\n}\n","import { makeStyles } from '@material-ui/core/styles'\nimport { ReactElement, useState } from 'react'\n\nimport QRIcon from 'src/assets/icons/qrcode.svg'\nimport { ScanQRModal } from 'src/components/ScanQRModal'\nimport Img from 'src/components/layout/Img'\n\nconst useStyles = makeStyles({\n  qrCodeBtn: {\n    cursor: 'pointer',\n  },\n})\n\ntype Props = {\n  handleScan: (dataResult: string, closeQrModal: () => void) => void\n  testId?: string\n}\n\nexport const ScanQRWrapper = ({ handleScan, testId }: Props): ReactElement => {\n  const classes = useStyles()\n  const [qrModalOpen, setQrModalOpen] = useState(false)\n\n  const openQrModal = () => {\n    setQrModalOpen(true)\n  }\n\n  const closeQrModal = () => {\n    setQrModalOpen(false)\n  }\n\n  const onScanFinished = (value: string) => {\n    handleScan(value, closeQrModal)\n  }\n\n  return (\n    <>\n      <Img\n        alt=\"Scan QR\"\n        className={classes.qrCodeBtn}\n        height={20}\n        onClick={() => openQrModal()}\n        role=\"button\"\n        src={QRIcon}\n        testId={testId || 'qr-icon'}\n      />\n      {qrModalOpen && <ScanQRModal isOpen={qrModalOpen} onClose={closeQrModal} onScan={onScanFinished} />}\n    </>\n  )\n}\n","import classNames from 'classnames/bind'\nimport * as React from 'react'\n\nimport styles from './index.module.scss'\n\nimport { capitalize } from 'src/utils/css'\n\nconst cx = classNames.bind(styles)\n\nconst Heading = (props) => {\n  const { align, children, className = '', color, margin, tag, testId, truncate, ...rest } = props\n\n  const classes = cx(className, 'heading', align, tag, margin ? capitalize(margin, 'margin') : undefined, color, {\n    truncate,\n  })\n\n  return React.createElement(tag, { ...rest, className: classes, 'data-testid': testId || '' }, children)\n}\n\nexport default Heading\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"heading\":\"Heading_heading__3Wz9P\",\"h1\":\"Heading_h1__MXfCA\",\"h2\":\"Heading_h2__3X6Ts\",\"h3\":\"Heading_h3__1k2fD\",\"h4\":\"Heading_h4__1YCmR\",\"center\":\"Heading_center__28MHY\",\"right\":\"Heading_right__1fQM1\",\"truncate\":\"Heading_truncate__2Lq93\",\"marginSm\":\"Heading_marginSm__13YwX\",\"marginMd\":\"Heading_marginMd__2AnZN\",\"marginLg\":\"Heading_marginLg__2ZfEq\",\"marginXl\":\"Heading_marginXl__3RHt7\",\"soft\":\"Heading_soft__2Zu43\",\"medium\":\"Heading_medium__2X8Z-\",\"dark\":\"Heading_dark__Ds2QB\",\"fancy\":\"Heading_fancy__1Wx6l\",\"warning\":\"Heading_warning__2lrZC\",\"primary\":\"Heading_primary__2hOk2\",\"secondary\":\"Heading_secondary__37lKs\",\"disabled\":\"Heading_disabled__30DjG\",\"error\":\"Heading_error__t5ujr\",\"white\":\"Heading_white__2gkIK\"};","import { ReactElement } from 'react'\nimport styled from 'styled-components'\n\nimport { getNetworkInfo } from 'src/config'\nimport { NetworkInfo } from 'src/config/networks/network'\nimport { border, extraSmallFontSize, sm, xs, fontColor } from 'src/theme/variables'\n\ntype Props = {\n  networkInfo?: NetworkInfo\n  onClick?: () => void\n  flexGrow?: boolean\n}\n\nfunction NetworkLabel({ networkInfo, onClick, flexGrow }: Props): ReactElement {\n  const selectedNetwork = networkInfo || getNetworkInfo()\n  const backgroundColor = selectedNetwork.backgroundColor\n  const textColor = selectedNetwork.textColor\n\n  return (\n    <StyledLabel onClick={onClick} backgroundColor={backgroundColor} textColor={textColor} flexGrow={flexGrow}>\n      {selectedNetwork.label}\n    </StyledLabel>\n  )\n}\n\nexport default NetworkLabel\n\ntype StyledLabelTypes = {\n  backgroundColor: string\n  textColor: string\n  onClick?: () => void\n  flexGrow?: boolean\n}\n\nconst StyledLabel = styled.span<StyledLabelTypes>`\n  position: relative;\n  bottom: 2px;\n  line-height: normal;\n  display: inline-block;\n  min-width: 70px;\n  font-size: ${extraSmallFontSize};\n  padding: ${xs} ${sm};\n  background-color: ${({ backgroundColor }) => backgroundColor ?? border};\n  color: ${({ textColor }) => textColor ?? fontColor};\n  cursor: ${({ onClick }) => (onClick ? 'pointer' : 'inherit')};\n  text-align: center;\n  border-radius: 3px;\n  text-transform: capitalize;\n  flex-grow: ${({ flexGrow }) => (flexGrow ? 1 : 'initial')};\n`\n","import { useContext, ReactElement, useState, Children, createContext } from 'react'\nimport { history } from 'src/routes/routes'\n\nconst StepperContext = createContext({})\n\nfunction useStepper(): any {\n  const context = useContext(StepperContext)\n\n  const hasContextDefined = Object.keys(context).length > 0\n\n  if (!hasContextDefined) {\n    throw new Error('useStepper must be used within a StepperProvider!')\n  }\n\n  return context\n}\n\ntype StepperProviderTypes = {\n  onFinish?: () => void\n  store?: any\n  disableNextButton?: boolean\n  stepsComponents: ReactElement[]\n  children: ReactElement\n  testId?: string\n}\n\nfunction StepperProvider({\n  onFinish,\n  store,\n  disableNextButton,\n  stepsComponents,\n  children,\n  testId,\n}: StepperProviderTypes): ReactElement {\n  const [currentStep, setCurrentStep] = useState(0)\n\n  const steps = Children.toArray(stepsComponents)\n  const CurrentStepComponent: any = steps[currentStep]\n\n  const nextButtonType = CurrentStepComponent.props.nextButtonType\n  const nextButtonLabel = CurrentStepComponent.props.nextButtonLabel\n\n  const isSubmitButton = nextButtonType === 'submit'\n  const isFirstStep = currentStep === 0\n  const isLastStep = currentStep > steps.length - 2\n  const customNextButtonLabel = nextButtonLabel\n\n  const onClickPreviousStep = () => {\n    if (isFirstStep) {\n      history.goBack()\n    } else {\n      setCurrentStep((step) => step - 1)\n    }\n  }\n\n  const onClickNextStep = () => {\n    if (isSubmitButton) {\n      return\n    }\n\n    if (isLastStep) {\n      onFinish?.()\n      return\n    }\n\n    setCurrentStep((step) => step + 1)\n  }\n\n  const state = {\n    currentStep,\n    setCurrentStep,\n    steps,\n\n    CurrentStepComponent,\n\n    isFirstStep,\n    isLastStep,\n\n    onClickPreviousStep,\n    onClickNextStep,\n\n    disableNextButton,\n    nextButtonType,\n    customNextButtonLabel,\n\n    testId,\n\n    ...store,\n  }\n\n  return <StepperContext.Provider value={state}>{children}</StepperContext.Provider>\n}\n\nexport { useStepper, StepperProvider }\n","import { useEffect, useState } from 'react'\nimport { Field } from 'react-final-form'\nimport { OnChange } from 'react-final-form-listeners'\nimport InputAdornment from '@material-ui/core/InputAdornment'\nimport CircularProgress from '@material-ui/core/CircularProgress'\n\nimport TextField from 'src/components/forms/TextField'\nimport { Validator, composeValidators, mustBeEthereumAddress, required } from 'src/components/forms/validator'\nimport { trimSpaces } from 'src/utils/strings'\nimport { getAddressFromDomain } from 'src/logic/wallets/getWeb3'\nimport { isValidEnsName, isValidCryptoDomainName } from 'src/logic/wallets/ethAddresses'\nimport { checksumAddress } from 'src/utils/checksumAddress'\nimport { Errors, logError } from 'src/logic/exceptions/CodedException'\nimport { isValidAddress } from 'src/utils/isValidAddress'\n\n// an idea for second field was taken from here\n// https://github.com/final-form/react-final-form-listeners/blob/master/src/OnBlur.js\n\nexport interface AddressInputProps {\n  fieldMutator: (address: string) => void\n  name?: string\n  text?: string\n  placeholder?: string\n  inputAdornment?: { endAdornment: React.ReactElement } | undefined | false\n  testId: string\n  validators?: Validator[]\n  defaultValue?: string\n  disabled?: boolean\n  spellCheck?: boolean\n  className?: string\n}\n\nconst AddressInput = ({\n  className = '',\n  name = 'recipientAddress',\n  text = 'Recipient*',\n  placeholder = 'Recipient*',\n  fieldMutator,\n  testId,\n  inputAdornment,\n  validators = [],\n  defaultValue,\n  disabled,\n}: AddressInputProps): React.ReactElement => {\n  const [currentInput, setCurrentInput] = useState<string>('')\n  const [resolutions, setResolutions] = useState<Record<string, string | undefined>>({})\n  const resolvedAddress = resolutions[currentInput]\n  const isResolving = resolvedAddress === ''\n\n  useEffect(() => {\n    if (resolvedAddress) {\n      fieldMutator(resolvedAddress)\n    }\n  }, [resolvedAddress, fieldMutator])\n\n  const adornment = isResolving\n    ? {\n        endAdornment: (\n          <InputAdornment position=\"end\">\n            <CircularProgress size=\"16px\" />\n          </InputAdornment>\n        ),\n      }\n    : inputAdornment\n\n  return (\n    <>\n      <Field\n        className={className}\n        component={TextField as any}\n        defaultValue={defaultValue}\n        disabled={disabled}\n        inputAdornment={adornment}\n        name={name}\n        placeholder={placeholder}\n        testId={testId}\n        text={text}\n        type=\"text\"\n        spellCheck={false}\n        validate={composeValidators(required, mustBeEthereumAddress, ...validators)}\n      />\n      <OnChange name={name}>\n        {async (value: string) => {\n          const address = trimSpaces(value)\n          setCurrentInput(address)\n\n          // A crypto domain name\n          if (isValidEnsName(address) || isValidCryptoDomainName(address)) {\n            setResolutions((prev) => ({ ...prev, [address]: '' }))\n            try {\n              const resolverAddr = await getAddressFromDomain(address)\n              const formattedAddress = checksumAddress(resolverAddr)\n              setResolutions((prev) => ({ ...prev, [address]: formattedAddress }))\n            } catch (err) {\n              setResolutions((prev) => ({ ...prev, [address]: undefined }))\n              logError(Errors._101, err.message)\n            }\n          } else {\n            // A regular address hash\n            let checkedAddress = address\n            // Automatically checksum valid (either already checksummed, or lowercase addresses)\n            if (isValidAddress(address)) {\n              try {\n                checkedAddress = checksumAddress(address)\n              } catch (err) {\n                // ignore\n              }\n            }\n            fieldMutator(checkedAddress)\n          }\n        }}\n      </OnChange>\n    </>\n  )\n}\n\nexport default AddressInput\n","import classNames from 'classnames/bind'\n\nimport styles from './index.module.scss'\n\nconst cx = classNames.bind(styles)\n\nconst Page = ({ align, children, overflow }: any) => (\n  <main className={cx(styles.page, align, { overflow })}>{children}</main>\n)\n\nexport default Page\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"page\":\"Page_page__G6hb0\",\"center\":\"Page_center__1dwJ9\",\"overflow\":\"Page_overflow__30EmX\"};","import { ReactElement } from 'react'\nimport StepperMUI from '@material-ui/core/Stepper'\nimport StepMUI from '@material-ui/core/Step'\nimport StepContent from '@material-ui/core/StepContent'\nimport StepLabel from '@material-ui/core/StepLabel'\nimport Paper from '@material-ui/core/Paper'\nimport { makeStyles } from '@material-ui/core/'\n\nimport Hairline from 'src/components/layout/Hairline'\nimport Button from 'src/components/layout/Button'\nimport Col from 'src/components/layout/Col'\nimport Row from 'src/components/layout/Row'\nimport { boldFont, lg, sm } from 'src/theme/variables'\nimport { StepperProvider, useStepper } from './stepperContext'\n\ntype StepperProps = {\n  children: ReactElement[]\n  onFinish?: () => void\n  disableNextButton?: boolean\n  nextButtonType?: string\n  testId?: string\n}\n\nfunction StepperComponent(): ReactElement {\n  const {\n    currentStep,\n    setCurrentStep,\n    steps,\n\n    onClickPreviousStep,\n    onClickNextStep,\n\n    disableNextButton,\n    nextButtonType,\n\n    testId,\n  } = useStepper()\n\n  return (\n    <StepperMUI data-testid={testId} activeStep={currentStep} orientation=\"vertical\">\n      {steps.map(function Step(step, index) {\n        const isFirstStep = index === 0\n        const isStepLabelClickable = currentStep > index\n        const classes = useStyles({ isStepLabelClickable })\n\n        function onClickLabel() {\n          if (isStepLabelClickable) {\n            setCurrentStep(index)\n          }\n        }\n\n        const currentComponent = steps[index]\n\n        const backButtonLabel = isFirstStep ? 'Cancel' : 'Back'\n        const customNextButtonLabel = currentComponent.props.nextButtonLabel\n\n        const nextButtonLabel = customNextButtonLabel || 'Next'\n\n        return (\n          <StepMUI key={step.props.label}>\n            <StepLabel onClick={onClickLabel} className={classes.stepLabel}>\n              {step.props.label}\n            </StepLabel>\n            <StepContent>\n              <Paper className={classes.root} elevation={1}>\n                {currentComponent}\n                <Hairline />\n                <Row align=\"center\" grow className={classes.controlStyle}>\n                  <Col center=\"xs\" xs={12}>\n                    <Button onClick={onClickPreviousStep} size=\"small\" className={classes.backButton} type=\"button\">\n                      {backButtonLabel}\n                    </Button>\n                    <Button\n                      onClick={onClickNextStep}\n                      color=\"primary\"\n                      type={nextButtonType || 'button'}\n                      disabled={disableNextButton || step.props.disableNextButton}\n                      size=\"small\"\n                      className={classes.nextButton}\n                      variant=\"contained\"\n                    >\n                      {nextButtonLabel}\n                    </Button>\n                  </Col>\n                </Row>\n              </Paper>\n            </StepContent>\n          </StepMUI>\n        )\n      })}\n    </StepperMUI>\n  )\n}\n\nexport default function Stepper(props: StepperProps): ReactElement {\n  return (\n    <StepperProvider stepsComponents={props.children} {...props}>\n      <StepperComponent />\n    </StepperProvider>\n  )\n}\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    margin: '10px 0 10px 10px',\n    maxWidth: '770px',\n    boxShadow: '0 0 10px 0 rgba(33,48,77,0.10)',\n  },\n  controlStyle: {\n    backgroundColor: 'white',\n    padding: lg,\n    borderRadius: sm,\n  },\n  backButton: {\n    marginRight: sm,\n    fontWeight: boldFont,\n    color: theme.palette.secondary.main,\n  },\n  nextButton: {\n    fontWeight: boldFont,\n  },\n  stepLabel: {\n    cursor: ({ isStepLabelClickable }: any) => (isStepLabelClickable ? 'pointer' : 'inherit'),\n  },\n}))\n\nexport type StepElementProps = {\n  label: string\n  children: JSX.Element\n  nextButtonLabel?: string\n  nextButtonType?: string\n  disableNextButton?: boolean\n}\n\nexport type StepElementType = (props: StepElementProps) => ReactElement\n\nexport function StepElement({ children }: StepElementProps): ReactElement {\n  return children\n}\n","import React, { JSXElementConstructor, ReactElement, useMemo, useState } from 'react'\nimport { useEffect } from 'react'\nimport { Form } from 'react-final-form'\nimport { Validator } from '../forms/validator'\nimport Stepper, { StepElement, StepElementType } from '../Stepper/Stepper'\nimport { useStepper } from '../Stepper/stepperContext'\n\ntype StepperFormProps = {\n  testId: string\n  onSubmit: (values) => void\n  initialValues?: any\n  children: (JSX.Element | false | null)[]\n}\n\nfunction StepperForm({ children, onSubmit, testId, initialValues }: StepperFormProps): ReactElement {\n  const [validate, setValidate] = useState<(values) => Validator>()\n  const [onSubmitForm, setOnSubmitForm] = useState<(values) => void>()\n  const steps = useMemo(\n    () =>\n      React.Children.toArray(children)\n        .filter(Boolean)\n        .map((step: ReactElement, index, list) => {\n          function ComponentStep() {\n            const { setCurrentStep } = useStepper()\n            useEffect(() => {\n              const isLastStep = index === list.length - 1\n              setValidate(() => step.props.validate)\n              if (isLastStep) {\n                setOnSubmitForm(() => (values) => onSubmit(values))\n              } else {\n                setOnSubmitForm(() => () => {\n                  setCurrentStep((step) => step + 1)\n                })\n              }\n            }, [setCurrentStep])\n            return step.props.children\n          }\n\n          return (\n            <StepElement key={step.props.label} nextButtonType={'submit'} {...step.props}>\n              <ComponentStep />\n            </StepElement>\n          )\n        }),\n    [children, onSubmit],\n  )\n  return (\n    <Form\n      onSubmit={(values) => onSubmitForm?.(values)}\n      initialValues={initialValues}\n      validate={(values) => validate?.(values)}\n    >\n      {({ handleSubmit, submitting }) => (\n        <form data-testid={testId} onSubmit={handleSubmit}>\n          <Stepper disableNextButton={submitting} nextButtonType={'submit'}>\n            {steps}\n          </Stepper>\n        </form>\n      )}\n    </Form>\n  )\n}\n\nexport default StepperForm\n\nexport type StepFormElementProps = {\n  label: string\n  validate?: (values) => Record<string, unknown> | Promise<Record<string, string>>\n  nextButtonLabel?: string\n  children: ReactElement<any, string | JSXElementConstructor<any>>\n  disableNextButton?: boolean\n}\nexport type StepFormElementType = (props: StepFormElementProps) => StepElementType[]\n\nexport function StepFormElement({ children }: StepFormElementProps): ReactElement {\n  return children\n}\n","import { useEffect, useState } from 'react'\nimport { getNetworkLabel } from 'src/config'\nimport { animalsDict, adjectivesDict } from './useMnemonicName.dict'\n\nconst animals: string[] = animalsDict.trim().split(/\\s+/)\nconst adjectives: string[] = adjectivesDict.trim().split(/\\s+/)\n\nconst getRandomItem = <T>(arr: T[]): T => {\n  return arr[Math.floor(arr.length * Math.random())]\n}\n\nexport const getRandomName = (noun = getRandomItem<string>(animals)): string => {\n  const adj = getRandomItem<string>(adjectives)\n  return `${adj}-${noun}`\n}\n\nexport const useMnemonicName = (noun?: string): string => {\n  const [name, setName] = useState<string>('')\n\n  useEffect(() => {\n    setName(getRandomName(noun))\n  }, [noun])\n\n  return name\n}\n\nexport const useMnemonicSafeName = (): string => {\n  const networkName = getNetworkLabel().toLowerCase()\n  return useMnemonicName(`${networkName}-safe`)\n}\n","/**\n * The word lists are from https://github.com/mmkal/ts/tree/main/packages/memorable-moniker/src/dict\n */\nexport const animalsDict = `\naardvark\nalbatross\nalligator\nalpaca\nant\nanteater\nantelope\nape\narmadillo\nbaboon\nbadger\nbarracuda\nbat\nbear\nbeaver\nbee\nbinturong\nbird\nbison\nbluebird\nboar\nbobcat\nbuffalo\nbutterfly\ncamel\ncapybara\ncaracal\ncaribou\ncassowary\ncat\ncaterpillar\ncattle\nchameleon\nchamois\ncheetah\nchicken\nchimpanzee\nchinchilla\nchough\ncoati\ncobra\ncockroach\ncod\ncormorant\ncougar\ncoyote\ncrab\ncrane\ncricket\ncrocodile\ncrow\ncuckoo\ncurlew\ndeer\ndegu\ndhole\ndingo\ndinosaur\ndog\ndogfish\ndolphin\ndonkey\ndotterel\ndove\ndragonfly\nduck\ndugong\ndunlin\neagle\nechidna\neel\neland\nelephant\nelk\nemu\nfalcon\nferret\nfinch\nfish\nflamingo\nfly\nfox\nfrog\ngaur\ngazelle\ngecko\ngerbil\ngiraffe\ngnat\ngnu\ngoat\ngoldfinch\ngoosander\ngoose\ngorilla\ngoshawk\ngrasshopper\ngrouse\nguanaco\nguinea-pig\ngull\nhamster\nhare\nhawk\nhedgehog\nheron\nherring\nhippopotamus\nhoatzin\nhoopoe\nhornet\nhorse\nhuman\nhummingbird\nhyena\nibex\nibis\niguana\nimpala\njackal\njaguar\njay\njellyfish\njerboa\nkangaroo\nkingfisher\nkinkajou\nkoala\nkomodo-dragon\nkookaburra\nkouprey\nkudu\nlapwing\nlark\nlemur\nleopard\nlion\nlizard\nllama\nlobster\nlocust\nloris\nlouse\nlynx\nlyrebird\nmacaque\nmacaw\nmagpie\nmallard\nmammoth\nmanatee\nmandrill\nmarmoset\nmarmot\nmeerkat\nmink\nmole\nmongoose\nmonkey\nmoose\nmosquito\nmouse\nmyna\nnarwhal\nnewt\nnightingale\noctopus\nokapi\nopossum\norangutan\noryx\nostrich\notter\nowl\noyster\npanther\nparrot\npanda\npartridge\npeafowl\npelican\npenguin\npheasant\npig\npigeon\npika\npolar-bear\npony\nporcupine\nporpoise\npug\nquail\nquelea\nquetzal\nrabbit\nraccoon\nram\nrat\nraven\nred-deer\nred-panda\nreindeer\nrhea\nrhinoceros\nrook\nsalamander\nsalmon\nsand-dollar\nsandpiper\nsardine\nsea-lion\nseahorse\nseal\nshark\nsheep\nshrew\nsiamang\nskunk\nsloth\nsnail\nsnake\nspider\nsquid\nsquirrel\nstarling\nstegosaurus\nswan\ntamarin\ntapir\ntarsier\ntermite\ntiger\ntoad\ntoucan\nturaco\nturkey\nturtle\numbrellabird\nvinegaroon\nviper\nvulture\nwallaby\nwalrus\nwasp\nwaxwing\nweasel\nwhale\nwobbegong\nwolf\nwolverine\nwombat\nwoodpecker\nworm\nwren\nyak\nzebra\n`\n\nexport const adjectivesDict = `\nadmirable\nenergetic\nlucky\naffable\nenjoyable\nmagnificent\naffectionate\nenthusiastic\nmarvelous\nagreeable\neuphoric\nmeritorious\namazing\nexcellent\nmerry\namiable\nexceptional\nmild-mannered\namused\nexcited\nnice\namusing\nextraordinary\nnoble\nanimated\nexultant\noutstanding\nappreciative\nfabulous\noverjoyed\nastonishing\nfaithful\npassionate\nauthentic\nfantastic\npeaceful\nbelievable\nfervent\nplacid\nbenevolent\nfortunate\npleasant\nblissful\nfriendly\npleasing\nbouncy\nfun\npleasurable\nbrilliant\ngenuine\npositive\nbubbly\nglad\npraiseworthy\nbuoyant\nglorious\nprominent\ncalm\ngood\nproud\ncharming\ngood-humored\nrelaxed\ncheerful\ngood-natured\nreliable\ncheery\ngracious\nrespectable\nclever\ngrateful\nsharp\ncomfortable\ngreat\nsincere\ncomical\nhappy\nspirited\ncommendable\nheartfelt\nsplendid\nconfident\nhonest\nsuperb\ncongenial\nhonorable\nsuperior\ncontent\nhopeful\nterrific\ncordial\nhumorous\nthankful\ncourteous\nincredible\ntremendous\ndedicated\ninspirational\ntriumphant\ndelighted\njolly\ntrustworthy\ndelightful\njovial\ntrusty\ndependable\njoyful\ntruthful\ndevoted\njoyous\nuplifting\ndocile\njubilant\nvictorious\ndynamic\nkeen\nvigorous\neager\nkind\nvirtuous\nearnest\nlaudable\nvivacious\neasygoing\nlaughing\nwhimsical\nebullient\nlikable\nwitty\necstatic\nlively\nwonderful\nelated\nlovely\nworthy\nemphatic\nloving\nzealous\nenchanting\nloyal\nzestful\n`\n","import { ReactElement, useState } from 'react'\nimport { ButtonLink } from '@gnosis.pm/safe-react-components'\nimport styled from 'styled-components'\nimport Dialog from '@material-ui/core/Dialog'\nimport DialogTitle from '@material-ui/core/DialogTitle'\nimport IconButton from '@material-ui/core/IconButton'\nimport CloseIcon from '@material-ui/icons/Close'\nimport DialogContent from '@material-ui/core/DialogContent'\nimport List from '@material-ui/core/List'\nimport Typography from '@material-ui/core/Typography'\n\nimport Block from 'src/components/layout/Block'\nimport { getNetworks } from 'src/config'\nimport { ETHEREUM_NETWORK } from 'src/config/networks/network'\nimport { lg } from 'src/theme/variables'\nimport Paragraph from 'src/components/layout/Paragraph'\nimport NetworkLabel from 'src/components/NetworkLabel/NetworkLabel'\nimport { setNetwork } from 'src/logic/config/utils'\n\nexport const selectNetworkStepLabel = 'Select network'\n\nfunction SelectNetworkStep(): ReactElement {\n  const [isNetworkSelectorPopupOpen, setIsNetworkSelectorPopupOpen] = useState(false)\n\n  function openNetworkSelectorPopup() {\n    setIsNetworkSelectorPopupOpen(true)\n  }\n\n  const networks = getNetworks()\n\n  const onNetworkSwitch = (networkId: ETHEREUM_NETWORK) => {\n    setNetwork(networkId)\n    setIsNetworkSelectorPopupOpen(false)\n  }\n\n  return (\n    <Container data-testid={'select-network-step'}>\n      <Paragraph color=\"primary\" noMargin size=\"lg\">\n        Select network on which the Safe was created: <NetworkLabel onClick={openNetworkSelectorPopup} />\n      </Paragraph>\n      <SwitchNetworkContainer>\n        <ButtonLink type=\"button\" onClick={openNetworkSelectorPopup} color=\"primary\">\n          Switch Network\n        </ButtonLink>\n      </SwitchNetworkContainer>\n      <Dialog\n        onClose={() => setIsNetworkSelectorPopupOpen(false)}\n        aria-labelledby=\"select-network\"\n        data-testid={'select-network-popup'}\n        open={isNetworkSelectorPopupOpen}\n      >\n        <StyledDialogTitle disableTypography>\n          <Typography variant={'h5'}>Select Network</Typography>\n          <IconButton aria-label=\"close\" onClick={() => setIsNetworkSelectorPopupOpen(false)}>\n            <CloseIcon />\n          </IconButton>\n        </StyledDialogTitle>\n        <StyledDialogContent dividers>\n          <List component=\"div\">\n            {networks.map((network) => (\n              <NetworkLabelItem key={network.id} role=\"button\" onClick={() => onNetworkSwitch(network.id)}>\n                <NetworkLabel networkInfo={network} flexGrow />\n              </NetworkLabelItem>\n            ))}\n          </List>\n        </StyledDialogContent>\n      </Dialog>\n    </Container>\n  )\n}\n\nexport default SelectNetworkStep\n\nconst Container = styled(Block)`\n  padding: ${lg};\n`\n\nconst StyledDialogContent = styled(DialogContent)`\n  min-width: 500px;\n`\n\nconst StyledDialogTitle = styled(DialogTitle)`\n  display: flex;\n  justify-content: space-between;\n  padding: 16px 24px;\n`\nconst SwitchNetworkContainer = styled.div`\n  margin: ${lg};\n  display: flex;\n  justify-content: center;\n`\nconst NetworkLabelItem = styled.div`\n  display: flex;\n  margin: ${lg} auto;\n  cursor: pointer;\n  max-width: 50%;\n\n  & > span {\n    font-size: 13px;\n  }\n`\n","export const FIELD_LOAD_CUSTOM_SAFE_NAME = 'customSafeName'\nexport const FIELD_LOAD_SUGGESTED_SAFE_NAME = 'suggestedSafeName'\nexport const FIELD_LOAD_SAFE_ADDRESS = 'safeAddress'\nexport const FIELD_LOAD_IS_LOADING_SAFE_ADDRESS = 'isLoadingSafeAddress'\nexport const FIELD_SAFE_OWNER_LIST = 'safeOwnerList'\nexport const FIELD_SAFE_THRESHOLD = 'safeThreshold'\n\nexport type OwnerFieldListItem = {\n  address: string\n  name: string\n}\n\nexport type LoadSafeFormValues = {\n  [FIELD_LOAD_CUSTOM_SAFE_NAME]?: string\n  [FIELD_LOAD_SUGGESTED_SAFE_NAME]: string\n  [FIELD_LOAD_SAFE_ADDRESS]?: string\n  [FIELD_LOAD_IS_LOADING_SAFE_ADDRESS]: boolean\n  [FIELD_SAFE_OWNER_LIST]: Array<OwnerFieldListItem>\n  [FIELD_SAFE_THRESHOLD]?: number\n}\n","import { AddressBookMap } from 'src/logic/addressBook/store/selectors'\nimport { checksumAddress } from 'src/utils/checksumAddress'\nimport {\n  FIELD_LOAD_CUSTOM_SAFE_NAME,\n  FIELD_LOAD_SAFE_ADDRESS,\n  FIELD_LOAD_SUGGESTED_SAFE_NAME,\n  LoadSafeFormValues,\n} from './loadFields'\n\nexport function getLoadSafeName(formValues: LoadSafeFormValues, addressBook: AddressBookMap): string {\n  let safeAddress = formValues[FIELD_LOAD_SAFE_ADDRESS]\n  safeAddress = safeAddress ? checksumAddress(safeAddress) : ''\n\n  return (\n    formValues[FIELD_LOAD_CUSTOM_SAFE_NAME] ||\n    (safeAddress ? addressBook[safeAddress]?.name : '') ||\n    formValues[FIELD_LOAD_SUGGESTED_SAFE_NAME]\n  )\n}\n","import { ReactElement, useState, useEffect } from 'react'\nimport { useSelector } from 'react-redux'\nimport { useField, useForm } from 'react-final-form'\nimport styled from 'styled-components'\nimport CheckCircle from '@material-ui/icons/CheckCircle'\nimport InputAdornment from '@material-ui/core/InputAdornment'\n\nimport Block from 'src/components/layout/Block'\nimport Col from 'src/components/layout/Col'\nimport Paragraph from 'src/components/layout/Paragraph'\nimport Field from 'src/components/forms/Field'\nimport TextField from 'src/components/forms/TextField'\nimport AddressInput from 'src/components/forms/AddressInput'\nimport { ScanQRWrapper } from 'src/components/ScanQRModal/ScanQRWrapper'\nimport { isValidAddress } from 'src/utils/isValidAddress'\nimport { isChecksumAddress } from 'src/utils/checksumAddress'\nimport { getSafeInfo } from 'src/logic/safe/utils/safeInformation'\nimport { lg, secondary } from 'src/theme/variables'\nimport { AddressBookEntry, makeAddressBookEntry } from 'src/logic/addressBook/model/addressBook'\nimport { currentNetworkAddressBookAsMap } from 'src/logic/addressBook/store/selectors'\nimport {\n  FIELD_LOAD_CUSTOM_SAFE_NAME,\n  FIELD_LOAD_IS_LOADING_SAFE_ADDRESS,\n  FIELD_LOAD_SAFE_ADDRESS,\n  FIELD_SAFE_OWNER_LIST,\n  FIELD_SAFE_THRESHOLD,\n  LoadSafeFormValues,\n} from '../fields/loadFields'\nimport NetworkLabel from 'src/components/NetworkLabel/NetworkLabel'\nimport { getLoadSafeName } from '../fields/utils'\n\nexport const loadSafeAddressStepLabel = 'Name and address'\n\nfunction LoadSafeAddressStep(): ReactElement {\n  const [ownersWithName, setOwnersWithName] = useState<AddressBookEntry[]>([])\n  const [threshold, setThreshold] = useState<number>()\n  const [isValidSafeAddress, setIsValidSafeAddress] = useState<boolean>(false)\n  const [isSafeInfoLoading, setIsSafeInfoLoading] = useState<boolean>(false)\n\n  const loadSafeForm = useForm()\n  const addressBook = useSelector(currentNetworkAddressBookAsMap)\n\n  const {\n    input: { value: safeAddress },\n    meta: { error: safeAddressError },\n  } = useField(FIELD_LOAD_SAFE_ADDRESS)\n\n  useEffect(() => {\n    setOwnersWithName([])\n    setThreshold(undefined)\n    setIsValidSafeAddress(false)\n  }, [safeAddress])\n\n  useEffect(() => {\n    const checkSafeAddress = async () => {\n      const isValidSafeAddress = isValidAddress(safeAddress) && isChecksumAddress(safeAddress)\n      if (!isValidSafeAddress) {\n        return\n      }\n\n      setIsSafeInfoLoading(true)\n      try {\n        const { owners, threshold } = await getSafeInfo(safeAddress)\n        setIsSafeInfoLoading(false)\n        const ownersWithName = owners.map(({ value: address }) =>\n          makeAddressBookEntry(addressBook[address] || { address, name: '' }),\n        )\n        setOwnersWithName(ownersWithName)\n        setThreshold(threshold)\n        setIsValidSafeAddress(true)\n      } catch (error) {\n        setOwnersWithName([])\n        setThreshold(undefined)\n        setIsValidSafeAddress(false)\n      }\n      setIsSafeInfoLoading(false)\n    }\n\n    checkSafeAddress()\n  }, [safeAddress, addressBook])\n\n  useEffect(() => {\n    if (threshold) {\n      loadSafeForm.change(FIELD_SAFE_THRESHOLD, threshold)\n    }\n  }, [threshold, loadSafeForm])\n\n  useEffect(() => {\n    loadSafeForm.change(FIELD_LOAD_IS_LOADING_SAFE_ADDRESS, isSafeInfoLoading)\n  }, [isSafeInfoLoading, loadSafeForm])\n\n  useEffect(() => {\n    if (ownersWithName) {\n      loadSafeForm.change(FIELD_SAFE_OWNER_LIST, ownersWithName)\n    }\n  }, [ownersWithName, loadSafeForm])\n\n  const handleScan = (value: string, closeQrModal: () => void): void => {\n    loadSafeForm.change(FIELD_LOAD_SAFE_ADDRESS, value)\n    closeQrModal()\n  }\n\n  const formValues = loadSafeForm.getState().values as LoadSafeFormValues\n  const safeName = getLoadSafeName(formValues, addressBook)\n\n  return (\n    <Container data-testid={'load-safe-address-step'}>\n      <Block margin=\"md\">\n        <Paragraph color=\"primary\" noMargin size=\"lg\">\n          You are about to add an existing Gnosis Safe on <NetworkLabel />. First, choose a name and enter the Safe\n          address. The name is only stored locally and will never be shared with Gnosis or any third parties.\n        </Paragraph>\n        <Paragraph color=\"primary\" size=\"lg\">\n          Your connected wallet does not have to be the owner of this Safe. In this case, the interface will provide you\n          a read-only view.\n        </Paragraph>\n\n        <Paragraph color=\"primary\" size=\"lg\">\n          Don&apos;t have the address of the Safe you created?{' '}\n          <StyledLink\n            href=\"https://help.gnosis-safe.io/en/articles/4971293-i-don-t-remember-my-safe-address-where-can-i-find-it\"\n            rel=\"noopener noreferrer\"\n            target=\"_blank\"\n          >\n            This article explains how to find it.\n          </StyledLink>\n        </Paragraph>\n      </Block>\n      <FieldContainer>\n        <Col xs={11}>\n          <Field\n            component={TextField}\n            name={FIELD_LOAD_CUSTOM_SAFE_NAME}\n            placeholder={safeName}\n            text=\"Safe name\"\n            type=\"text\"\n            testId=\"load-safe-name-field\"\n          />\n        </Col>\n      </FieldContainer>\n      <FieldContainer margin=\"lg\">\n        <Col xs={11}>\n          <AddressInput\n            fieldMutator={(val) => {\n              loadSafeForm.change(FIELD_LOAD_SAFE_ADDRESS, val)\n            }}\n            inputAdornment={\n              isValidSafeAddress &&\n              !safeAddressError && {\n                endAdornment: (\n                  <InputAdornment position=\"end\">\n                    <CheckIconAddressAdornment data-testid={`${FIELD_LOAD_SAFE_ADDRESS}-valid-address-adornment`} />\n                  </InputAdornment>\n                ),\n              }\n            }\n            name={FIELD_LOAD_SAFE_ADDRESS}\n            placeholder=\"Safe Address*\"\n            text=\"Safe Address\"\n            testId=\"load-safe-address-field\"\n          />\n        </Col>\n        <Col center=\"xs\" middle=\"xs\" xs={1}>\n          <ScanQRWrapper handleScan={handleScan} />\n        </Col>\n      </FieldContainer>\n      <Block margin=\"sm\">\n        <Paragraph color=\"primary\" noMargin size=\"lg\">\n          By continuing you consent to the{' '}\n          <StyledLink href=\"https://gnosis-safe.io/terms\" rel=\"noopener noreferrer\" target=\"_blank\">\n            terms of use\n          </StyledLink>\n          {' and '}\n          <StyledLink href=\"https://gnosis-safe.io/privacy\" rel=\"noopener noreferrer\" target=\"_blank\">\n            privacy policy\n          </StyledLink>\n          . Most importantly, you confirm that your funds are held securely in the Gnosis Safe, a smart contract on the\n          Ethereum blockchain. These funds cannot be accessed by Gnosis at any point.\n        </Paragraph>\n      </Block>\n    </Container>\n  )\n}\n\nexport default LoadSafeAddressStep\n\nexport const loadSafeAddressStepValidations = (values: {\n  [FIELD_LOAD_SAFE_ADDRESS]: string\n  [FIELD_SAFE_OWNER_LIST]: string\n}): Record<string, string> => {\n  let errors = {}\n\n  const safeAddress = values[FIELD_LOAD_SAFE_ADDRESS]\n\n  if (!safeAddress) {\n    errors = {\n      ...errors,\n      [FIELD_LOAD_SAFE_ADDRESS]: 'Required',\n    }\n    return errors\n  }\n\n  // this is to prevent show and error in the safe address field while is loading...\n  const isLoadingSafeAddress = values[FIELD_LOAD_IS_LOADING_SAFE_ADDRESS]\n  if (isLoadingSafeAddress) {\n    return {\n      ...errors,\n      [FIELD_LOAD_IS_LOADING_SAFE_ADDRESS]: 'loading...',\n    }\n  }\n\n  // check that the address is actually a Safe (must have owners)\n  const ownerList = values[FIELD_SAFE_OWNER_LIST]\n  const isValidSafeAddress = ownerList.length > 0 && isValidAddress(safeAddress)\n  if (!isValidSafeAddress) {\n    errors = {\n      ...errors,\n      [FIELD_LOAD_SAFE_ADDRESS]: 'Address given is not a valid Safe address',\n    }\n  }\n\n  return errors\n}\n\nconst Container = styled(Block)`\n  padding: ${lg};\n`\n\nconst FieldContainer = styled(Block)`\n  display: flex;\n  max-width: 460px;\n  margin-top: 12px;\n`\n\nconst CheckIconAddressAdornment = styled(CheckCircle)`\n  color: #03ae60;\n  height: 20px;\n`\n\nconst StyledLink = styled.a`\n  color: ${secondary};\n`\n","import { ReactElement } from 'react'\nimport { useForm } from 'react-final-form'\nimport styled from 'styled-components'\nimport TableContainer from '@material-ui/core/TableContainer'\nimport { EthHashInfo } from '@gnosis.pm/safe-react-components'\n\nimport Block from 'src/components/layout/Block'\nimport Col from 'src/components/layout/Col'\nimport Hairline from 'src/components/layout/Hairline'\nimport Paragraph from 'src/components/layout/Paragraph'\nimport Row from 'src/components/layout/Row'\nimport Field from 'src/components/forms/Field'\nimport TextField from 'src/components/forms/TextField'\nimport { disabled, extraSmallFontSize, lg, md, sm } from 'src/theme/variables'\nimport { minMaxLength } from 'src/components/forms/validator'\nimport { getExplorerInfo } from 'src/config'\nimport { FIELD_SAFE_OWNER_LIST } from '../fields/loadFields'\nimport NetworkLabel from 'src/components/NetworkLabel/NetworkLabel'\n\nexport const loadSafeOwnersStepLabel = 'Owners'\n\nfunction LoadSafeOwnersStep(): ReactElement {\n  const loadSafeForm = useForm()\n  const ownersWithName = loadSafeForm.getState().values[FIELD_SAFE_OWNER_LIST]\n\n  return (\n    <>\n      <TitleContainer>\n        <Paragraph color=\"primary\" noMargin size=\"lg\" data-testid=\"load-safe-owners-step\">\n          This Safe on <NetworkLabel /> has {ownersWithName.length} owners. Optional: Provide a name for each owner.\n        </Paragraph>\n      </TitleContainer>\n      <Hairline />\n      <TableContainer>\n        <HeaderContainer>\n          <Col xs={4}>NAME</Col>\n          <Col xs={8}>ADDRESS</Col>\n        </HeaderContainer>\n        <Hairline />\n        <Block margin=\"md\" padding=\"md\">\n          {ownersWithName.map(({ address, name }, index) => {\n            const ownerFieldName = `owner-address-${address}`\n            return (\n              <OwnerContainer key={address} data-testid=\"owner-row\">\n                <Col xs={4}>\n                  <FieldContainer\n                    component={TextField}\n                    initialValue={name}\n                    name={ownerFieldName}\n                    placeholder=\"Owner Name\"\n                    text=\"Owner Name\"\n                    type=\"text\"\n                    validate={minMaxLength(0, 50)}\n                    testId={`load-safe-owner-name-${index}`}\n                  />\n                </Col>\n                <Col xs={8}>\n                  <OwnerAddressContainer>\n                    <EthHashInfo hash={address} showAvatar showCopyBtn explorerUrl={getExplorerInfo(address)} />\n                  </OwnerAddressContainer>\n                </Col>\n              </OwnerContainer>\n            )\n          })}\n        </Block>\n      </TableContainer>\n    </>\n  )\n}\n\nexport default LoadSafeOwnersStep\n\nconst TitleContainer = styled(Block)`\n  padding: ${md} ${lg};\n`\n\nconst HeaderContainer = styled(Row)`\n  padding: ${sm} ${lg};\n  color: ${disabled};\n  font-size: ${extraSmallFontSize};\n`\n\nconst OwnerContainer = styled(Row)`\n  padding: 0 ${lg};\n  margin-bottom: 12px;\n`\n\nconst OwnerAddressContainer = styled(Row)`\n  align-items: center;\n  margin-left: ${sm};\n`\n\nconst FieldContainer = styled(Field)`\n  margin-right: ${sm};\n`\n","import { Fragment, ReactElement } from 'react'\nimport { useSelector } from 'react-redux'\nimport { useForm } from 'react-final-form'\nimport TableContainer from '@material-ui/core/TableContainer'\nimport { EthHashInfo } from '@gnosis.pm/safe-react-components'\nimport styled from 'styled-components'\n\nimport Block from 'src/components/layout/Block'\nimport { border, lg, sm, xs } from 'src/theme/variables'\nimport Row from 'src/components/layout/Row'\nimport Col from 'src/components/layout/Col'\nimport Paragraph from 'src/components/layout/Paragraph'\nimport { getExplorerInfo } from 'src/config'\nimport { userAccountSelector } from 'src/logic/wallets/store/selectors'\nimport Hairline from 'src/components/layout/Hairline'\nimport {\n  FIELD_LOAD_SAFE_ADDRESS,\n  FIELD_SAFE_OWNER_LIST,\n  FIELD_SAFE_THRESHOLD,\n  LoadSafeFormValues,\n} from '../fields/loadFields'\nimport { getLoadSafeName } from '../fields/utils'\nimport NetworkLabel from 'src/components/NetworkLabel/NetworkLabel'\nimport { currentNetworkAddressBookAsMap } from 'src/logic/addressBook/store/selectors'\n\nexport const reviewLoadStepLabel = 'Review'\n\nfunction ReviewLoadStep(): ReactElement {\n  const loadSafeForm = useForm()\n  const userAddress = useSelector(userAccountSelector)\n  const addressBook = useSelector(currentNetworkAddressBookAsMap)\n\n  const formValues = loadSafeForm.getState().values as LoadSafeFormValues\n  const safeName = getLoadSafeName(formValues, addressBook)\n  const safeAddress = formValues[FIELD_LOAD_SAFE_ADDRESS] || ''\n  const threshold = formValues[FIELD_SAFE_THRESHOLD]\n  const ownerList = formValues[FIELD_SAFE_OWNER_LIST]\n\n  const ownerListWithNames = ownerList.map((owner) => {\n    const ownerFieldName = `owner-address-${owner.address}`\n    const ownerNameValue = formValues[ownerFieldName]\n    return {\n      ...owner,\n      name: ownerNameValue,\n    }\n  })\n\n  const isUserConnectedWalletASAfeOwner = checkIfUserAddressIsAnOwner(ownerList, userAddress)\n\n  return (\n    <Row data-testid={'load-safe-review-step'}>\n      <Col layout=\"column\" xs={4}>\n        <DetailsContainer>\n          <Block margin=\"lg\">\n            <Paragraph color=\"primary\" noMargin size=\"lg\" data-testid=\"load-safe-step-three\">\n              Review details\n            </Paragraph>\n          </Block>\n          <Block margin=\"lg\">\n            <Paragraph color=\"disabled\" noMargin size=\"sm\">\n              Network\n            </Paragraph>\n            <StyledParagraph color=\"disabled\" noMargin size=\"sm\" data-testid=\"load-form-review-safe-network\">\n              <NetworkLabel />\n            </StyledParagraph>\n          </Block>\n          <Block margin=\"lg\">\n            <Paragraph color=\"disabled\" noMargin size=\"sm\">\n              Name of the Safe\n            </Paragraph>\n            <Paragraph color=\"primary\" noMargin size=\"lg\" weight=\"bolder\" data-testid=\"load-form-review-safe-name\">\n              {safeName}\n            </Paragraph>\n          </Block>\n          <Block margin=\"lg\">\n            <Paragraph color=\"disabled\" noMargin size=\"sm\">\n              Safe address\n            </Paragraph>\n            <SafeAddressContainer>\n              <EthHashInfo\n                hash={safeAddress}\n                shortenHash={4}\n                showAvatar\n                showCopyBtn\n                explorerUrl={getExplorerInfo(safeAddress)}\n              />\n            </SafeAddressContainer>\n          </Block>\n          <Block margin=\"lg\">\n            <Paragraph color=\"disabled\" noMargin size=\"sm\">\n              Connected wallet client is owner?\n            </Paragraph>\n            <Paragraph data-testid={'connected-wallet-is-owner'} color=\"primary\" noMargin size=\"lg\" weight=\"bolder\">\n              {isUserConnectedWalletASAfeOwner ? 'Yes' : 'No (read-only)'}\n            </Paragraph>\n          </Block>\n          <Block margin=\"lg\">\n            <Paragraph color=\"disabled\" noMargin size=\"sm\">\n              Any transaction requires the confirmation of:\n            </Paragraph>\n            <Paragraph color=\"primary\" noMargin size=\"lg\" weight=\"bolder\">\n              {`${threshold} out of ${ownerList.length} owners`}\n            </Paragraph>\n          </Block>\n        </DetailsContainer>\n      </Col>\n      <Col layout=\"column\" xs={8}>\n        <TableContainer>\n          <OwnersContainer>\n            <Paragraph color=\"primary\" noMargin size=\"lg\">\n              {`${ownerList.length} Safe owners`}\n            </Paragraph>\n          </OwnersContainer>\n          <Hairline />\n          {ownerListWithNames.map((owner, index) => (\n            <Fragment key={owner.address}>\n              <OwnerItemContainer testId={'load-safe-review-owner-name-' + index}>\n                <Col align=\"center\" xs={12}>\n                  <EthHashInfo\n                    hash={owner.address}\n                    name={owner.name}\n                    showAvatar\n                    showCopyBtn\n                    explorerUrl={getExplorerInfo(owner.address)}\n                  />\n                </Col>\n              </OwnerItemContainer>\n              {index !== ownerList.length - 1 && <Hairline />}\n            </Fragment>\n          ))}\n        </TableContainer>\n      </Col>\n    </Row>\n  )\n}\n\nexport default ReviewLoadStep\n\nfunction checkIfUserAddressIsAnOwner(owners, userAddress) {\n  return owners.some((owner) => owner.address === userAddress)\n}\n\nconst DetailsContainer = styled(Block)`\n  padding: ${lg};\n  border-right: solid 1px ${border};\n  height: 100%;\n`\n\nconst OwnersContainer = styled(Block)`\n  padding: ${lg};\n`\n\nconst OwnerItemContainer = styled(Row)`\n  align-items: center;\n  min-width: fit-content;\n  padding: ${sm};\n  padding-left: ${lg};\n`\n\nconst SafeAddressContainer = styled(Row)`\n  margin-top: ${xs};\n  align-items: center;\n`\nconst StyledParagraph = styled(Paragraph)`\n  margin-top: 4px;\n`\n","import { ReactElement, useState, useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { useHistory } from 'react-router-dom'\nimport styled from 'styled-components'\nimport IconButton from '@material-ui/core/IconButton'\nimport ChevronLeft from '@material-ui/icons/ChevronLeft'\n\nimport Block from 'src/components/layout/Block'\nimport Page from 'src/components/layout/Page'\nimport Heading from 'src/components/layout/Heading'\nimport Row from 'src/components/layout/Row'\nimport { secondary, sm } from 'src/theme/variables'\nimport SelectNetworkStep, { selectNetworkStepLabel } from './steps/SelectNetworkStep'\nimport LoadSafeAddressStep, {\n  loadSafeAddressStepLabel,\n  loadSafeAddressStepValidations,\n} from './steps/LoadSafeAddressStep'\nimport LoadSafeOwnersStep, { loadSafeOwnersStepLabel } from './steps/LoadSafeOwnersStep'\nimport ReviewLoadStep, { reviewLoadStepLabel } from './steps/ReviewLoadStep'\nimport { useMnemonicSafeName } from 'src/logic/hooks/useMnemonicName'\nimport StepperForm, { StepFormElement } from 'src/components/StepperForm/StepperForm'\nimport { isValidAddress } from 'src/utils/isValidAddress'\nimport { AddressBookEntry, makeAddressBookEntry } from 'src/logic/addressBook/model/addressBook'\nimport { addressBookSafeLoad } from 'src/logic/addressBook/store/actions'\nimport { checksumAddress } from 'src/utils/checksumAddress'\nimport { buildSafe } from 'src/logic/safe/store/actions/fetchSafe'\nimport { loadStoredSafes, saveSafes } from 'src/logic/safe/utils'\nimport { addOrUpdateSafe } from 'src/logic/safe/store/actions/addOrUpdateSafe'\nimport {\n  FIELD_LOAD_IS_LOADING_SAFE_ADDRESS,\n  FIELD_LOAD_SAFE_ADDRESS,\n  FIELD_LOAD_SUGGESTED_SAFE_NAME,\n  FIELD_SAFE_OWNER_LIST,\n  LoadSafeFormValues,\n} from './fields/loadFields'\nimport { extractPrefixedSafeAddress, generateSafeRoute, LOAD_SPECIFIC_SAFE_ROUTE, SAFE_ROUTES } from '../routes'\nimport { getCurrentShortChainName } from 'src/config'\nimport { currentNetworkAddressBookAsMap } from 'src/logic/addressBook/store/selectors'\nimport { getLoadSafeName } from './fields/utils'\n\nfunction Load(): ReactElement {\n  const dispatch = useDispatch()\n  const history = useHistory()\n  const { safeAddress, shortName } = extractPrefixedSafeAddress(undefined, LOAD_SPECIFIC_SAFE_ROUTE)\n  const safeRandomName = useMnemonicSafeName()\n  const [initialFormValues, setInitialFormValues] = useState<LoadSafeFormValues>()\n  const addressBook = useSelector(currentNetworkAddressBookAsMap)\n\n  useEffect(() => {\n    const initialValues: LoadSafeFormValues = {\n      [FIELD_LOAD_SUGGESTED_SAFE_NAME]: safeRandomName,\n      [FIELD_LOAD_SAFE_ADDRESS]: safeAddress,\n      [FIELD_LOAD_IS_LOADING_SAFE_ADDRESS]: false,\n      [FIELD_SAFE_OWNER_LIST]: [],\n    }\n    setInitialFormValues(initialValues)\n  }, [safeAddress, safeRandomName])\n\n  const updateAddressBook = (values: LoadSafeFormValues) => {\n    const ownerList = values[FIELD_SAFE_OWNER_LIST] as AddressBookEntry[]\n\n    const ownerEntries = ownerList\n      .map((owner) => {\n        const ownerFieldName = `owner-address-${owner.address}`\n        const ownerNameValue = values[ownerFieldName]\n        return {\n          ...owner,\n          name: ownerNameValue,\n        }\n      })\n      .filter((owner) => !!owner.name)\n\n    const safeEntry = makeAddressBookEntry({\n      address: checksumAddress(values[FIELD_LOAD_SAFE_ADDRESS] || ''),\n      name: getLoadSafeName(values, addressBook),\n    })\n\n    dispatch(addressBookSafeLoad([...ownerEntries, safeEntry]))\n  }\n\n  const onSubmitLoadSafe = async (values: LoadSafeFormValues) => {\n    const address = values[FIELD_LOAD_SAFE_ADDRESS]\n    if (!isValidAddress(address)) {\n      return\n    }\n\n    updateAddressBook(values)\n\n    const checksummedAddress = checksumAddress(address || '')\n    const safeProps = await buildSafe(checksummedAddress)\n    const storedSafes = (await loadStoredSafes()) || {}\n    storedSafes[checksummedAddress] = safeProps\n\n    await saveSafes(storedSafes)\n    dispatch(addOrUpdateSafe(safeProps))\n\n    // Go to the newly added Safe\n    history.push(\n      generateSafeRoute(SAFE_ROUTES.ASSETS_BALANCES, {\n        shortName: getCurrentShortChainName(),\n        safeAddress: checksummedAddress,\n      }),\n    )\n  }\n\n  return (\n    <Page>\n      <Block>\n        <Row align=\"center\">\n          <BackIcon disableRipple onClick={history.goBack}>\n            <ChevronLeft />\n          </BackIcon>\n          <Heading tag=\"h2\">Add existing Safe</Heading>\n        </Row>\n\n        {/* key={safeAddress} ensures that it goes to step 1 when the address changes */}\n        <StepperForm\n          initialValues={initialFormValues}\n          testId=\"load-safe-form\"\n          onSubmit={onSubmitLoadSafe}\n          key={safeAddress}\n        >\n          {safeAddress && shortName ? null : (\n            <StepFormElement label={selectNetworkStepLabel} nextButtonLabel=\"Continue\">\n              <SelectNetworkStep />\n            </StepFormElement>\n          )}\n          <StepFormElement label={loadSafeAddressStepLabel} validate={loadSafeAddressStepValidations}>\n            <LoadSafeAddressStep />\n          </StepFormElement>\n          <StepFormElement label={loadSafeOwnersStepLabel} nextButtonLabel=\"Continue\">\n            <LoadSafeOwnersStep />\n          </StepFormElement>\n          <StepFormElement label={reviewLoadStepLabel} nextButtonLabel=\"Add\">\n            <ReviewLoadStep />\n          </StepFormElement>\n        </StepperForm>\n      </Block>\n    </Page>\n  )\n}\n\nexport default Load\n\nconst BackIcon = styled(IconButton)`\n  color: ${secondary};\n  padding: ${sm};\n  margin-right: 5px;\n`\n"],"sourceRoot":""}