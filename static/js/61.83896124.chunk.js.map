{"version":3,"sources":["components/layout/Heading/index.tsx","components/layout/Heading/index.module.scss","logic/contracts/api/masterCopies.ts","routes/safe/components/Settings/SafeDetails/style.ts","routes/safe/components/Settings/UpdateSafeModal/style.ts","logic/safe/utils/upgradeSafe.ts","routes/safe/components/Settings/UpdateSafeModal/index.tsx","routes/safe/components/Settings/SafeDetails/index.tsx"],"names":["cx","classNames","bind","styles","Heading","props","align","children","className","color","margin","tag","testId","truncate","rest","classes","capitalize","undefined","React","module","exports","MasterCopyDeployer","createStyles","formContainer","padding","lg","root","display","maxWidth","saveBtn","fontWeight","boldFont","marginRight","sm","controlsRow","borderTop","border","marginTop","useStyles","makeStyles","modalContent","md","gasCostsContainer","backgroundColor","background","getUpgradeSafeTransactionHash","safeAddress","safeCurrentVersion","safeMasterContractAddress","getSafeMasterContractAddress","updateSafeTxData","getGnosisSafeInstanceAt","methods","changeMasterCopy","encodeABI","fallbackHandlerTxData","hasSetFallbackHandler","semverSatisfies","LATEST_SAFE_VERSION","fallbackHandlerAddress","getFallbackHandlerContractAddress","safeInstance","setFallbackHandler","EMPTY_DATA","getFallbackHandlerTxData","txs","to","value","data","encodeMultiSendCall","UpdateSafeModal","onClose","dispatch","useDispatch","useState","multiSendCallData","setMultiSendCallData","useEstimateTransactionGas","txRecipient","getMultisendContractAddress","txData","txAmount","operation","Operation","DELEGATE","gasCostFormatted","txEstimationExecutionStatus","isExecution","isCreation","isOffChainSignature","gasPriceFormatted","gasLimit","gasEstimation","useEstimationStatus","buttonStatus","useEffect","encodeMultiSendCallData","confirmButtonText","ButtonStatus","LOADING","EstimationStatus","EditableTxParameters","ethGasLimit","ethGasPrice","safeTxGas","toString","txParameters","toggleEditMode","ModalHeader","title","Block","Row","Paragraph","noMargin","Link","target","TxParametersDetail","onEdit","compact","isTransactionCreation","isTransactionExecution","Modal","Footer","withoutBorder","Buttons","cancelButtonProps","onClick","text","confirmButtonProps","createTransaction","valueInWei","txNonce","safeNonce","ethParameters","notifiedTransaction","handleSubmit","status","extractMasterCopyInfo","mc","isCircles","version","toLowerCase","includes","CIRCLES","dashIndex","indexOf","address","substring","deployer","GNOSIS","deployerRepoUrl","fetchMasterCopies","memoize","a","url","getTxServiceUrl","axios","get","res","map","console","error","SAFE_NAME_INPUT_TEST_ID","SAFE_NAME_SUBMIT_BTN_TEST_ID","SAFE_NAME_UPDATE_SAFE_BTN_TEST_ID","StyledLink","styled","StyledIcon","Icon","StyledParagraph","SafeDetails","isUserOwner","useSelector","grantedSelector","latestMasterContractVersion","latestMasterContractVersionSelector","currentSafe","safeNeedsUpdate","needsUpdate","currentVersion","chainId","getNetworkId","safesWithNamesAsMap","name","trackEvent","useAnalytics","isModalOpen","setModalOpen","safeInfo","setSafeInfo","toggleModal","prevOpen","handleUpdateSafe","SETTINGS_EVENTS","DETAILS","getMasterCopyInfo","masterCopies","getMasterCopyAddressFromProxyAddress","masterCopyAddress","masterCopy","find","sameAddress","GnoForm","onSubmit","values","addressBookAddOrUpdate","makeAddressBookEntry","safeName","updateSafe","loadedViaUrl","notification","getNotificationsFromTxType","TX_NOTIFICATION_TYPES","SAFE_NAME_CHANGE_TX","enqueueSnackbar","enhanceSnackbarForAction","afterExecution","noMoreConfirmationsNeeded","grow","rel","href","size","as","type","Button","variant","ChainIndicator","description","handleClose","open"],"mappings":"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","file":"static/js/61.83896124.chunk.js","sourcesContent":["import classNames from 'classnames/bind'\nimport * as React from 'react'\n\nimport styles from './index.module.scss'\n\nimport { capitalize } from 'src/utils/css'\n\nconst cx = classNames.bind(styles)\n\nconst Heading = (props) => {\n  const { align, children, className = '', color, margin, tag, testId, truncate, ...rest } = props\n\n  const classes = cx(className, 'heading', align, tag, margin ? capitalize(margin, 'margin') : undefined, color, {\n    truncate,\n  })\n\n  return React.createElement(tag, { ...rest, className: classes, 'data-testid': testId || '' }, children)\n}\n\nexport default Heading\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"heading\":\"Heading_heading__1O94U\",\"h1\":\"Heading_h1__2KSmw\",\"h2\":\"Heading_h2__1GfC1\",\"h3\":\"Heading_h3__2PASY\",\"h4\":\"Heading_h4__1UTeK\",\"center\":\"Heading_center__2STnO\",\"right\":\"Heading_right__23ICA\",\"truncate\":\"Heading_truncate__3zA7Q\",\"marginSm\":\"Heading_marginSm__1Mt0w\",\"marginMd\":\"Heading_marginMd__19PYc\",\"marginLg\":\"Heading_marginLg__2mXa8\",\"marginXl\":\"Heading_marginXl__2nHIr\",\"soft\":\"Heading_soft__1wR_E\",\"medium\":\"Heading_medium__2xEQK\",\"dark\":\"Heading_dark__1bnh6\",\"fancy\":\"Heading_fancy__TH_ww\",\"warning\":\"Heading_warning__17e1e\",\"primary\":\"Heading_primary__2aWUJ\",\"secondary\":\"Heading_secondary__3snnz\",\"disabled\":\"Heading_disabled__1I8Tx\",\"error\":\"Heading_error__hGPs_\",\"white\":\"Heading_white__1V7Eu\"};","import axios from 'axios'\nimport { getTxServiceUrl } from 'src/config'\nimport memoize from 'lodash.memoize'\n\nexport enum MasterCopyDeployer {\n  GNOSIS = 'Gnosis',\n  CIRCLES = 'Circles',\n}\n\ntype MasterCopyFetch = {\n  address: string\n  version: string\n}\n\nexport type MasterCopy = {\n  address: string\n  version: string\n  deployer: MasterCopyDeployer\n  deployerRepoUrl: string\n}\n\nconst extractMasterCopyInfo = (mc: MasterCopyFetch): MasterCopy => {\n  const isCircles = mc.version.toLowerCase().includes(MasterCopyDeployer.CIRCLES.toLowerCase())\n  const dashIndex = mc.version.indexOf('-')\n\n  const masterCopy = {\n    address: mc.address,\n    version: !isCircles ? mc.version : mc.version.substring(0, dashIndex),\n    deployer: !isCircles ? MasterCopyDeployer.GNOSIS : MasterCopyDeployer.CIRCLES,\n    deployerRepoUrl: !isCircles\n      ? 'https://github.com/gnosis/safe-contracts/releases'\n      : 'https://github.com/CirclesUBI/safe-contracts/releases',\n  }\n  return masterCopy\n}\n\nexport const fetchMasterCopies = memoize(async (): Promise<MasterCopy[] | undefined> => {\n  const url = `${getTxServiceUrl()}/about/master-copies/`\n  try {\n    const res = await axios.get<{ address: string; version: string }[]>(url)\n    return res.data.map(extractMasterCopyInfo)\n  } catch (error) {\n    console.error('Fetching data from master-copies errored', error)\n  }\n})\n","import { createStyles } from '@material-ui/core/styles'\nimport { boldFont, border, lg, sm } from 'src/theme/variables'\n\nexport const styles = createStyles({\n  formContainer: {\n    padding: lg,\n  },\n  root: {\n    display: 'flex',\n    maxWidth: '460px',\n  },\n  saveBtn: {\n    fontWeight: boldFont,\n    marginRight: sm,\n  },\n  controlsRow: {\n    borderTop: `2px solid ${border}`,\n    padding: lg,\n    marginTop: sm,\n  },\n})\n","import { background, lg, md } from 'src/theme/variables'\nimport { createStyles, makeStyles } from '@material-ui/core'\n\nexport const useStyles = makeStyles(\n  createStyles({\n    modalContent: {\n      padding: `${md} ${lg}`,\n    },\n    gasCostsContainer: {\n      backgroundColor: background,\n      padding: `0 ${lg}`,\n    },\n  }),\n)\n","import semverSatisfies from 'semver/functions/satisfies'\n\nimport { LATEST_SAFE_VERSION } from 'src/utils/constants'\nimport {\n  getGnosisSafeInstanceAt,\n  getSafeMasterContractAddress,\n  getFallbackHandlerContractAddress,\n} from 'src/logic/contracts/safeContracts'\nimport { encodeMultiSendCall } from 'src/logic/safe/transactions/multisend'\nimport { EMPTY_DATA } from 'src/logic/wallets/ethTransactions'\n\nconst getFallbackHandlerTxData = (safeAddress: string): string => {\n  const hasSetFallbackHandler = semverSatisfies(LATEST_SAFE_VERSION, '>=1.1.0')\n\n  const fallbackHandlerAddress = getFallbackHandlerContractAddress()\n  const safeInstance = getGnosisSafeInstanceAt(safeAddress, LATEST_SAFE_VERSION)\n\n  return hasSetFallbackHandler\n    ? safeInstance.methods.setFallbackHandler(fallbackHandlerAddress).encodeABI()\n    : EMPTY_DATA\n}\n\nexport const getUpgradeSafeTransactionHash = (safeAddress: string, safeCurrentVersion: string): string => {\n  const safeMasterContractAddress = getSafeMasterContractAddress()\n  const safeInstance = getGnosisSafeInstanceAt(safeAddress, safeCurrentVersion)\n  // @ts-expect-error this was removed in 1.3.0 but we need to support it for older safe versions\n  const updateSafeTxData = safeInstance.methods.changeMasterCopy(safeMasterContractAddress).encodeABI()\n  const fallbackHandlerTxData = getFallbackHandlerTxData(safeAddress)\n  const txs = [\n    {\n      to: safeAddress,\n      value: '0',\n      data: updateSafeTxData,\n    },\n    {\n      to: safeAddress,\n      value: '0',\n      data: fallbackHandlerTxData,\n    },\n  ]\n\n  return encodeMultiSendCall(txs)\n}\n","import { Operation } from '@gnosis.pm/safe-react-gateway-sdk'\nimport { useEffect, useState } from 'react'\nimport { useDispatch } from 'react-redux'\n\nimport { useStyles } from './style'\n\nimport { LATEST_SAFE_VERSION } from 'src/utils/constants'\nimport Link from 'src/components/layout/Link'\nimport Block from 'src/components/layout/Block'\nimport Paragraph from 'src/components/layout/Paragraph'\nimport Row from 'src/components/layout/Row'\nimport { getUpgradeSafeTransactionHash } from 'src/logic/safe/utils/upgradeSafe'\nimport { createTransaction } from 'src/logic/safe/store/actions/createTransaction'\nimport { ButtonStatus, Modal } from 'src/components/Modal'\nimport { TransactionFees } from 'src/components/TransactionsFees'\nimport { EstimationStatus, useEstimateTransactionGas } from 'src/logic/hooks/useEstimateTransactionGas'\nimport { useEstimationStatus } from 'src/logic/hooks/useEstimationStatus'\nimport { getMultisendContractAddress } from 'src/logic/contracts/safeContracts'\nimport { EMPTY_DATA } from 'src/logic/wallets/ethTransactions'\nimport { TxParametersDetail } from 'src/routes/safe/components/Transactions/helpers/TxParametersDetail'\nimport { EditableTxParameters } from 'src/routes/safe/components/Transactions/helpers/EditableTxParameters'\nimport { TxParameters } from 'src/routes/safe/container/hooks/useTransactionParameters'\nimport { ModalHeader } from 'src/routes/safe/components/Balances/SendModal/screens/ModalHeader'\n\ntype Props = {\n  onClose: () => void\n  safeAddress: string\n  safeCurrentVersion: string\n}\n\nexport const UpdateSafeModal = ({ onClose, safeAddress, safeCurrentVersion }: Props): React.ReactElement => {\n  const classes = useStyles()\n  const dispatch = useDispatch()\n  const [multiSendCallData, setMultiSendCallData] = useState(EMPTY_DATA)\n\n  const {\n    gasCostFormatted,\n    txEstimationExecutionStatus,\n    isExecution,\n    isCreation,\n    isOffChainSignature,\n    gasPriceFormatted,\n    gasLimit,\n    gasEstimation,\n  } = useEstimateTransactionGas({\n    txRecipient: getMultisendContractAddress(),\n    txData: multiSendCallData,\n    txAmount: '0',\n    operation: Operation.DELEGATE,\n  })\n\n  const [buttonStatus] = useEstimationStatus(txEstimationExecutionStatus)\n\n  useEffect(() => {\n    const encodeMultiSendCallData = getUpgradeSafeTransactionHash(safeAddress, safeCurrentVersion)\n    setMultiSendCallData(encodeMultiSendCallData)\n  }, [safeAddress, safeCurrentVersion])\n\n  const handleSubmit = (txParameters: TxParameters) => {\n    // Call the update safe method\n    dispatch(\n      createTransaction({\n        safeAddress,\n        to: getMultisendContractAddress(),\n        valueInWei: '0',\n        txData: multiSendCallData,\n        txNonce: txParameters.safeNonce,\n        safeTxGas: txParameters.safeTxGas,\n        ethParameters: txParameters,\n        notifiedTransaction: 'STANDARD_TX',\n        operation: Operation.DELEGATE,\n      }),\n    )\n    onClose()\n  }\n\n  let confirmButtonText = 'Update Safe'\n  if (ButtonStatus.LOADING === buttonStatus) {\n    confirmButtonText = txEstimationExecutionStatus === EstimationStatus.LOADING ? 'Estimating' : 'Updating'\n  }\n\n  return (\n    <EditableTxParameters\n      isOffChainSignature={isOffChainSignature}\n      isExecution={isExecution}\n      ethGasLimit={gasLimit}\n      ethGasPrice={gasPriceFormatted}\n      safeTxGas={gasEstimation.toString()}\n    >\n      {(txParameters, toggleEditMode) => (\n        <>\n          <ModalHeader onClose={onClose} title=\"Update safe version\" />\n          <Block className={classes.modalContent}>\n            <Row>\n              <Paragraph noMargin>\n                Update now to take advantage of new features and the highest security standards available.\n              </Paragraph>\n              <Paragraph>\n                To check details about updates added by this smart contract version please visit{' '}\n                <Link\n                  target=\"_blank\"\n                  to={`https://github.com/gnosis/safe-contracts/releases/tag/v${LATEST_SAFE_VERSION}`}\n                >\n                  latest Gnosis Safe contracts changelog\n                </Link>\n              </Paragraph>\n              <Paragraph noMargin>\n                You will need to confirm this update just like any other transaction. This means other owners will have\n                to confirm the update in case more than one confirmation is required for this Safe.\n              </Paragraph>\n\n              {/* A warning for 1.x.x -> 1.3.0 upgrades */}\n              <Paragraph>\n                <b>Warning</b>: this upgrade will invalidate all unexecuted transactions. This means you will be unable\n                to access or execute them after the upgrade. Please make sure to execute any remaining transactions\n                before upgrading.\n              </Paragraph>\n            </Row>\n            {/* Tx Parameters */}\n            <TxParametersDetail\n              txParameters={txParameters}\n              onEdit={toggleEditMode}\n              compact={false}\n              isTransactionCreation={isCreation}\n              isTransactionExecution={isExecution}\n              isOffChainSignature={isOffChainSignature}\n            />\n          </Block>\n          {txEstimationExecutionStatus === EstimationStatus.LOADING ? null : (\n            <Block className={classes.gasCostsContainer}>\n              <TransactionFees\n                gasCostFormatted={gasCostFormatted}\n                isExecution={isExecution}\n                isCreation={isCreation}\n                isOffChainSignature={isOffChainSignature}\n                txEstimationExecutionStatus={txEstimationExecutionStatus}\n              />\n            </Block>\n          )}\n          {/* Footer */}\n          <Modal.Footer withoutBorder={buttonStatus !== ButtonStatus.LOADING}>\n            <Modal.Footer.Buttons\n              cancelButtonProps={{\n                onClick: onClose,\n                text: 'Cancel',\n              }}\n              confirmButtonProps={{\n                onClick: () => handleSubmit(txParameters),\n                status: buttonStatus,\n                text: confirmButtonText,\n              }}\n            />\n          </Modal.Footer>\n        </>\n      )}\n    </EditableTxParameters>\n  )\n}\n","import { Icon, Link, Text } from '@gnosis.pm/safe-react-components'\nimport { makeStyles } from '@material-ui/core/styles'\nimport { ReactElement, useEffect, useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport styled from 'styled-components'\n\nimport { styles } from './style'\n\nimport Modal from 'src/components/Modal'\nimport Field from 'src/components/forms/Field'\nimport GnoForm from 'src/components/forms/GnoForm'\nimport TextField from 'src/components/forms/TextField'\nimport { composeValidators, required, validAddressBookName } from 'src/components/forms/validator'\nimport Block from 'src/components/layout/Block'\nimport Button from 'src/components/layout/Button'\nimport Col from 'src/components/layout/Col'\nimport Heading from 'src/components/layout/Heading'\nimport Paragraph from 'src/components/layout/Paragraph'\nimport Row from 'src/components/layout/Row'\nimport { makeAddressBookEntry } from 'src/logic/addressBook/model/addressBook'\nimport { addressBookAddOrUpdate } from 'src/logic/addressBook/store/actions'\nimport enqueueSnackbar from 'src/logic/notifications/store/actions/enqueueSnackbar'\nimport { getNotificationsFromTxType, enhanceSnackbarForAction } from 'src/logic/notifications'\nimport { sameAddress } from 'src/logic/wallets/ethAddresses'\nimport { TX_NOTIFICATION_TYPES } from 'src/logic/safe/transactions'\nimport { UpdateSafeModal } from 'src/routes/safe/components/Settings/UpdateSafeModal'\nimport { grantedSelector } from 'src/routes/safe/container/selector'\nimport { updateSafe } from 'src/logic/safe/store/actions/updateSafe'\n\nimport {\n  currentSafe,\n  latestMasterContractVersion as latestMasterContractVersionSelector,\n  safesWithNamesAsMap,\n} from 'src/logic/safe/store/selectors'\nimport { useAnalytics, SETTINGS_EVENTS } from 'src/utils/googleAnalytics'\nimport { fetchMasterCopies, MasterCopy, MasterCopyDeployer } from 'src/logic/contracts/api/masterCopies'\nimport { getMasterCopyAddressFromProxyAddress } from 'src/logic/contracts/safeContracts'\nimport ChainIndicator from 'src/components/ChainIndicator'\nimport { getNetworkId } from 'src/config'\n\nexport const SAFE_NAME_INPUT_TEST_ID = 'safe-name-input'\nexport const SAFE_NAME_SUBMIT_BTN_TEST_ID = 'change-safe-name-btn'\nexport const SAFE_NAME_UPDATE_SAFE_BTN_TEST_ID = 'update-safe-name-btn'\n\nconst useStyles = makeStyles(styles)\n\nconst StyledLink = styled(Link)`\n  margin: 12px 0 0 0;\n`\nconst StyledIcon = styled(Icon)`\n  position: relative;\n  top: 3px;\n  left: 6px;\n`\nconst StyledParagraph = styled(Paragraph)`\n  margin-bottom: 0;\n`\n\nconst SafeDetails = (): ReactElement => {\n  const classes = useStyles()\n  const isUserOwner = useSelector(grantedSelector)\n  const latestMasterContractVersion = useSelector(latestMasterContractVersionSelector)\n  const {\n    address: safeAddress,\n    needsUpdate: safeNeedsUpdate,\n    currentVersion: safeCurrentVersion,\n    chainId = getNetworkId(),\n  } = useSelector(currentSafe)\n  const safeNamesMap = useSelector(safesWithNamesAsMap)\n  const safeName = safeNamesMap[safeAddress]?.name\n\n  const dispatch = useDispatch()\n  const { trackEvent } = useAnalytics()\n\n  const [isModalOpen, setModalOpen] = useState(false)\n  const [safeInfo, setSafeInfo] = useState<MasterCopy | undefined>()\n\n  const toggleModal = () => {\n    setModalOpen((prevOpen) => !prevOpen)\n  }\n\n  const handleSubmit = (values) => {\n    dispatch(addressBookAddOrUpdate(makeAddressBookEntry({ address: safeAddress, name: values.safeName })))\n    // setting `loadedViaUrl` to `false` as setting a safe's name is considered to intentionally add the safe\n    dispatch(updateSafe({ address: safeAddress, loadedViaUrl: false }))\n\n    const notification = getNotificationsFromTxType(TX_NOTIFICATION_TYPES.SAFE_NAME_CHANGE_TX)\n    dispatch(enqueueSnackbar(enhanceSnackbarForAction(notification.afterExecution.noMoreConfirmationsNeeded)))\n  }\n\n  const handleUpdateSafe = () => {\n    setModalOpen(true)\n  }\n\n  const getSafeVersion = () => {\n    if (!safeInfo) {\n      return ''\n    }\n    return safeInfo.deployer === MasterCopyDeployer.GNOSIS\n      ? safeCurrentVersion\n      : `${safeCurrentVersion}-${safeInfo.deployer}`\n  }\n\n  const getSafeVersionUpdate = () => {\n    if (!safeInfo) {\n      return ''\n    }\n    return safeInfo.deployer === MasterCopyDeployer.GNOSIS && safeNeedsUpdate\n      ? ` (there's a newer version: ${latestMasterContractVersion})`\n      : ''\n  }\n\n  useEffect(() => {\n    trackEvent(SETTINGS_EVENTS.DETAILS)\n  }, [trackEvent])\n\n  useEffect(() => {\n    const getMasterCopyInfo = async () => {\n      const masterCopies = await fetchMasterCopies()\n      const masterCopyAddress = await getMasterCopyAddressFromProxyAddress(safeAddress)\n      const masterCopy = masterCopies?.find((mc) => sameAddress(mc.address, masterCopyAddress))\n      setSafeInfo(masterCopy)\n    }\n\n    if (safeAddress) {\n      getMasterCopyInfo()\n    }\n  }, [safeAddress])\n\n  return (\n    <GnoForm onSubmit={handleSubmit}>\n      {() => (\n        <>\n          <Block className={classes.formContainer}>\n            <Heading tag=\"h2\">Contract Version</Heading>\n            <Row align=\"end\" grow>\n              <StyledLink rel=\"noreferrer noopener\" target=\"_blank\" href={safeInfo?.deployerRepoUrl}>\n                <Text size=\"xl\" as=\"span\" color=\"primary\">\n                  {getSafeVersion()}\n                  {getSafeVersionUpdate()}\n                </Text>\n                <StyledIcon size=\"sm\" type=\"externalLink\" color=\"primary\" />\n              </StyledLink>\n            </Row>\n            {safeNeedsUpdate && isUserOwner ? (\n              <Row align=\"end\" grow>\n                <Paragraph>\n                  <Button\n                    className={classes.saveBtn}\n                    color=\"primary\"\n                    onClick={handleUpdateSafe}\n                    size=\"small\"\n                    testId={SAFE_NAME_UPDATE_SAFE_BTN_TEST_ID}\n                    variant=\"contained\"\n                  >\n                    Update Safe\n                  </Button>\n                </Paragraph>\n              </Row>\n            ) : null}\n          </Block>\n\n          <Block className={classes.formContainer}>\n            <Heading tag=\"h2\">Blockchain Network</Heading>\n            <StyledParagraph>\n              <ChainIndicator chainId={chainId} />\n            </StyledParagraph>\n          </Block>\n\n          {/*safeName != null && (\n            <Block className={classes.formContainer}>\n              <Heading tag=\"h2\">Modify Safe Name</Heading>\n              <Paragraph>\n                You can change the name of this Safe. This name is only stored locally and never shared with Gnosis or\n                any third parties.\n              </Paragraph>\n              <Block className={classes.root}>\n                <Field\n                  component={TextField}\n                  defaultValue={safeName}\n                  name=\"safeName\"\n                  placeholder=\"Safe name*\"\n                  testId={SAFE_NAME_INPUT_TEST_ID}\n                  text=\"Safe name*\"\n                  type=\"text\"\n                  validate={composeValidators(required, validAddressBookName)}\n                />\n              </Block>\n            </Block>\n          )}\n\n          <Row align=\"end\" className={classes.controlsRow} grow>\n            <Col end=\"xs\">\n              <Button\n                className={classes.saveBtn}\n                color=\"primary\"\n                size=\"small\"\n                testId={SAFE_NAME_SUBMIT_BTN_TEST_ID}\n                type=\"submit\"\n                variant=\"contained\"\n              >\n                Save\n              </Button>\n            </Col>\n          </Row>*/}\n          <Modal description=\"Update Safe\" handleClose={toggleModal} open={isModalOpen} title=\"Update Safe\">\n            <UpdateSafeModal onClose={toggleModal} safeAddress={safeAddress} safeCurrentVersion={safeCurrentVersion} />\n          </Modal>\n        </>\n      )}\n    </GnoForm>\n  )\n}\n\nexport default SafeDetails\n"],"sourceRoot":""}