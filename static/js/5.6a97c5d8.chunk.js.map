{"version":3,"sources":["components/forms/Field/index.tsx","routes/safe/components/Balances/SendModal/screens/ModalHeader/style.ts","routes/safe/components/Balances/SendModal/screens/ModalHeader/index.tsx","components/forms/TextField/index.tsx","components/forms/GnoForm/index.tsx","logic/hooks/useEstimateTransactionGas.tsx","routes/safe/components/Transactions/helpers/TxParametersDetail/index.tsx","routes/safe/components/Transactions/helpers/EditTxParametersForm/style.ts","routes/safe/components/Transactions/helpers/EditTxParametersForm/index.tsx","routes/safe/components/Transactions/helpers/EditableTxParameters.tsx","components/TransactionFailText/index.tsx","components/TransactionsFees/index.tsx","logic/hooks/useEstimationStatus.tsx","assets/icons/info_red.svg","routes/safe/container/hooks/useTransactionParameters.ts","routes/safe/components/Transactions/helpers/utils.ts"],"names":["GnoField","props","styles","createStyles","heading","padding","md","lg","justifyContent","boxSizing","maxHeight","annotation","letterSpacing","color","secondaryText","marginRight","marginLeft","headingText","fontSize","closeIcon","height","width","chainIndicator","alignItems","icon","useStyles","makeStyles","ModalHeader","onClose","subTitle","title","iconUrl","classes","connectedNetwork","getNetworkInfo","Row","align","className","grow","alt","src","Paragraph","noMargin","weight","id","ChainIndicator","chainId","IconButton","disableRipple","onClick","overflowStyle","overflow","root","paddingTop","paddingBottom","lineHeight","TextField","input","name","onChange","value","restInput","inputAdornment","meta","multiline","rows","testId","text","rest","helperText","undefined","showError","touched","pristine","valid","hasError","error","modifiedSinceLastSubmit","submitError","errorMessage","isInactiveAndPristineOrUntouched","active","isInvalidAndUntouched","disableUnderline","inputRoot","statusClasses","inputProps","autoComplete","inputRootProps","InputProps","style","stylesBasedOn","flexDirection","flex","GnoForm","children","decorators","formMutators","initialValues","onSubmit","subscription","validation","mutators","render","handleSubmit","submitting","validating","form","validate","EstimationStatus","EXTRA_GAS_FACTOR","ETHEREUM_NETWORK","ARBITRUM","checkIfTxIsExecution","threshold","preApprovingOwner","txConfirmations","txType","sameString","checkIfTxIsApproveAndExecution","checkIfTxIsCreation","getDefaultGasEstimation","txEstimationExecutionStatus","gasPrice","gasPriceFormatted","isExecution","isCreation","isOffChainSignature","gasEstimation","gasCost","gasCostFormatted","gasLimit","useEstimateTransactionGas","txRecipient","txData","txAmount","operation","safeTxGas","manualGasPrice","manualGasLimit","useState","LOADING","setGasEstimation","nativeCoin","useSelector","currentSafe","address","safeAddress","currentVersion","safeVersion","providerSelector","from","account","smartContractWallet","providerName","useEffect","web3","getWeb3ReadOnly","estimateGas","a","length","Number","size","checkIfOffChainSignatureIsPossible","SUCCESS","approvalAndExecution","safeTxGasEstimation","ethGasLimitEstimation","transactionCallSuccess","estimateSafeTxGas","Operation","CALL","estimateTransactionGasLimit","utils","toWei","calculateGasPrice","fromWei","extraGasMult","getNetworkId","Math","round","toString","estimatedGasCosts","parseInt","fromTokenUnit","decimals","formatAmount","checkTransactionExecution","gasToken","ZERO_ADDRESS","refundReceiver","FAILURE","console","warn","message","TxParameterWrapper","styled","div","AccordionDetailsWrapper","StyledText","Text","StyledButtonLink","ButtonLink","TxParametersDetail","onEdit","txParameters","compact","parametersStatus","isTransactionCreation","isTransactionExecution","currentSafeThreshold","defaultParameterStatus","areSafeParamsEnabled","safeNonce","areEthereumParamsVisible","ethereumTxParametersTitle","ethNonce","ethGasLimit","ethGasPrice","textSize","container","amount","sm","buttonRow","gap","StyledDivider","Divider","StyledDividerFooter","SafeOptions","EthereumOptions","Link","StyledTextMt","formValidation","values","minValue","EditTxParametersForm","onCloseFormHandler","withoutMargin","Block","strong","Field","defaultValue","placeholder","type","min","component","disabled","Modal","Footer","Buttons","cancelButtonProps","confirmButtonProps","EditableTxParameters","closeEditModalCallback","isEditMode","toggleEditMode","useManualValues","setUseManualValues","useTransactionParameters","parameterStatus","initialEthGasLimit","initialEthGasPrice","initialSafeNonce","initialSafeTxGas","setEthGasPrice","setEthGasLimit","setSafeNonce","setSafeTxGas","setEthNonce","toggleStatus","prev","executionWarningRow","display","warningIcon","TransactionFailText","isOwner","grantedSelector","Img","InfoIcon","TransactionFees","transactionAction","as","useEstimationStatus","txEstimationStatus","ButtonStatus","DISABLED","buttonStatus","setButtonStatus","mounted","READY","isCancelTransaction","connectedWalletAddress","userAccountSelector","extractSafeAddress","currentSafeCurrentVersion","ethGasPriceInGWei","setEthGasPriceInGWei","getNonce","getUserNonce","res","getSafeNonce","safeInstance","getGnosisSafeInstanceAt","getLastTx","lastTx","getNewTxNonce","nonce"],"mappings":"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","file":"static/js/5.6a97c5d8.chunk.js","sourcesContent":["import { Field } from 'react-final-form'\n\n// $FlowFixMe\nconst GnoField = ({ ...props }: any) => <Field {...props} />\n\nexport default GnoField\n","import { lg, md, secondaryText } from 'src/theme/variables'\nimport { createStyles } from '@material-ui/core'\n\nexport const styles = createStyles({\n  heading: {\n    padding: `${md} ${lg}`,\n    justifyContent: 'flex-start',\n    boxSizing: 'border-box',\n    maxHeight: '74px',\n  },\n  annotation: {\n    letterSpacing: '-1px',\n    color: secondaryText,\n    marginRight: 'auto',\n    marginLeft: '20px',\n  },\n  headingText: {\n    fontSize: lg,\n  },\n  closeIcon: {\n    height: '35px',\n    width: '35px',\n  },\n  chainIndicator: {\n    padding: `0 ${md}`,\n    height: '20px',\n    alignItems: 'center',\n  },\n  icon: {\n    width: '20px',\n    marginRight: '10px',\n  },\n})\n","import IconButton from '@material-ui/core/IconButton'\nimport { makeStyles } from '@material-ui/core/styles'\nimport Close from '@material-ui/icons/Close'\nimport { ReactElement } from 'react'\n\nimport ChainIndicator from 'src/components/ChainIndicator'\nimport Paragraph from 'src/components/layout/Paragraph'\nimport Row from 'src/components/layout/Row'\nimport { getNetworkInfo } from 'src/config'\nimport { styles } from './style'\n\nconst useStyles = makeStyles(styles)\n\ninterface HeaderProps {\n  onClose: () => void\n  subTitle?: string\n  title: string\n  iconUrl?: string\n}\n\nexport const ModalHeader = ({ onClose, subTitle, title, iconUrl }: HeaderProps): ReactElement => {\n  const classes = useStyles()\n  const connectedNetwork = getNetworkInfo()\n\n  return (\n    <Row align=\"center\" className={classes.heading} grow>\n      {iconUrl && <img className={classes.icon} alt={title} src={iconUrl} />}\n      <Paragraph className={classes.headingText} noMargin weight=\"bolder\">\n        {title}\n      </Paragraph>\n      <Paragraph className={classes.annotation}>{subTitle ? subTitle : ''}</Paragraph>\n      <Row className={classes.chainIndicator}>\n        {connectedNetwork.id && <ChainIndicator chainId={connectedNetwork.id} />}\n      </Row>\n      <IconButton disableRipple onClick={onClose}>\n        <Close className={classes.closeIcon} />\n      </IconButton>\n    </Row>\n  )\n}\n","import MuiTextField from '@material-ui/core/TextField'\nimport { createStyles, makeStyles } from '@material-ui/core/styles'\n\nimport { lg } from 'src/theme/variables'\n\n// Neded for solving a fix in Windows browsers\nconst overflowStyle = {\n  overflow: 'hidden',\n  width: '100%',\n}\n\nconst styles = () =>\n  createStyles({\n    root: {\n      paddingTop: lg,\n      paddingBottom: '12px',\n      lineHeight: 0,\n    },\n  })\n\nconst useStyles = makeStyles(styles)\n\ntype Props = {\n  input: {\n    name: string\n    onChange?: () => void\n    value: string\n    placeholder: string\n    type: string\n  }\n  meta: {\n    touched?: boolean\n    pristine?: boolean\n    valid?: boolean\n    error?: string\n    modifiedSinceLastSubmit?: boolean\n    submitError?: boolean\n    active?: boolean\n  }\n  inputAdornment?: { endAdornment: React.ReactElement } | undefined\n  multiline: boolean\n  rows?: string\n  testId: string\n  text: string\n  disabled?: boolean\n  rowsMax?: number\n  className?: string\n}\n\nconst TextField = (props: Props): React.ReactElement => {\n  const {\n    input: { name, onChange, value, ...restInput },\n    inputAdornment,\n    meta,\n    multiline,\n    rows,\n    testId,\n    text,\n    ...rest\n  } = props\n  const classes = useStyles()\n  const helperText = value ? text : undefined\n  const showError = (meta.touched || !meta.pristine) && !meta.valid\n  const hasError = !!meta.error || (!meta.modifiedSinceLastSubmit && !!meta.submitError)\n  const errorMessage = meta.error || meta.submitError\n  const isInactiveAndPristineOrUntouched = !meta.active && (meta.pristine || !meta.touched)\n  const isInvalidAndUntouched = typeof meta.error === 'undefined' ? true : !meta.touched\n\n  const disableUnderline = isInactiveAndPristineOrUntouched && isInvalidAndUntouched\n\n  const inputRoot = helperText ? classes.root : ''\n  const statusClasses = meta.valid ? 'isValid' : hasError && showError ? 'isInvalid' : ''\n  const inputProps = {\n    ...restInput,\n    autoComplete: 'off',\n    'data-testid': testId,\n  }\n  const inputRootProps = {\n    ...inputAdornment,\n    className: `${inputRoot} ${statusClasses}`,\n    disableUnderline: disableUnderline,\n  }\n\n  return (\n    <MuiTextField\n      error={hasError && showError}\n      helperText={hasError && showError ? errorMessage : helperText || ' '}\n      inputProps={inputProps} // blank in order to force to have helper text\n      InputProps={inputRootProps}\n      multiline={multiline}\n      name={name}\n      onChange={onChange}\n      rows={rows}\n      style={overflowStyle}\n      value={value}\n      {...rest}\n    />\n  )\n}\n\nexport default TextField\n","import { ReactElement } from 'react'\nimport { Form } from 'react-final-form'\n\nconst stylesBasedOn = (padding) => ({\n  padding: `0 ${padding}%`,\n  flexDirection: 'column',\n  flex: '1 0 auto',\n})\n\nconst GnoForm = ({\n  children,\n  decorators,\n  formMutators,\n  initialValues,\n  onSubmit,\n  padding = 0,\n  subscription,\n  testId = '',\n  validation,\n}: any): ReactElement => (\n  <Form\n    decorators={decorators}\n    initialValues={initialValues}\n    mutators={formMutators}\n    onSubmit={onSubmit}\n    render={({ handleSubmit, ...rest }) => (\n      <form data-testid={testId} onSubmit={handleSubmit} style={stylesBasedOn(padding) as any}>\n        {children(rest.submitting, rest.validating, rest, rest.form.mutators)}\n      </form>\n    )}\n    subscription={subscription}\n    validate={validation}\n  />\n)\n\nexport default GnoForm\n","import { Operation } from '@gnosis.pm/safe-react-gateway-sdk'\nimport { List } from 'immutable'\nimport { useEffect, useState } from 'react'\nimport { useSelector } from 'react-redux'\n\nimport { getNetworkId, getNetworkInfo } from 'src/config'\nimport {\n  checkTransactionExecution,\n  estimateSafeTxGas,\n  estimateTransactionGasLimit,\n} from 'src/logic/safe/transactions/gas'\nimport { fromTokenUnit } from 'src/logic/tokens/utils/humanReadableValue'\nimport { formatAmount } from 'src/logic/tokens/utils/formatAmount'\nimport { calculateGasPrice } from 'src/logic/wallets/ethTransactions'\nimport { currentSafe } from 'src/logic/safe/store/selectors'\nimport { getWeb3ReadOnly } from 'src/logic/wallets/getWeb3'\nimport { providerSelector } from 'src/logic/wallets/store/selectors'\n\nimport { Confirmation } from 'src/logic/safe/store/models/types/confirmation'\nimport { checkIfOffChainSignatureIsPossible } from 'src/logic/safe/safeTxSigner'\nimport { ZERO_ADDRESS } from 'src/logic/wallets/ethAddresses'\nimport { sameString } from 'src/utils/strings'\nimport { ETHEREUM_NETWORK } from 'src/config/networks/network.d'\n\nexport enum EstimationStatus {\n  LOADING = 'LOADING',\n  FAILURE = 'FAILURE',\n  SUCCESS = 'SUCCESS',\n}\n\n// How much to add to gasLimit per network\n// Defaults to x1 (i.e. no extra gas)\nconst EXTRA_GAS_FACTOR = {\n  [ETHEREUM_NETWORK.ARBITRUM]: 1.2, // +20%\n}\n\nexport const checkIfTxIsExecution = (\n  threshold: number,\n  preApprovingOwner?: string,\n  txConfirmations?: number,\n  txType?: string,\n): boolean => {\n  if (\n    threshold === 1 ||\n    sameString(txType, 'spendingLimit') ||\n    (txConfirmations !== undefined && txConfirmations >= threshold)\n  ) {\n    return true\n  }\n\n  if (preApprovingOwner && txConfirmations) {\n    return txConfirmations + 1 === threshold\n  }\n\n  return false\n}\n\nexport const checkIfTxIsApproveAndExecution = (\n  threshold: number,\n  txConfirmations: number,\n  txType?: string,\n  preApprovingOwner?: string,\n): boolean => {\n  if (preApprovingOwner) {\n    return txConfirmations + 1 === threshold || sameString(txType, 'spendingLimit')\n  }\n\n  if (threshold === 1) {\n    return true\n  }\n\n  return false\n}\n\nexport const checkIfTxIsCreation = (txConfirmations: number, txType?: string): boolean =>\n  txConfirmations === 0 && !sameString(txType, 'spendingLimit')\n\ntype UseEstimateTransactionGasProps = {\n  txData: string\n  txRecipient: string\n  txConfirmations?: List<Confirmation>\n  txAmount?: string\n  preApprovingOwner?: string\n  operation?: number\n  safeTxGas?: string\n  txType?: string\n  manualGasPrice?: string\n  manualGasLimit?: string\n}\n\nexport type TransactionGasEstimationResult = {\n  txEstimationExecutionStatus: EstimationStatus\n  gasEstimation: string // Amount of gas needed for execute or approve the transaction\n  gasCost: string // Cost of gas in raw format (estimatedGas * gasPrice)\n  gasCostFormatted: string // Cost of gas in format '< | > 100'\n  gasPrice: string // Current price of gas unit\n  gasPriceFormatted: string // Current gas price formatted\n  gasLimit: string // Minimum gas requited to execute the Tx\n  isExecution: boolean // Returns true if the user will execute the tx or false if it just signs it\n  isCreation: boolean // Returns true if the transaction is a creation transaction\n  isOffChainSignature: boolean // Returns true if offChainSignature is available\n}\n\nconst getDefaultGasEstimation = (\n  txEstimationExecutionStatus: EstimationStatus,\n  gasPrice: string,\n  gasPriceFormatted: string,\n  isExecution = false,\n  isCreation = false,\n  isOffChainSignature = false,\n): TransactionGasEstimationResult => {\n  return {\n    txEstimationExecutionStatus,\n    gasEstimation: '0',\n    gasCost: '0',\n    gasCostFormatted: '< 0.001',\n    gasPrice,\n    gasPriceFormatted,\n    gasLimit: '0',\n    isExecution,\n    isCreation,\n    isOffChainSignature,\n  }\n}\n\nexport const useEstimateTransactionGas = ({\n  txRecipient,\n  txData,\n  txConfirmations,\n  txAmount,\n  preApprovingOwner,\n  operation,\n  safeTxGas,\n  txType,\n  manualGasPrice,\n  manualGasLimit,\n}: UseEstimateTransactionGasProps): TransactionGasEstimationResult => {\n  const [gasEstimation, setGasEstimation] = useState<TransactionGasEstimationResult>(\n    getDefaultGasEstimation(EstimationStatus.LOADING, '0', '0'),\n  )\n  const { nativeCoin } = getNetworkInfo()\n  const { address: safeAddress = '', threshold = 1, currentVersion: safeVersion = '' } = useSelector(currentSafe) ?? {}\n  const { account: from, smartContractWallet, name: providerName } = useSelector(providerSelector)\n  useEffect(() => {\n    const web3 = getWeb3ReadOnly()\n    const estimateGas = async () => {\n      if (!txData.length) {\n        return\n      }\n      const isExecution = checkIfTxIsExecution(Number(threshold), preApprovingOwner, txConfirmations?.size, txType)\n      const isOffChainSignature = checkIfOffChainSignatureIsPossible(isExecution, smartContractWallet, safeVersion)\n      const isCreation = checkIfTxIsCreation(txConfirmations?.size || 0, txType)\n\n      if (isOffChainSignature && !isCreation) {\n        setGasEstimation(\n          getDefaultGasEstimation(EstimationStatus.SUCCESS, '1', '1', isExecution, isCreation, isOffChainSignature),\n        )\n        return\n      }\n      const approvalAndExecution = checkIfTxIsApproveAndExecution(\n        Number(threshold),\n        txConfirmations?.size || 0,\n        txType,\n        preApprovingOwner,\n      )\n\n      try {\n        let safeTxGasEstimation = safeTxGas || '0'\n        let ethGasLimitEstimation = 0\n        let transactionCallSuccess = true\n        let txEstimationExecutionStatus = EstimationStatus.LOADING\n\n        if (isCreation) {\n          safeTxGasEstimation = await estimateSafeTxGas({\n            safeAddress,\n            txData,\n            txRecipient,\n            txAmount: txAmount || '0',\n            operation: operation || Operation.CALL,\n          })\n        }\n        if (isExecution || approvalAndExecution) {\n          ethGasLimitEstimation = await estimateTransactionGasLimit({\n            safeAddress,\n            safeVersion,\n            txRecipient,\n            txData,\n            txAmount: txAmount || '0',\n            txConfirmations,\n            isExecution,\n            isOffChainSignature,\n            operation: operation || Operation.CALL,\n            from,\n            safeTxGas: safeTxGasEstimation,\n            approvalAndExecution,\n          })\n        }\n\n        const gasPrice = manualGasPrice ? web3.utils.toWei(manualGasPrice, 'gwei') : await calculateGasPrice()\n        const gasPriceFormatted = web3.utils.fromWei(gasPrice, 'gwei')\n        const extraGasMult = EXTRA_GAS_FACTOR[getNetworkId()] || 1\n        const gasLimit = manualGasLimit || Math.round(ethGasLimitEstimation * extraGasMult).toString()\n        const estimatedGasCosts = parseInt(gasLimit, 10) * parseInt(gasPrice, 10)\n        const gasCost = fromTokenUnit(estimatedGasCosts, nativeCoin.decimals)\n        const gasCostFormatted = formatAmount(gasCost)\n\n        if (isExecution) {\n          transactionCallSuccess = await checkTransactionExecution({\n            safeAddress,\n            safeVersion,\n            txRecipient,\n            txData,\n            txAmount: txAmount || '0',\n            txConfirmations,\n            operation: operation || Operation.CALL,\n            from,\n            gasPrice: '0',\n            gasToken: ZERO_ADDRESS,\n            gasLimit,\n            refundReceiver: ZERO_ADDRESS,\n            safeTxGas: safeTxGasEstimation,\n            approvalAndExecution,\n          })\n        }\n\n        txEstimationExecutionStatus = transactionCallSuccess ? EstimationStatus.SUCCESS : EstimationStatus.FAILURE\n\n        setGasEstimation({\n          txEstimationExecutionStatus,\n          gasEstimation: safeTxGasEstimation,\n          gasCost,\n          gasCostFormatted,\n          gasPrice,\n          gasPriceFormatted,\n          gasLimit,\n          isExecution,\n          isCreation,\n          isOffChainSignature,\n        })\n      } catch (error) {\n        console.warn(error.message)\n        // If safeTxGas estimation fail we set this value to 0 (so up to all gasLimit can be used)\n        setGasEstimation(getDefaultGasEstimation(EstimationStatus.FAILURE, '1', '1'))\n      }\n    }\n\n    estimateGas()\n  }, [\n    txData,\n    safeAddress,\n    txRecipient,\n    txConfirmations,\n    txAmount,\n    preApprovingOwner,\n    nativeCoin.decimals,\n    threshold,\n    from,\n    operation,\n    safeVersion,\n    smartContractWallet,\n    safeTxGas,\n    txType,\n    providerName,\n    manualGasPrice,\n    manualGasLimit,\n  ])\n\n  return gasEstimation\n}\n","import { ReactElement } from 'react'\nimport styled from 'styled-components'\nimport { Text, ButtonLink, Accordion, AccordionSummary, AccordionDetails } from '@gnosis.pm/safe-react-components'\n\nimport { TxParameters } from 'src/routes/safe/container/hooks/useTransactionParameters'\nimport { ParametersStatus, areEthereumParamsVisible, areSafeParamsEnabled, ethereumTxParametersTitle } from '../utils'\nimport { useSelector } from 'react-redux'\nimport { currentSafeThreshold } from 'src/logic/safe/store/selectors'\n\nconst TxParameterWrapper = styled.div`\n  display: flex;\n  justify-content: space-between;\n`\n\nconst AccordionDetailsWrapper = styled.div`\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n`\nconst StyledText = styled(Text)`\n  margin: 8px 0 0 0;\n`\n\nconst StyledButtonLink = styled(ButtonLink)`\n  padding-left: 0;\n  margin: 8px 0 0 0;\n\n  > p {\n    margin-left: 0;\n  }\n`\n\ntype Props = {\n  txParameters: TxParameters\n  onEdit: () => void\n  compact?: boolean\n  parametersStatus?: ParametersStatus\n  isTransactionCreation: boolean\n  isTransactionExecution: boolean\n  isOffChainSignature: boolean\n}\n\nexport const TxParametersDetail = ({\n  onEdit,\n  txParameters,\n  compact = true,\n  parametersStatus,\n  isTransactionCreation,\n  isTransactionExecution,\n  isOffChainSignature,\n}: Props): ReactElement | null => {\n  const threshold = useSelector(currentSafeThreshold) || 1\n  const defaultParameterStatus = isOffChainSignature && threshold > 1 ? 'ETH_HIDDEN' : 'ENABLED'\n\n  if (!isTransactionExecution && !isTransactionCreation && isOffChainSignature) {\n    return null\n  }\n\n  return (\n    <Accordion compact={compact}>\n      <AccordionSummary>\n        <Text size=\"lg\">Advanced options</Text>\n      </AccordionSummary>\n      <AccordionDetails>\n        <AccordionDetailsWrapper>\n          <StyledText size=\"md\" color=\"placeHolder\">\n            Jupisky transaction\n          </StyledText>\n\n          <TxParameterWrapper>\n            <Text\n              size=\"lg\"\n              color={areSafeParamsEnabled(parametersStatus || defaultParameterStatus) ? 'text' : 'secondaryLight'}\n            >\n              Jupisky nonce\n            </Text>\n            <Text\n              size=\"lg\"\n              color={areSafeParamsEnabled(parametersStatus || defaultParameterStatus) ? 'text' : 'secondaryLight'}\n            >\n              {txParameters.safeNonce}\n            </Text>\n          </TxParameterWrapper>\n\n          <TxParameterWrapper>\n            <Text\n              size=\"lg\"\n              color={areSafeParamsEnabled(parametersStatus || defaultParameterStatus) ? 'text' : 'secondaryLight'}\n            >\n              JupiskyTxGas\n            </Text>\n            <Text\n              size=\"lg\"\n              color={areSafeParamsEnabled(parametersStatus || defaultParameterStatus) ? 'text' : 'secondaryLight'}\n            >\n              {txParameters.safeTxGas}\n            </Text>\n          </TxParameterWrapper>\n\n          {areEthereumParamsVisible(parametersStatus || defaultParameterStatus) && (\n            <>\n              <TxParameterWrapper>\n                <StyledText size=\"md\" color=\"placeHolder\">\n                  {ethereumTxParametersTitle(isTransactionExecution)}\n                </StyledText>\n              </TxParameterWrapper>\n\n              <TxParameterWrapper>\n                <Text size=\"lg\">Nonce</Text>\n                <Text size=\"lg\">{txParameters.ethNonce}</Text>\n              </TxParameterWrapper>\n\n              <TxParameterWrapper>\n                <Text size=\"lg\">Gas limit</Text>\n                <Text size=\"lg\">{txParameters.ethGasLimit}</Text>\n              </TxParameterWrapper>\n\n              <TxParameterWrapper>\n                <Text size=\"lg\">Gas price</Text>\n                <Text size=\"lg\">{txParameters.ethGasPrice}</Text>\n              </TxParameterWrapper>\n            </>\n          )}\n          <StyledButtonLink color=\"primary\" textSize=\"xl\" onClick={onEdit}>\n            Edit\n          </StyledButtonLink>\n        </AccordionDetailsWrapper>\n      </AccordionDetails>\n    </Accordion>\n  )\n}\n","import { lg, md, secondaryText, sm } from 'src/theme/variables'\nimport { createStyles } from '@material-ui/core'\n\nexport const styles = createStyles({\n  heading: {\n    padding: `${md} ${lg}`,\n    justifyContent: 'space-between',\n    boxSizing: 'border-box',\n    height: '74px',\n  },\n  annotation: {\n    letterSpacing: '-1px',\n    color: secondaryText,\n    marginRight: 'auto',\n    marginLeft: '20px',\n  },\n  headingText: {\n    fontSize: lg,\n  },\n  closeIcon: {\n    height: '35px',\n    width: '35px',\n  },\n  container: {\n    padding: `${md} ${lg}`,\n  },\n  amount: {\n    marginLeft: sm,\n  },\n  address: {\n    marginRight: sm,\n  },\n  buttonRow: {\n    height: '52px',\n    justifyContent: 'center',\n    alignItems: 'center',\n    gap: '16px',\n  },\n})\n","import { ReactElement } from 'react'\nimport IconButton from '@material-ui/core/IconButton'\nimport Close from '@material-ui/icons/Close'\nimport { makeStyles } from '@material-ui/core/styles'\nimport { Title, Text, Divider, Link, Icon } from '@gnosis.pm/safe-react-components'\nimport styled from 'styled-components'\n\nimport Field from 'src/components/forms/Field'\nimport TextField from 'src/components/forms/TextField'\nimport Block from 'src/components/layout/Block'\nimport Row from 'src/components/layout/Row'\nimport { styles } from './style'\nimport GnoForm from 'src/components/forms/GnoForm'\nimport { TxParameters } from 'src/routes/safe/container/hooks/useTransactionParameters'\nimport { minValue } from 'src/components/forms/validator'\nimport { Modal } from 'src/components/Modal'\n\nimport { ParametersStatus, areSafeParamsEnabled, areEthereumParamsVisible, ethereumTxParametersTitle } from '../utils'\n\nconst StyledDivider = styled(Divider)`\n  margin: 0px;\n`\nconst StyledDividerFooter = styled(Divider)`\n  margin: 16px -24px;\n`\n\nconst SafeOptions = styled.div`\n  display: flex;\n  justify-content: space-between;\n  gap: 20px;\n`\n\nconst EthereumOptions = styled.div`\n  display: flex;\n  /* justify-content: space-between; */\n  flex-wrap: wrap;\n  gap: 10px 20px;\n\n  div {\n    width: 216px !important;\n  }\n`\nconst StyledLink = styled(Link)`\n  margin: 16px 0 0 0;\n  display: inline-flex;\n  align-items: center;\n\n  > :first-of-type {\n    margin-right: 5px;\n  }\n`\nconst StyledText = styled(Text)`\n  margin: 0 0 4px 0;\n`\nconst StyledTextMt = styled(Text)`\n  margin: 16px 0 4px 0;\n`\nconst useStyles = makeStyles(styles)\n\ninterface Props {\n  txParameters: TxParameters\n  onClose: (txParameters?: TxParameters) => void\n  parametersStatus: ParametersStatus\n  isExecution: boolean\n}\n\nconst formValidation = (values) => {\n  const { ethGasLimit, ethGasPrice, ethNonce, safeNonce, safeTxGas } = values ?? {}\n\n  const ethGasLimitValidation = minValue(0, true)(ethGasLimit)\n\n  const ethGasPriceValidation = minValue(0, true)(ethGasPrice)\n\n  const ethNonceValidation = minValue(0, true)(ethNonce)\n\n  const safeNonceValidation = minValue(0, true)(safeNonce)\n\n  const safeTxGasValidation = minValue(0, true)(safeTxGas)\n\n  return {\n    ethGasLimit: ethGasLimitValidation,\n    ethGasPrice: ethGasPriceValidation,\n    ethNonce: ethNonceValidation,\n    safeNonce: safeNonceValidation,\n    safeTxGas: safeTxGasValidation,\n  }\n}\n\nexport const EditTxParametersForm = ({\n  onClose,\n  txParameters,\n  parametersStatus = 'ENABLED',\n  isExecution,\n}: Props): ReactElement => {\n  const classes = useStyles()\n  const { safeNonce, safeTxGas, ethNonce, ethGasLimit, ethGasPrice } = txParameters\n\n  const onSubmit = (values: TxParameters) => {\n    onClose(values)\n  }\n\n  const onCloseFormHandler = () => {\n    onClose()\n  }\n\n  return (\n    <>\n      {/* Header */}\n      <Row align=\"center\" className={classes.heading} grow data-testid=\"send-funds-review-step\">\n        <Title size=\"sm\" withoutMargin>\n          Advanced options\n        </Title>\n        <IconButton disableRipple onClick={onCloseFormHandler}>\n          <Close className={classes.closeIcon} />\n        </IconButton>\n      </Row>\n\n      <StyledDivider />\n\n      <Block className={classes.container}>\n        <GnoForm\n          initialValues={{\n            safeNonce: safeNonce || 0,\n            safeTxGas: safeTxGas || '',\n            ethNonce: ethNonce || '',\n            ethGasLimit: ethGasLimit || '',\n            ethGasPrice: ethGasPrice || '',\n          }}\n          onSubmit={onSubmit}\n          validation={formValidation}\n        >\n          {() => (\n            <>\n              <StyledText size=\"xl\" strong>\n                Jupisky transaction\n              </StyledText>\n\n              <SafeOptions>\n                <Field\n                  name=\"safeNonce\"\n                  defaultValue={safeNonce}\n                  placeholder=\"Jupisky nonce\"\n                  text=\"Jupisky nonce\"\n                  type=\"number\"\n                  min=\"0\"\n                  component={TextField}\n                  disabled={!areSafeParamsEnabled(parametersStatus)}\n                />\n                <Field\n                  name=\"safeTxGas\"\n                  defaultValue={safeTxGas}\n                  placeholder=\"JupiskyTxGas\"\n                  text=\"JupiskyTxGas\"\n                  type=\"number\"\n                  min=\"0\"\n                  component={TextField}\n                  disabled={!areSafeParamsEnabled(parametersStatus)}\n                />\n              </SafeOptions>\n\n              {areEthereumParamsVisible(parametersStatus) && (\n                <>\n                  <StyledTextMt size=\"xl\" strong>\n                    {ethereumTxParametersTitle(isExecution)}\n                  </StyledTextMt>\n\n                  <EthereumOptions>\n                    <Field\n                      name=\"ethNonce\"\n                      defaultValue={ethNonce}\n                      placeholder=\"Nonce\"\n                      text=\"Nonce\"\n                      type=\"number\"\n                      component={TextField}\n                      disabled={!areEthereumParamsVisible(parametersStatus)}\n                    />\n                    <Field\n                      name=\"ethGasLimit\"\n                      defaultValue={ethGasLimit}\n                      placeholder=\"Gas limit\"\n                      text=\"Gas limit\"\n                      type=\"number\"\n                      component={TextField}\n                      disabled={parametersStatus === 'CANCEL_TRANSACTION'}\n                    />\n                    <Field\n                      name=\"ethGasPrice\"\n                      defaultValue={ethGasPrice}\n                      type=\"number\"\n                      placeholder=\"Gas price (GWEI)\"\n                      text=\"Gas price (GWEI)\"\n                      component={TextField}\n                      disabled={!areEthereumParamsVisible(parametersStatus)}\n                    />\n                  </EthereumOptions>\n\n                </>\n              )}\n\n              <StyledDividerFooter />\n\n              {/* Footer */}\n              <Row align=\"center\" className={classes.buttonRow}>\n                <Modal.Footer.Buttons\n                  cancelButtonProps={{ onClick: onCloseFormHandler, text: 'Back' }}\n                  confirmButtonProps={{\n                    type: 'submit',\n                    text: 'Confirm',\n                    testId: 'submit-tx-btn',\n                  }}\n                />\n              </Row>\n            </>\n          )}\n        </GnoForm>\n      </Block>\n    </>\n  )\n}\n","import { useState, useEffect } from 'react'\nimport { TxParameters, useTransactionParameters } from 'src/routes/safe/container/hooks/useTransactionParameters'\nimport { EditTxParametersForm } from 'src/routes/safe/components/Transactions/helpers/EditTxParametersForm'\nimport { ParametersStatus } from './utils'\nimport { useSelector } from 'react-redux'\n\nimport { currentSafeThreshold } from 'src/logic/safe/store/selectors'\n\ntype Props = {\n  children: (txParameters: TxParameters, toggleStatus: (txParameters?: TxParameters) => void) => any\n  isOffChainSignature: boolean\n  isExecution: boolean\n  parametersStatus?: ParametersStatus\n  ethGasLimit?: TxParameters['ethGasLimit']\n  ethGasPrice?: TxParameters['ethGasPrice']\n  safeNonce?: TxParameters['safeNonce']\n  safeTxGas?: TxParameters['safeTxGas']\n  closeEditModalCallback?: (txParameters: TxParameters) => void\n}\n\nexport const EditableTxParameters = ({\n  children,\n  isOffChainSignature,\n  isExecution,\n  parametersStatus,\n  ethGasLimit,\n  ethGasPrice,\n  safeNonce,\n  safeTxGas,\n  closeEditModalCallback,\n}: Props): React.ReactElement => {\n  const [isEditMode, toggleEditMode] = useState(false)\n  const [useManualValues, setUseManualValues] = useState(false)\n  const threshold = useSelector(currentSafeThreshold) || 1\n  const defaultParameterStatus = isOffChainSignature && threshold > 1 ? 'ETH_HIDDEN' : 'ENABLED'\n  const txParameters = useTransactionParameters({\n    parameterStatus: parametersStatus || defaultParameterStatus,\n    initialEthGasLimit: ethGasLimit,\n    initialEthGasPrice: ethGasPrice,\n    initialSafeNonce: safeNonce,\n    initialSafeTxGas: safeTxGas,\n  })\n  const { setEthGasPrice, setEthGasLimit, setSafeNonce, setSafeTxGas, setEthNonce } = txParameters\n\n  // Update TxParameters\n  useEffect(() => {\n    if (!useManualValues) {\n      setEthGasLimit(ethGasLimit)\n      setEthGasPrice(ethGasPrice)\n      setSafeTxGas(safeTxGas)\n    }\n  }, [ethGasLimit, setEthGasLimit, ethGasPrice, setEthGasPrice, useManualValues, safeTxGas, setSafeTxGas])\n\n  const toggleStatus = () => {\n    toggleEditMode((prev) => !prev)\n  }\n\n  const closeEditFormHandler = (txParameters?: TxParameters) => {\n    if (txParameters) {\n      setUseManualValues(true)\n      setSafeNonce(txParameters.safeNonce)\n      setSafeTxGas(txParameters.safeTxGas)\n      setEthGasLimit(txParameters.ethGasLimit)\n      setEthGasPrice(txParameters.ethGasPrice)\n      setEthNonce(txParameters.ethNonce)\n      closeEditModalCallback && closeEditModalCallback(txParameters)\n    }\n    toggleStatus()\n  }\n\n  return isEditMode ? (\n    <EditTxParametersForm\n      isExecution={isExecution}\n      txParameters={txParameters}\n      onClose={closeEditFormHandler}\n      parametersStatus={parametersStatus ? parametersStatus : defaultParameterStatus}\n    />\n  ) : (\n    children(txParameters, toggleStatus)\n  )\n}\n","import { createStyles, makeStyles } from '@material-ui/core'\nimport { sm } from 'src/theme/variables'\nimport { EstimationStatus } from 'src/logic/hooks/useEstimateTransactionGas'\nimport Row from 'src/components/layout/Row'\nimport Paragraph from 'src/components/layout/Paragraph'\nimport Img from 'src/components/layout/Img'\nimport InfoIcon from 'src/assets/icons/info_red.svg'\n\nimport { useSelector } from 'react-redux'\nimport { currentSafeThreshold } from 'src/logic/safe/store/selectors'\nimport { grantedSelector } from 'src/routes/safe/container/selector'\n\nconst styles = createStyles({\n  executionWarningRow: {\n    display: 'flex',\n    alignItems: 'center',\n  },\n  warningIcon: {\n    marginRight: sm,\n  },\n})\n\nconst useStyles = makeStyles(styles)\n\ntype TransactionFailTextProps = {\n  txEstimationExecutionStatus: EstimationStatus\n  isExecution: boolean\n}\n\nexport const TransactionFailText = ({\n  txEstimationExecutionStatus,\n  isExecution,\n}: TransactionFailTextProps): React.ReactElement | null => {\n  const classes = useStyles()\n  const threshold = useSelector(currentSafeThreshold)\n  const isOwner = useSelector(grantedSelector)\n\n  if (txEstimationExecutionStatus !== EstimationStatus.FAILURE && isOwner) {\n    return null\n  }\n\n  let errorMessage = 'To save gas costs, avoid creating the transaction.'\n  if (isExecution) {\n    errorMessage =\n      threshold && threshold > 1\n        ? `To save gas costs, reject this transaction`\n        : `To save gas costs, avoid executing the transaction.`\n  }\n\n  return (\n    <Row align=\"center\">\n      <Paragraph color=\"error\" className={classes.executionWarningRow}>\n        <Img alt=\"Info Tooltip\" height={16} src={InfoIcon} className={classes.warningIcon} />\n\n        {isOwner ? (\n          <>This transaction will most likely fail. {errorMessage}</>\n        ) : (\n          <>You are currently not an owner of this Safe and won&apos;t be able to submit this tx.</>\n        )}\n      </Paragraph>\n    </Row>\n  )\n}\n","import { EstimationStatus } from 'src/logic/hooks/useEstimateTransactionGas'\nimport Paragraph from 'src/components/layout/Paragraph'\nimport { getNetworkInfo } from 'src/config'\nimport { TransactionFailText } from 'src/components/TransactionFailText'\nimport { Text } from '@gnosis.pm/safe-react-components'\n\ntype TransactionFailTextProps = {\n  txEstimationExecutionStatus: EstimationStatus\n  gasCostFormatted?: string\n  isExecution: boolean\n  isCreation: boolean\n  isOffChainSignature: boolean\n}\n\nexport const TransactionFees = ({\n  gasCostFormatted,\n  isExecution,\n  isCreation,\n  isOffChainSignature,\n  txEstimationExecutionStatus,\n}: TransactionFailTextProps): React.ReactElement | null => {\n  const { nativeCoin } = getNetworkInfo()\n  let transactionAction\n  if (txEstimationExecutionStatus === EstimationStatus.LOADING) {\n    return null\n  }\n  if (isCreation) {\n    transactionAction = 'create'\n  } else if (isExecution) {\n    transactionAction = 'execute'\n  } else {\n    transactionAction = 'approve'\n  }\n\n  return (\n    <>\n      {gasCostFormatted != null && (\n        <Paragraph size=\"lg\" align=\"center\">\n          You&apos;re about to {transactionAction} a transaction and will have to confirm it with your currently\n          connected wallet.{' '}\n          {!isOffChainSignature && (\n            <>\n              Make sure you have{' '}\n              <Text size=\"lg\" as=\"span\" color=\"text\" strong>\n                {gasCostFormatted}\n              </Text>{' '}\n              (fee price) {nativeCoin.name} in this wallet to fund this confirmation.\n            </>\n          )}\n        </Paragraph>\n      )}\n      <TransactionFailText txEstimationExecutionStatus={txEstimationExecutionStatus} isExecution={isExecution} />\n    </>\n  )\n}\n","import { Dispatch, SetStateAction, useEffect, useState } from 'react'\n\nimport { EstimationStatus } from './useEstimateTransactionGas'\nimport { ButtonStatus } from 'src/components/Modal'\n\nexport const useEstimationStatus = (\n  txEstimationStatus?: EstimationStatus,\n): [buttonStatus: ButtonStatus, setButtonStatus: Dispatch<SetStateAction<ButtonStatus>>] => {\n  const [buttonStatus, setButtonStatus] = useState<ButtonStatus>(ButtonStatus.DISABLED)\n\n  useEffect(() => {\n    let mounted = true\n\n    if (mounted) {\n      switch (txEstimationStatus) {\n        case EstimationStatus.LOADING:\n          setButtonStatus(ButtonStatus.LOADING)\n          break\n        default:\n          setButtonStatus(ButtonStatus.READY)\n          break\n      }\n    }\n\n    return () => {\n      mounted = false\n    }\n  }, [txEstimationStatus])\n\n  return [buttonStatus, setButtonStatus]\n}\n","export default __webpack_public_path__ + \"static/media/info_red.2d444d88.svg\";","import { useEffect, useState } from 'react'\nimport { useSelector } from 'react-redux'\nimport { getUserNonce } from 'src/logic/wallets/ethTransactions'\nimport { userAccountSelector } from 'src/logic/wallets/store/selectors'\nimport { getLastTx, getNewTxNonce } from 'src/logic/safe/store/actions/utils'\nimport { getGnosisSafeInstanceAt } from 'src/logic/contracts/safeContracts'\nimport { currentSafeCurrentVersion } from 'src/logic/safe/store/selectors'\nimport { ParametersStatus } from 'src/routes/safe/components/Transactions/helpers/utils'\nimport { sameString } from 'src/utils/strings'\nimport { getWeb3ReadOnly } from 'src/logic/wallets/getWeb3'\nimport { extractSafeAddress } from 'src/routes/routes'\n\nexport type TxParameters = {\n  safeNonce: string | undefined\n  setSafeNonce: (safeNonce: string | undefined) => void\n  safeTxGas: string | undefined\n  setSafeTxGas: (gas: string | undefined) => void\n  ethNonce: string | undefined\n  setEthNonce: (ethNonce: string | undefined) => void\n  ethGasLimit: string | undefined\n  setEthGasLimit: (ethGasLimit: string | undefined) => void\n  ethGasPrice: string | undefined\n  setEthGasPrice: (ethGasPrice: string | undefined) => void\n  ethGasPriceInGWei: string | undefined\n}\n\ntype Props = {\n  parameterStatus?: ParametersStatus\n  initialSafeNonce?: string\n  initialSafeTxGas?: string\n  initialEthGasLimit?: string\n  initialEthGasPrice?: string\n}\n\n/**\n * This hooks is used to store tx parameter\n * It needs to be initialized calling setGasEstimation.\n */\nexport const useTransactionParameters = (props?: Props): TxParameters => {\n  const web3 = getWeb3ReadOnly()\n  const isCancelTransaction = sameString(props?.parameterStatus || 'ENABLED', 'CANCEL_TRANSACTION')\n  const connectedWalletAddress = useSelector(userAccountSelector)\n  const safeAddress = extractSafeAddress()\n  const safeVersion = useSelector(currentSafeCurrentVersion) as string\n\n  // Safe Params\n  const [safeNonce, setSafeNonce] = useState<string | undefined>(props?.initialSafeNonce)\n  // SafeTxGas: for a new Tx call requiredTxGas, for an existing tx get it from the backend.\n  const [safeTxGas, setSafeTxGas] = useState<string | undefined>(isCancelTransaction ? '0' : props?.initialSafeTxGas)\n\n  // ETH Params\n  const [ethNonce, setEthNonce] = useState<string | undefined>() // we delegate it to the wallet\n  const [ethGasLimit, setEthGasLimit] = useState<string | undefined>(props?.initialEthGasLimit) // call execTx until it returns a number > 0\n  const [ethGasPrice, setEthGasPrice] = useState<string | undefined>(props?.initialEthGasPrice) // get fast gas price\n  const [ethGasPriceInGWei, setEthGasPriceInGWei] = useState<string | undefined>() // get fast gas price\n\n  // Get nonce for connected wallet\n  useEffect(() => {\n    const getNonce = async () => {\n      const res = await getUserNonce(connectedWalletAddress)\n      setEthNonce(res.toString())\n    }\n\n    if (connectedWalletAddress) {\n      getNonce()\n    }\n  }, [connectedWalletAddress])\n\n  // Get ETH gas price\n  useEffect(() => {\n    if (!ethGasPrice) {\n      setEthGasPriceInGWei(undefined)\n      return\n    }\n    if (isCancelTransaction) {\n      setEthGasPrice('0')\n      return\n    }\n    setEthGasPriceInGWei(web3.utils.toWei(ethGasPrice, 'Gwei'))\n  }, [ethGasPrice, isCancelTransaction, web3])\n\n  // Calc safe nonce\n  useEffect(() => {\n    const getSafeNonce = async () => {\n      if (safeAddress) {\n        const safeInstance = getGnosisSafeInstanceAt(safeAddress, safeVersion)\n        const lastTx = await getLastTx(safeAddress)\n        const nonce = await getNewTxNonce(lastTx, safeInstance)\n        setSafeNonce(nonce)\n      }\n    }\n\n    if (safeNonce === undefined) {\n      getSafeNonce()\n    }\n  }, [safeAddress, safeVersion, safeNonce])\n\n  return {\n    safeNonce,\n    setSafeNonce,\n    safeTxGas,\n    setSafeTxGas,\n    ethNonce,\n    setEthNonce,\n    ethGasLimit,\n    setEthGasLimit,\n    ethGasPrice,\n    setEthGasPrice,\n    ethGasPriceInGWei,\n  }\n}\n","export type ParametersStatus = 'ENABLED' | 'DISABLED' | 'SAFE_DISABLED' | 'ETH_HIDDEN' | 'CANCEL_TRANSACTION'\n\nexport const areEthereumParamsVisible = (parametersStatus: ParametersStatus): boolean => {\n  return (\n    parametersStatus === 'ENABLED' || (parametersStatus !== 'ETH_HIDDEN' && parametersStatus !== 'CANCEL_TRANSACTION')\n  )\n}\n\nexport const areSafeParamsEnabled = (parametersStatus: ParametersStatus): boolean => {\n  return (\n    parametersStatus === 'ENABLED' ||\n    (parametersStatus !== 'SAFE_DISABLED' && parametersStatus !== 'CANCEL_TRANSACTION')\n  )\n}\n\nexport const ethereumTxParametersTitle = (isExecution: boolean): string => {\n  return `Owner transaction ${isExecution ? '(Execution)' : '(On-chain approval)'}`\n}\n"],"sourceRoot":""}