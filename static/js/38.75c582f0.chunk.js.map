{"version":3,"sources":["routes/safe/components/Balances/utils/setTokenImgToPlaceholder.ts","routes/safe/components/Balances/assets/token_placeholder.svg","components/layout/Bold/index.tsx","routes/safe/components/Balances/SendModal/screens/ContractInteraction/utils/index.ts","components/ExecuteCheckbox/index.tsx","../node_modules/final-form-calculate/dist/final-form-calculate.es.js","routes/safe/components/Settings/SpendingLimit/style.ts","routes/safe/components/Settings/SpendingLimit/FormFields/ResetTime.tsx","routes/safe/components/Settings/SpendingLimit/FormFields/Amount.tsx","routes/safe/components/Settings/SpendingLimit/InfoDisplay/AddressInfo.tsx","routes/safe/components/Settings/SpendingLimit/InfoDisplay/ResetTimeInfo.tsx","routes/safe/components/Settings/SpendingLimit/InfoDisplay/TokenInfo.tsx","logic/safe/hooks/useTokenInfo.tsx","routes/safe/components/Transactions/TxList/assets/custom.svg","../node_modules/@material-ui/core/esm/Divider/Divider.js","../node_modules/@material-ui/icons/MoreHoriz.js","routes/safe/components/Transactions/TxList/hooks/usePagedHistoryTransactions.ts","routes/safe/components/Transactions/TxList/hooks/useHistoryTransactions.ts","routes/safe/components/Transactions/TxList/styled.tsx","../../src/observe.ts","../../src/InView.tsx","components/InfiniteScroll/index.tsx","../../src/useInView.tsx","routes/safe/components/Transactions/TxList/TxsInfiniteScroll.tsx","routes/safe/components/Transactions/TxList/hooks/useAssetInfo.ts","routes/safe/components/Transactions/TxList/hooks/useTransactionStatus.ts","routes/safe/components/Transactions/TxList/assets/circle-cross-red.svg","routes/safe/components/Transactions/TxList/assets/incoming.svg","routes/safe/components/Transactions/TxList/assets/outgoing.svg","routes/safe/components/Transactions/TxList/assets/settings.svg","routes/safe/components/Transactions/TxList/hooks/useKnownAddress.ts","routes/safe/components/Transactions/TxList/hooks/useTransactionType.ts","components/CustomIconText/index.tsx","routes/safe/components/Transactions/TxList/TxLocationProvider.tsx","routes/safe/components/Transactions/TxList/hooks/useTransactionActions.ts","routes/safe/components/Transactions/TxList/TxActionProvider.tsx","routes/safe/components/Transactions/TxList/TxHoverProvider.tsx","routes/safe/components/Transactions/TxList/hooks/useActionButtonsHandlers.ts","routes/safe/components/Transactions/TxList/TxCollapsedActions.tsx","routes/safe/components/Transactions/TxList/TokenTransferAmount.tsx","routes/safe/components/Transactions/TxList/TxCollapsed.tsx","routes/safe/components/Transactions/TxList/TxHistoryCollapsed.tsx","routes/safe/components/Transactions/TxList/SpendingLimitDetails.tsx","routes/safe/components/AddressBook/EllipsisTransactionDetails/index.tsx","routes/safe/components/Transactions/TxList/AddressInfo.tsx","routes/safe/components/Transactions/TxList/InfoDetails.tsx","routes/safe/components/Transactions/TxList/TxInfoDetails.tsx","routes/safe/components/Transactions/TxList/HexEncodedData.tsx","routes/safe/components/Transactions/TxList/MethodValue.tsx","routes/safe/components/Transactions/TxList/MethodDetails.tsx","routes/safe/components/Transactions/TxList/MultiSendDetails.tsx","routes/safe/components/Transactions/TxList/TxData.tsx","routes/safe/components/Transactions/TxList/TxExpandedActions.tsx","routes/safe/components/Transactions/TxList/TxInfoSettings.tsx","routes/safe/components/Transactions/TxList/TxInfoTransfer.tsx","routes/safe/components/Transactions/TxList/TxInfo.tsx","routes/safe/components/Transactions/TxList/assets/transactions-list-active.svg","routes/safe/components/Transactions/TxList/assets/transactions-list-inactive.svg","routes/safe/components/Transactions/TxList/TxOwners.tsx","routes/safe/components/Transactions/TxList/TxSummary.tsx","routes/safe/components/Transactions/TxList/TxDetails.tsx","routes/safe/components/Transactions/TxList/hooks/useTransactionDetails.ts","routes/safe/components/Transactions/TxList/TxInfoCreation.tsx","routes/safe/components/Transactions/TxList/TxHistoryRow.tsx","routes/safe/components/Transactions/TxList/HistoryTxList.tsx","routes/safe/components/Transactions/TxList/assets/no-transactions.svg","routes/safe/components/Transactions/TxList/HistoryTransactions.tsx","routes/safe/components/Transactions/TxList/modals/style.ts","logic/safe/store/models/confirmation.ts","routes/safe/components/Transactions/TxList/modals/ApproveTxModal.tsx","logic/safe/store/actions/processTransaction.ts","routes/safe/components/Transactions/TxList/modals/RejectTxModal.tsx","routes/safe/components/Transactions/TxList/ActionModal.tsx","routes/safe/components/Transactions/TxList/hooks/usePagedQueuedTransactions.ts","routes/safe/components/Transactions/TxList/hooks/useQueueTransactions.ts","routes/safe/components/Transactions/TxList/TxQueueCollapsed.tsx","routes/safe/components/Transactions/TxList/TxQueueRow.tsx","routes/safe/components/Transactions/TxList/QueueTxList.tsx","routes/safe/components/Transactions/TxList/QueueTransactions.tsx","routes/safe/components/Transactions/TxList/index.tsx"],"names":["setImageToPlaceholder","event","img","currentTarget","test","src","TokenPlaceholder","Bold","this","props","children","React","NO_CONTRACT","ensResolver","createDecorator","field","updates","contractAddress","a","isValidEnsName","isValidCryptoDomainName","getAddressFromDomain","resolvedAddress","console","error","message","formMutators","setMax","args","state","utils","changeValue","setContractAddress","setSelectedMethod","lastFormState","values","selectedMethod","name","setCallResults","setAbiValue","isAddress","type","indexOf","isBoolean","isUint","isInt","isByte","isArrayParameter","parameter","handleSubmitError","key","hasOwnProperty","undefined","value","reason","FORM_ERROR","generateFormFieldKey","signatureHash","index","keyType","extractMethodArgs","JSON","parse","map","Number","isInteger","BigNumber","toString","err","getParsedJSONOrArrayFromString","createTxObject","method","contract","getWeb3","eth","Contract","inputs","methods","isReadMethod","action","getValueFromTxInputs","tx","replace","String","ExecuteCheckbox","onChange","margin","noMargin","control","defaultChecked","color","e","target","checked","label","isPromise","obj","then","tripleEquals","b","_len","arguments","length","calculations","Array","_key","form","previousValues","subscribe","_ref","batch","runUpdates","isEqual","next","getIn","previous","results","resolved","Object","keys","forEach","destField","change","result","update","fields","getRegisteredFields","_ref2","matches","isArray","findIndex","f","RegExp","fieldName","useStyles","makeStyles","createStyles","title","padding","lg","paddingBottom","hide","backgroundColor","visibility","actions","justifyContent","noBorderBottom","borderBottom","annotation","paddingLeft","ownersText","secondaryText","fontColor","container","actionButton","fontWeight","boldFont","marginRight","sm","buttonRow","left","bottom","boxSizing","width","borderTop","border","modifyBtn","height","xl","fontSize","smallFontSize","removeModuleIcon","marginLeft","cursor","modalHeading","modalContainer","minHeight","modalManage","modalClose","modalButtonRow","modalButtonRemove","modalName","textOverflow","overflow","modalUserName","whiteSpace","modalOwner","background","md","alignItems","modalUser","modalDescription","modalOpen","amountInput","gasCostsContainer","SpendingLimitRadioButtons","styled","RadioButtons","theme","colors","primary","StyledSwitch","rest","icon","hexToRgb","primaryLight","SafeRadioButtons","options","initialValue","groupName","input","onRadioChange","Switch","render","ResetTimeLabel","div","ResetTimeToggle","ResetTimeOptions","RESET_TIME_OPTIONS","RINKEBY_RESET_TIME_OPTIONS","getResetTimeOptions","getNetworkName","toLowerCase","ResetTime","withResetTime","useField","subscription","resetTimeOptions","switchExplanation","size","Field","GnoField","AmountInput","TextField","SRCTextField","Amount","classes","tokenAddress","touched","visited","meta","selectedTokenRecord","useSelector","extendedSafeTokensSelector","find","token","address","validate","composeValidators","required","mustBeFloat","minValue","component","endAdornment","symbol","className","AddressInfo","addressBookEntryName","explorerUrl","getExplorerInfo","strong","hash","sameString","ADDRESS_BOOK_DEFAULT_NAME","showCopyBtn","showAvatar","textSize","ResetTimeInfo","Row","align","iconSize","iconType","text","StyledImage","StyledImageName","TokenInfo","amount","alt","onError","logoUri","useTokenInfo","tokens","safeKnownCoins","sameAddress","Divider","ref","_props$absolute","absolute","_props$component","Component","_props$flexItem","flexItem","_props$light","light","_props$orientation","orientation","_props$role","role","_props$variant","variant","other","_objectWithoutProperties","_extends","clsx","root","vertical","withStyles","flexShrink","palette","divider","position","inset","alpha","middle","spacing","alignSelf","_interopRequireDefault","require","_interopRequireWildcard","defineProperty","exports","default","_default","createElement","d","usePagedHistoryTransactions","historyTxs","historyTransactions","useState","count","setCount","useEffect","history","entries","reduce","acc","transactions","useHistoryTransactions","chainId","currentChainId","dispatch","useRef","useDispatch","safeAddress","extractSafeAddress","hasMore","setHasMore","isLoading","setIsLoading","useCallback","loadPagedHistoryTransactions","current","content","Errors","_608","log","addHistoryTransactions","isTail","Wrapper","ContentWrapper","ColumnDisplayAccordionDetails","AccordionDetails","NoPaddingAccordion","Accordion","ActionAccordion","StyledTransactionsGroup","SubTitle","h2","Text","placeHolder","StyledTransactions","white","GroupedTransactionsCard","separator","inputField","gridColumns","nonce","info","time","votes","status","willBeReplaced","css","failedTransaction","onChainRejection","errorTooltip","StyledTransaction","join","StyledGroupedTransactions","slice","GroupedTransactions","DisclaimerContainer","TxDetailsContainer","errorHover","secondary","OwnerList","ul","OwnerListItem","li","InlineEthHashInfo","EthHashInfo","StyledScrollableBar","ScrollableTransactionsContainer","Centered","HorizontallyCentered","isVisible","StyledAccordionSummary","AccordionSummary","AlignItemsWithMargin","NoTransactions","ObserverMap","RootIds","rootId","optionsToId","observe","element","callback","id","instance","elements","observer","IntersectionObserver","inView","entry","thresholds","createObserver","callbacks","isPlainChildren","InView","node","_unobserveCb","handleNode","handleChange","componentDidUpdate","prevProps","componentWillUnmount","observeNode","threshold","rootMargin","trackVisibility","delay","unobserve","as","tag","displayName","defaultProps","triggerOnce","initialInView","INFINITE_SCROLL_CONTAINER","InfiniteScrollContext","createContext","setLastItemId","InfiniteScrollProvider","forwardRef","lastItemId","_setLastItemId","Provider","itemId","setTimeout","InfiniteScroll","config","useInView","skip","setState","setRef","document","querySelector","TxsInfiniteScroll","defaultTokenTransferAsset","NOT_AVAILABLE","directionSign","amountWithSymbol","tokenType","useAssetInfo","txInfo","asset","setAsset","getTxAmount","isTransferTxInfo","direction","transferInfo","TokenType","ERC20","tokenName","ERC721","NATIVE_COIN","nativeCoin","getNetworkInfo","isSettingsChangeTxInfo","isCustomTxInfo","useTransactionStatus","transaction","currentUser","userAccountSelector","setStatus","isStatusSuccess","txStatus","isStatusFailed","isStatusCancelled","isStatusWillBeReplaced","signaturePending","addressInList","executionInfo","missingSigners","useKnownAddress","ZERO_ADDRESS","image","recipientName","isInAddressBook","isAddressBook","useTransactionType","CustomTxIcon","setType","toAddress","getTxTo","knownAddressBookAddress","SettingsTxIcon","isSendTx","OutgoingTxIcon","IncomingTxIcon","dataDecoded","isCancellation","CircleCrossRed","safeAppInfo","fallbackIcon","CustomIconText","iconUrl","iconUrlFallback","showHash","avatarSize","customAvatar","customAvatarFallback","TxLocationContext","txLocation","setTxLocation","useTransactionActions","isUserAnOwner","grantedSelector","useContext","confirmationsSubmitted","confirmationsRequired","transactionsByNonce","getQueuedTransactionsByNonce","attributeName","attributeValue","canConfirm","canConfirmThenExecute","canExecute","canCancel","oneToGo","currentUserSigned","some","missingSigner","includes","prev","TransactionActionStateContext","selectedAction","actionSelected","transactionId","selectAction","Promise","resolve","TxActionProvider","setSelectedAction","fetchTransactionDetails","TxHoverContext","activeHover","setActiveHover","TxHoverProvider","useActionButtonsHandlers","actionContext","hoverContext","locationContext","handleConfirmButtonClick","stopPropagation","txDetails","detailedExecutionInfo","details","confirmations","enqueueSnackbar","NOTIFICATIONS","TX_FETCH_SIGNATURES_ERROR_MSG","handleCancelButtonClick","handleOnMouseEnter","handleOnMouseLeave","isPending","useMemo","match","disabledActions","IconButton","MuiIconButton","TxCollapsedActions","currentSafeNonce","getTitle","placement","onClick","disabled","onMouseEnter","onMouseLeave","AmountWrapper","TokenTransferAmount","assetInfo","Img","onerror","NFTIcon","TxInfo","settingsInfo","disableInfo","KNOWN_MODULES","module","isMultiSendTxInfo","actionCount","methodName","CircularProgressPainter","SmallDot","Dot","IconText","IconTextSrc","TooltipContent","TxCollapsed","isGrouped","TxsInfiniteScrollContext","isCancelTxDetails","txCollapsedNonce","txCollapsedType","txCollapsedInfo","timestamp","txCollapsedTime","formatDateTime","arrow","formatTime","formatTimeInWords","txCollapsedVotes","submitted","txCollapsedActions","txCollapsedStatus","TxHistoryCollapsed","isSetAllowance","isDeleteAllowance","SpendingLimitRow","ModifySpendingLimitDetails","data","parameters","beneficiary","resetTimeMin","resetTimeLabel","tokenInfo","fromTokenUnit","decimals","DeleteSpendingLimitDetails","display","xs","borderRadius","transition","outline","increasedPopperZindex","zIndex","EllipsisTransactionDetails","sendModalOpenHandler","anchorEl","setAnchorEl","isOwnerConnected","isStoredInAddressBook","handleClick","closeMenuHandler","addOrEditEntryHandler","push","pathname","generateSafeRoute","SAFE_ROUTES","ADDRESS_BOOK","shortName","getCurrentShortChainName","search","ClickAwayListener","onClickAway","tabIndex","onKeyDown","Menu","keepMounted","onClose","open","Boolean","MenuItem","avatarUrl","toInfo","InfoDetails","SingleRow","TxInfoDetails","isTransferType","canRepeatTransaction","sendModalOpen","setSendModalOpen","activeScreenType","recipientAddress","selectedToken","tokenAmount","sendModalParams","setSendModalParams","isCollectible","getTxTokenData","SendModal","isOpen","styles","txDataParagraph","linkTxData","textDecoration","HexEncodedData","hexData","limit","showTxData","setShowTxData","showExpandBtn","shortener","textShortener","charsStart","charsEnd","Paragraph","Link","rel","NestedWrapper","GenericValue","getTextValue","getArrayValue","parentId","currentValue","Value","shortenHash","TxDetailsMethodParam","StyledMethodName","MethodDetails","param","MultiSendTxGroup","actionTitle","MultiSendDetails","txData","valueDecoded","valuesDecoded","to","DetailsWithTxInfo","TxData","TxExpandedActions","getConfirmTooltipTitle","TxInfoSettings","handler","owner","oldOwner","newOwner","implementation","TxInfoTransfer","setDetails","toUpperCase","sender","recipient","StyledImg","TxOwners","isModuleExecutionInfo","confirmationsNeeded","CreationNode","signer","executor","TransactionListActive","TransactionListInactive","TxSummary","txHash","executedAt","isMultiSigExecutionDetails","created","submittedAt","safeTxHash","operation","Operation","DELEGATE","NormalBreakingText","TxDataGroup","txNonce","isTxExecuted","href","TxDetails","loading","setTxDetails","getTransactionDetails","useTransactionDetails","cn","TxInfoCreation","creator","factory","transactionHash","TxHistoryRow","TransitionProps","mountOnEnter","unmountOnExit","appear","isCreationTxInfo","HistoryTxList","lastTransactionsGroup","lastTransaction","txs","formatWithSchema","HistoryTransactions","NoTransactionsImage","nonceNumber","marginTop","makeConfirmation","Record","signature","ApproveTxModal","isCancelTx","userAddress","approveAndExecute","setApproveAndExecute","thresholdReached","isThresholdReached","_threshold","_countingCurrentConfirmation","modalInfo","description","getModalTitleAndDescription","oneConfirmationLeft","isTheTxReadyToBeExecuted","manualGasPrice","setManualGasPrice","manualGasLimit","setManualGasLimit","t","List","EMPTY_DATA","baseGas","gasPrice","safeTxGas","gasToken","refundReceiver","CALL","origin","stringify","url","useTxInfo","useEstimateTransactionGas","txRecipient","txConfirmations","txAmount","preApprovingOwner","gasLimit","gasPriceFormatted","gasCostFormatted","txEstimationExecutionStatus","isExecution","isOffChainSignature","isCreation","doExecute","useEstimationStatus","buttonStatus","approveTx","txParameters","notifiedTransaction","ethParameters","getState","onboardUser","providerSelector","from","account","hardwareWallet","smartContractWallet","safeVersion","currentSafeCurrentVersion","safeInstance","getGnosisSafeInstanceAt","getLastTx","lastTx","getNewTxNonce","shouldExecuteTransaction","sigs","generateSignaturesFromTxConfirmations","getPreValidatedSignatures","notificationsQueue","getNotificationsFromTxType","beforeExecutionKey","beforeExecution","txArgs","valueInWei","checkIfOffChainSignatureIsPossible","tryOffChainSigning","closeSnackbarAction","updateTransactionStatus","TransactionStatus","PENDING","saveTxToHistory","fetchTransactions","getExecutionTransaction","getApprovalTransaction","gasParam","getNetworkId","ETHEREUM_NETWORK","MAINNET","gas","ethGasLimit","ethGasPriceInGWei","ethNonce","sendParams","send","once","aboutToExecuteTx","logError","_804","on","PENDING_FAILED","receipt","fetchSafe","notification","isTxPendingError","TX_PENDING_MSG","afterExecutionError","code","executeData","approveHash","encodeABI","getErrorMessage","errMsg","processTransaction","TX_NOTIFICATION_TYPES","CONFIRMATION_TX","getParametersStatus","Modal","handleClose","EditableTxParameters","parametersStatus","ethGasPrice","safeNonce","closeEditModalCallback","oldGasPrice","newGasPrice","toggleEditMode","ModalHeader","Hairline","Block","style","flexDirection","TxParametersDetail","onEdit","isTransactionCreation","isTransactionExecution","EstimationStatus","LOADING","Footer","withoutBorder","ButtonStatus","Buttons","cancelButtonProps","confirmButtonProps","testId","RejectTxModal","gwTransaction","confirmButtonStatus","READY","confirmButtonText","createTransaction","CANCELLATION_TX","navigateToTransactionsTab","sendReplacementTransaction","ActionModal","useTransactionParameters","getTransactionByAttribute","usePagedQueuedTransactions","nextTxs","nextTransactions","queuedTxs","queuedTransactions","txsCount","setTxsCount","queued","queue","useQueueTransactions","nextPage","loadPagedQueuedTransactions","addQueuedTransactions","TxQueueCollapsed","calculateVotes","TxQueueRow","setTx","currTx","WILL_BE_REPLACED","TreeView","firstElement","Disclaimer","QueueTransaction","QueueTxList","QueueTransactions","TRANSACTION_TABS","TRANSACTIONS_QUEUE","TRANSACTIONS_HISTORY","GatewayTransactions","useHistory","selectedTab","useRouteMatch","path","trackEvent","useAnalytics","SAFE_EVENTS","TRANSACTIONS","Col","start","extractPrefixedSafeAddress","items","exact"],"mappings":"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","file":"static/js/38.75c582f0.chunk.js","sourcesContent":["import { SyntheticEvent } from 'react'\n\nimport TokenPlaceholder from 'src/routes/safe/components/Balances/assets/token_placeholder.svg'\n\nexport const setImageToPlaceholder = (event: SyntheticEvent<HTMLImageElement, Event>): void => {\n  const img = event.currentTarget\n  if (!/token_placeholder/.test(img.src)) {\n    img.src = TokenPlaceholder\n  }\n}\n","export default __webpack_public_path__ + \"static/media/token_placeholder.c1abe466.svg\";","import * as React from 'react'\n\nclass Bold extends React.PureComponent<any> {\n  render() {\n    const { children, ...props } = this.props\n\n    return <b {...props}>{children}</b>\n  }\n}\n\nexport default Bold\n","import { FORM_ERROR, Mutator, SubmissionErrors } from 'final-form'\nimport createDecorator from 'final-form-calculate'\nimport { ContractSendMethod } from 'web3-eth-contract'\n\nimport { AbiItemExtended } from 'src/logic/contractInteraction/sources/ABIService'\nimport { getAddressFromDomain, getWeb3 } from 'src/logic/wallets/getWeb3'\nimport { TransactionReviewType } from 'src/routes/safe/components/Balances/SendModal/screens/ContractInteraction/Review'\nimport { isValidCryptoDomainName, isValidEnsName } from 'src/logic/wallets/ethAddresses'\nimport { BigNumber } from 'bignumber.js'\n\nexport const NO_CONTRACT = 'no contract'\n\nexport const ensResolver = createDecorator({\n  field: 'contractAddress',\n  updates: {\n    contractAddress: async (contractAddress) => {\n      try {\n        const resolvedAddress =\n          (isValidEnsName(contractAddress) || isValidCryptoDomainName(contractAddress)) &&\n          (await getAddressFromDomain(contractAddress))\n\n        if (resolvedAddress) {\n          return resolvedAddress\n        }\n\n        return contractAddress\n      } catch (e) {\n        console.error(e.message)\n        return contractAddress\n      }\n    },\n  },\n})\n\nexport const formMutators: Record<string, Mutator<{ selectedMethod: { name: string } }>> = {\n  setMax: (args, state, utils) => {\n    utils.changeValue(state, 'value', () => args[0])\n  },\n  setContractAddress: (args, state, utils) => {\n    utils.changeValue(state, 'contractAddress', () => args[0])\n  },\n  setSelectedMethod: (args, state, utils) => {\n    const modified =\n      state.lastFormState?.values.selectedMethod && state.lastFormState.values.selectedMethod.name !== args[0].name\n\n    if (modified) {\n      utils.changeValue(state, 'callResults', () => '')\n      utils.changeValue(state, 'value', () => '')\n    }\n\n    utils.changeValue(state, 'selectedMethod', () => args[0])\n  },\n  setCallResults: (args, state, utils) => {\n    utils.changeValue(state, 'callResults', () => args[0])\n  },\n  setAbiValue: (args, state, utils) => {\n    utils.changeValue(state, 'abi', () => args[0])\n  },\n}\n\nexport const isAddress = (type: string): boolean => type.indexOf('address') === 0\nexport const isBoolean = (type: string): boolean => type.indexOf('bool') === 0\nexport const isString = (type: string): boolean => type.indexOf('string') === 0\nexport const isUint = (type: string): boolean => type.indexOf('uint') === 0\nexport const isInt = (type: string): boolean => type.indexOf('int') === 0\nexport const isByte = (type: string): boolean => type.indexOf('byte') === 0\n\nexport const isArrayParameter = (parameter: string): boolean => /(\\[\\d*])+$/.test(parameter)\nexport const getParsedJSONOrArrayFromString = (parameter: string): (string | number)[] | null => {\n  try {\n    const arrayResult = JSON.parse(parameter)\n    return arrayResult.map((value) => {\n      if (Number.isInteger(value)) {\n        return new BigNumber(value).toString()\n      }\n      return value\n    })\n  } catch (err) {\n    return null\n  }\n}\n\nexport const handleSubmitError = (error: SubmissionErrors, values: Record<string, string>): Record<string, string> => {\n  for (const key in values) {\n    if (values.hasOwnProperty(key) && error !== undefined && values[key] === error.value) {\n      return { [key]: error.reason }\n    }\n  }\n\n  // .call() failed and we're logging a generic error\n  return { [FORM_ERROR]: error ? error.message : undefined }\n}\n\nexport const generateFormFieldKey = (type: string, signatureHash: string, index: number): string => {\n  const keyType = isArrayParameter(type) ? 'arrayParam' : type\n  return `methodInput-${signatureHash}_${index}_${keyType}`\n}\n\nconst extractMethodArgs =\n  (signatureHash: string, values: Record<string, string>) =>\n  ({ type }, index) => {\n    const key = generateFormFieldKey(type, signatureHash, index)\n\n    return getParsedJSONOrArrayFromString(values[key]) || values[key]\n  }\n\nexport const createTxObject = (\n  method: AbiItemExtended,\n  contractAddress: string,\n  values: Record<string, string>,\n): ContractSendMethod => {\n  const web3 = getWeb3()\n  const contract = new web3.eth.Contract([method], contractAddress)\n  const { inputs, name = '', signatureHash } = method\n  const args = inputs?.map(extractMethodArgs(signatureHash, values)) || []\n\n  return contract.methods[name](...args)\n}\n\nexport const isReadMethod = (method: AbiItemExtended): boolean => method && method.action === 'read'\n\nexport const getValueFromTxInputs = (key: string, type: string, tx: TransactionReviewType): string => {\n  if (isArrayParameter(type)) {\n    key = key.replace('[]', '')\n  }\n\n  let value = tx[key]\n\n  if (type === 'bool') {\n    value = String(value)\n  }\n\n  return value\n}\n","import { ReactElement } from 'react'\nimport { Checkbox, FormControlLabel } from '@material-ui/core'\nimport Row from 'src/components/layout/Row'\nimport Paragraph from '../layout/Paragraph'\n\ninterface ExecuteCheckboxProps {\n  onChange: (val: boolean) => unknown\n}\n\nconst ExecuteCheckbox = ({ onChange }: ExecuteCheckboxProps): ReactElement | null => {\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\n    onChange(e.target.checked)\n  }\n  return (\n    <Row margin=\"md\">\n      <Paragraph noMargin>\n        If you want to sign the transaction now but manually execute it later, click on the checkbox below.\n      </Paragraph>\n      <FormControlLabel\n        control={<Checkbox defaultChecked color=\"primary\" onChange={handleChange} />}\n        label=\"Execute transaction\"\n        data-testid=\"execute-checkbox\"\n      />\n    </Row>\n  )\n}\n\nexport default ExecuteCheckbox\n","import { getIn } from 'final-form';\n\nvar isPromise = (function (obj) {\n  return !!obj && (typeof obj === 'object' || typeof obj === 'function') && typeof obj.then === 'function';\n});\n\n//      \n\nvar tripleEquals = function tripleEquals(a, b) {\n  return a === b;\n};\n\nvar createDecorator = function createDecorator() {\n  for (var _len = arguments.length, calculations = new Array(_len), _key = 0; _key < _len; _key++) {\n    calculations[_key] = arguments[_key];\n  }\n\n  return function (form) {\n    var previousValues = {};\n    var unsubscribe = form.subscribe(function (_ref) {\n      var values = _ref.values;\n      form.batch(function () {\n        var runUpdates = function runUpdates(field, isEqual, updates) {\n          var next = values && getIn(values, field);\n          var previous = previousValues && getIn(previousValues, field);\n\n          if (!isEqual(next, previous)) {\n            if (typeof updates === 'function') {\n              var results = updates(next, field, values, previousValues);\n\n              if (isPromise(results)) {\n                results.then(function (resolved) {\n                  Object.keys(resolved).forEach(function (destField) {\n                    form.change(destField, resolved[destField]);\n                  });\n                });\n              } else {\n                Object.keys(results).forEach(function (destField) {\n                  form.change(destField, results[destField]);\n                });\n              }\n            } else {\n              Object.keys(updates).forEach(function (destField) {\n                var update = updates[destField];\n                var result = update(next, values, previousValues);\n\n                if (isPromise(result)) {\n                  result.then(function (resolved) {\n                    form.change(destField, resolved);\n                  });\n                } else {\n                  form.change(destField, result);\n                }\n              });\n            }\n          }\n        };\n\n        var fields = form.getRegisteredFields();\n        calculations.forEach(function (_ref2) {\n          var field = _ref2.field,\n              isEqual = _ref2.isEqual,\n              updates = _ref2.updates;\n\n          if (typeof field === 'string') {\n            runUpdates(field, isEqual || tripleEquals, updates);\n          } else {\n            // field is a either array or regex\n            var matches = Array.isArray(field) ? function (name) {\n              return ~field.indexOf(name) || field.findIndex(function (f) {\n                return f instanceof RegExp && f.test(name);\n              }) !== -1;\n            } : function (name) {\n              return field.test(name);\n            };\n            fields.forEach(function (fieldName) {\n              if (matches(fieldName)) {\n                runUpdates(fieldName, isEqual || tripleEquals, updates);\n              }\n            });\n          }\n        });\n        previousValues = values;\n      });\n    }, {\n      values: true\n    });\n    return unsubscribe;\n  };\n};\n\n//\n\nexport default createDecorator;\n","import { createStyles, makeStyles } from '@material-ui/core'\nimport {\n  background,\n  boldFont,\n  border,\n  error,\n  fontColor,\n  lg,\n  md,\n  secondaryText,\n  sm,\n  smallFontSize,\n  xl,\n} from 'src/theme/variables'\n\nexport const useStyles = makeStyles(\n  createStyles({\n    title: {\n      padding: lg,\n      paddingBottom: 0,\n    },\n    hide: {\n      '&:hover': {\n        backgroundColor: '#f7f5f5',\n      },\n      '&:hover $actions': {\n        visibility: 'initial',\n      },\n    },\n    actions: {\n      justifyContent: 'flex-end',\n      visibility: 'hidden',\n    },\n    noBorderBottom: {\n      '& > td': {\n        borderBottom: 'none',\n      },\n    },\n    annotation: {\n      paddingLeft: lg,\n    },\n    ownersText: {\n      color: secondaryText,\n      '& b': {\n        color: fontColor,\n      },\n    },\n    container: {\n      padding: lg,\n    },\n    actionButton: {\n      fontWeight: boldFont,\n      marginRight: sm,\n    },\n    buttonRow: {\n      padding: lg,\n      left: 0,\n      bottom: 0,\n      boxSizing: 'border-box',\n      width: '100%',\n      justifyContent: 'flex-end',\n      borderTop: `2px solid ${border}`,\n    },\n    modifyBtn: {\n      height: xl,\n      fontSize: smallFontSize,\n    },\n    removeModuleIcon: {\n      marginLeft: lg,\n      cursor: 'pointer',\n    },\n    modalHeading: {\n      boxSizing: 'border-box',\n      justifyContent: 'space-between',\n      height: '74px',\n      padding: `${sm} ${lg}`,\n    },\n    modalContainer: {\n      minHeight: '369px',\n    },\n    modalManage: {\n      fontSize: lg,\n    },\n    modalClose: {\n      height: '35px',\n      width: '35px',\n    },\n    modalButtonRow: {\n      height: '84px',\n      justifyContent: 'center',\n    },\n    modalButtonRemove: {\n      color: '#fff',\n      backgroundColor: error,\n      height: '42px',\n    },\n    modalName: {\n      textOverflow: 'ellipsis',\n      overflow: 'hidden',\n    },\n    modalUserName: {\n      whiteSpace: 'nowrap',\n    },\n    modalOwner: {\n      backgroundColor: background,\n      padding: md,\n      alignItems: 'center',\n    },\n    modalUser: {\n      justifyContent: 'left',\n    },\n    modalDescription: {\n      padding: md,\n    },\n    modalOpen: {\n      paddingLeft: sm,\n      width: 'auto',\n      '&:hover': {\n        cursor: 'pointer',\n      },\n    },\n    amountInput: {\n      width: '100% !important',\n    },\n    gasCostsContainer: {\n      backgroundColor: background,\n      padding: `0 ${lg}`,\n    },\n  }),\n)\n","import { RadioButtons, Text } from '@gnosis.pm/safe-react-components'\nimport { FormControlLabel, hexToRgb, Switch as SwitchMui } from '@material-ui/core'\nimport { ReactElement } from 'react'\nimport { useField } from 'react-final-form'\nimport styled from 'styled-components'\n\nimport { getNetworkName } from 'src/config'\nimport { Field } from 'src/routes/safe/components/Settings/SpendingLimit/FormFields/Amount'\n\n// TODO: propose refactor in safe-react-components based on this requirements\nconst SpendingLimitRadioButtons = styled(RadioButtons)`\n  & .MuiRadio-colorPrimary.Mui-checked {\n    color: ${({ theme }) => theme.colors.primary};\n  }\n`\n\n// TODO: add `name` and `value` to SRC Switch, as they're required for a better RFF integration\nconst StyledSwitch = styled(({ ...rest }) => <SwitchMui {...rest} />)`\n  && {\n    .MuiIconButton-label,\n    .MuiSwitch-colorSecondary {\n      color: ${({ theme }) => theme.colors.icon};\n    }\n\n    .MuiSwitch-colorSecondary.Mui-checked .MuiIconButton-label {\n      color: ${({ theme }) => theme.colors.primary};\n    }\n\n    .MuiSwitch-colorSecondary.Mui-checked:hover {\n      background-color: ${({ theme }) => hexToRgb(`${theme.colors.primary}03`)};\n    }\n\n    .Mui-checked + .MuiSwitch-track {\n      background-color: ${({ theme }) => theme.colors.primaryLight};\n    }\n  }\n`\n\ninterface RadioButtonOption {\n  label: string\n  value: string\n}\n\ninterface RadioButtonProps {\n  options: RadioButtonOption[]\n  initialValue: string\n  groupName: string\n}\n\nconst SafeRadioButtons = ({ options, initialValue, groupName }: RadioButtonProps): ReactElement => (\n  <Field name={groupName} initialValue={initialValue}>\n    {({ input: { name, value, onChange } }) => (\n      <SpendingLimitRadioButtons name={name} value={value || initialValue} onRadioChange={onChange} options={options} />\n    )}\n  </Field>\n)\n\nconst Switch = ({ label, name }: { label: string; name: string }): ReactElement => (\n  <FormControlLabel\n    label={label}\n    control={\n      <Field\n        name={name}\n        type=\"checkbox\"\n        render={({ input: { checked, onChange, name, value } }) => (\n          <StyledSwitch checked={checked} onChange={onChange} name={name} value={value} />\n        )}\n      />\n    }\n  />\n)\n\nconst ResetTimeLabel = styled.div`\n  grid-area: resetTimeLabel;\n`\n\nconst ResetTimeToggle = styled.div`\n  grid-area: resetTimeToggle;\n`\n\nconst ResetTimeOptions = styled.div`\n  grid-area: resetTimeOption;\n`\n\nconst RESET_TIME_OPTIONS = [\n  { label: '1 day', value: '1440' }, // 1 day x 24h x 60min\n  { label: '1 week', value: '10080' }, // 7 days x 24h x 60min\n  { label: '1 month', value: '43200' }, // 30 days x 24h x 60min\n]\n\nconst RINKEBY_RESET_TIME_OPTIONS = [\n  { label: '5 minutes', value: '5' },\n  { label: '30 minutes', value: '30' },\n  { label: '1 hour', value: '60' },\n]\n\nexport const getResetTimeOptions = (): RadioButtonOption[] => {\n  const currentNetwork = getNetworkName().toLowerCase()\n  return currentNetwork !== 'rinkeby' ? RESET_TIME_OPTIONS : RINKEBY_RESET_TIME_OPTIONS\n}\n\nconst ResetTime = (): ReactElement => {\n  const {\n    input: { value: withResetTime },\n  } = useField('withResetTime', { subscription: { value: true } })\n\n  const resetTimeOptions = getResetTimeOptions()\n\n  const switchExplanation = withResetTime ? 'choose reset time period' : 'one time'\n\n  return (\n    <>\n      <ResetTimeLabel>\n        <Text size=\"xl\">Set a reset time so the allowance automatically refills after the defined time period.</Text>\n      </ResetTimeLabel>\n      <ResetTimeToggle>\n        <Switch label={`Reset time (${switchExplanation})`} name=\"withResetTime\" />\n      </ResetTimeToggle>\n      {withResetTime && (\n        <ResetTimeOptions>\n          <SafeRadioButtons groupName=\"resetTime\" initialValue={resetTimeOptions[0].value} options={resetTimeOptions} />\n        </ResetTimeOptions>\n      )}\n    </>\n  )\n}\n\nexport default ResetTime\n","import { TextField as SRCTextField } from '@gnosis.pm/safe-react-components'\nimport { ReactElement } from 'react'\nimport { useField } from 'react-final-form'\nimport { useSelector } from 'react-redux'\nimport styled from 'styled-components'\n\nimport GnoField from 'src/components/forms/Field'\nimport { composeValidators, minValue, mustBeFloat, required } from 'src/components/forms/validator'\nimport { extendedSafeTokensSelector } from 'src/routes/safe/container/selector'\nimport { useStyles } from 'src/routes/safe/components/Settings/SpendingLimit/style'\n\nexport const Field = styled(GnoField)`\n  margin: 8px 0;\n  width: 100%;\n`\n\nconst AmountInput = styled.div`\n  grid-area: amountInput;\n`\n\nconst TextField = styled(SRCTextField)`\n  margin: 0;\n`\n\nconst Amount = (): ReactElement => {\n  const classes = useStyles()\n\n  const {\n    input: { value: tokenAddress },\n  } = useField('token', { subscription: { value: true } })\n  const {\n    meta: { touched, visited },\n  } = useField('amount', { subscription: { touched: true, visited: true } })\n\n  const tokens = useSelector(extendedSafeTokensSelector)\n\n  const selectedTokenRecord = tokens.find((token) => token.address === tokenAddress)\n\n  const validate = (touched || visited) && composeValidators(required, mustBeFloat, minValue(0, false))\n\n  return (\n    <AmountInput>\n      <Field\n        component={TextField}\n        label=\"Amount*\"\n        name=\"amount\"\n        type=\"text\"\n        data-testid=\"amount-input\"\n        endAdornment={selectedTokenRecord?.symbol}\n        className={classes.amountInput}\n        validate={validate}\n      />\n    </AmountInput>\n  )\n}\n\nexport default Amount\n","import { EthHashInfo, Text } from '@gnosis.pm/safe-react-components'\nimport { ReactElement } from 'react'\nimport { useSelector } from 'react-redux'\n\nimport { getExplorerInfo } from 'src/config'\nimport { addressBookEntryName } from 'src/logic/addressBook/store/selectors'\nimport { ADDRESS_BOOK_DEFAULT_NAME } from 'src/logic/addressBook/model/addressBook'\nimport { sameString } from 'src/utils/strings'\n\ninterface AddressInfoProps {\n  address: string\n  title?: string\n}\n\nconst AddressInfo = ({ address, title }: AddressInfoProps): ReactElement => {\n  const name = useSelector((state) => addressBookEntryName(state, { address }))\n  const explorerUrl = getExplorerInfo(address)\n\n  return (\n    <>\n      {title && (\n        <Text size=\"xl\" strong>\n          {title}\n        </Text>\n      )}\n      <EthHashInfo\n        hash={address}\n        name={sameString(name, ADDRESS_BOOK_DEFAULT_NAME) ? undefined : name}\n        showCopyBtn\n        showAvatar\n        textSize=\"lg\"\n        explorerUrl={explorerUrl}\n      />\n    </>\n  )\n}\n\nexport default AddressInfo\n","import { IconText, Text } from '@gnosis.pm/safe-react-components'\nimport { ReactElement } from 'react'\n\nimport Row from 'src/components/layout/Row'\n\ninterface ResetTimeInfoProps {\n  title?: string\n  label?: string\n}\n\nconst ResetTimeInfo = ({ title, label }: ResetTimeInfoProps): ReactElement => (\n  <>\n    <Text size=\"xl\" strong>\n      {title}\n    </Text>\n    {label ? (\n      <Row align=\"center\" margin=\"md\">\n        <IconText iconSize=\"md\" iconType=\"fuelIndicator\" text={label} textSize=\"lg\" />\n      </Row>\n    ) : (\n      <Row align=\"center\" margin=\"md\">\n        <Text size=\"lg\">One-time spending limit</Text>\n      </Row>\n    )}\n  </>\n)\n\nexport default ResetTimeInfo\n","import { Text } from '@gnosis.pm/safe-react-components'\nimport { ReactElement } from 'react'\nimport styled from 'styled-components'\n\nimport { Token } from 'src/logic/tokens/store/model/token'\nimport { setImageToPlaceholder } from 'src/routes/safe/components/Balances/utils'\n\nconst StyledImage = styled.img`\n  width: 32px;\n  height: 32px;\n  object-fit: contain;\n  margin: 0 8px 0 0;\n`\nconst StyledImageName = styled.div`\n  display: flex;\n  align-items: center;\n`\n\ninterface TokenInfoProps {\n  amount: string\n  title?: string\n  token: Token\n}\n\nconst TokenInfo = ({ amount, title, token }: TokenInfoProps): ReactElement => (\n  <>\n    <Text size=\"xl\" strong>\n      {title}\n    </Text>\n    <StyledImageName>\n      <StyledImage alt={token.name} onError={setImageToPlaceholder} src={token.logoUri || ''} />\n      <Text size=\"lg\">\n        {amount} {token.symbol}\n      </Text>\n    </StyledImageName>\n  </>\n)\n\nexport default TokenInfo\n","import { useSelector } from 'react-redux'\n\nimport { Token } from 'src/logic/tokens/store/model/token'\nimport { sameAddress } from 'src/logic/wallets/ethAddresses'\nimport { safeKnownCoins } from 'src/routes/safe/container/selector'\n\nconst useTokenInfo = (address: string): Token | undefined => {\n  const tokens = useSelector(safeKnownCoins)\n\n  if (tokens) {\n    return tokens.find((token) => sameAddress(token.address, address))\n  }\n}\n\nexport default useTokenInfo\n","export default __webpack_public_path__ + \"static/media/custom.6f7b401c.svg\";","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport { alpha } from '../styles/colorManipulator';\nexport var styles = function styles(theme) {\n  return {\n    /* Styles applied to the root element. */\n    root: {\n      height: 1,\n      margin: 0,\n      // Reset browser default style.\n      border: 'none',\n      flexShrink: 0,\n      backgroundColor: theme.palette.divider\n    },\n\n    /* Styles applied to the root element if `absolute={true}`. */\n    absolute: {\n      position: 'absolute',\n      bottom: 0,\n      left: 0,\n      width: '100%'\n    },\n\n    /* Styles applied to the root element if `variant=\"inset\"`. */\n    inset: {\n      marginLeft: 72\n    },\n\n    /* Styles applied to the root element if `light={true}`. */\n    light: {\n      backgroundColor: alpha(theme.palette.divider, 0.08)\n    },\n\n    /* Styles applied to the root element if `variant=\"middle\"`. */\n    middle: {\n      marginLeft: theme.spacing(2),\n      marginRight: theme.spacing(2)\n    },\n\n    /* Styles applied to the root element if `orientation=\"vertical\"`. */\n    vertical: {\n      height: '100%',\n      width: 1\n    },\n\n    /* Styles applied to the root element if `flexItem={true}`. */\n    flexItem: {\n      alignSelf: 'stretch',\n      height: 'auto'\n    }\n  };\n};\nvar Divider = /*#__PURE__*/React.forwardRef(function Divider(props, ref) {\n  var _props$absolute = props.absolute,\n      absolute = _props$absolute === void 0 ? false : _props$absolute,\n      classes = props.classes,\n      className = props.className,\n      _props$component = props.component,\n      Component = _props$component === void 0 ? 'hr' : _props$component,\n      _props$flexItem = props.flexItem,\n      flexItem = _props$flexItem === void 0 ? false : _props$flexItem,\n      _props$light = props.light,\n      light = _props$light === void 0 ? false : _props$light,\n      _props$orientation = props.orientation,\n      orientation = _props$orientation === void 0 ? 'horizontal' : _props$orientation,\n      _props$role = props.role,\n      role = _props$role === void 0 ? Component !== 'hr' ? 'separator' : undefined : _props$role,\n      _props$variant = props.variant,\n      variant = _props$variant === void 0 ? 'fullWidth' : _props$variant,\n      other = _objectWithoutProperties(props, [\"absolute\", \"classes\", \"className\", \"component\", \"flexItem\", \"light\", \"orientation\", \"role\", \"variant\"]);\n\n  return /*#__PURE__*/React.createElement(Component, _extends({\n    className: clsx(classes.root, className, variant !== 'fullWidth' && classes[variant], absolute && classes.absolute, flexItem && classes.flexItem, light && classes.light, orientation === 'vertical' && classes.vertical),\n    role: role,\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? Divider.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * Absolutely position the element.\n   */\n  absolute: PropTypes.bool,\n\n  /**\n   * @ignore\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .elementType,\n\n  /**\n   * If `true`, a vertical divider will have the correct height when used in flex container.\n   * (By default, a vertical divider will have a calculated height of `0px` if it is the child of a flex container.)\n   */\n  flexItem: PropTypes.bool,\n\n  /**\n   * If `true`, the divider will have a lighter color.\n   */\n  light: PropTypes.bool,\n\n  /**\n   * The divider orientation.\n   */\n  orientation: PropTypes.oneOf(['horizontal', 'vertical']),\n\n  /**\n   * @ignore\n   */\n  role: PropTypes.string,\n\n  /**\n   * The variant to use.\n   */\n  variant: PropTypes.oneOf(['fullWidth', 'inset', 'middle'])\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiDivider'\n})(Divider);","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M6 10c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm12 0c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm-6 0c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z\"\n}), 'MoreHoriz');\n\nexports.default = _default;","import { useCallback, useRef, useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { loadPagedHistoryTransactions } from 'src/logic/safe/store/actions/transactions/fetchTransactions/loadGatewayTransactions'\nimport { addHistoryTransactions } from 'src/logic/safe/store/actions/transactions/gatewayTransactions'\nimport { TransactionDetails } from 'src/logic/safe/store/models/types/gateway.d'\nimport { currentChainId } from 'src/logic/config/store/selectors'\nimport { useHistoryTransactions } from 'src/routes/safe/components/Transactions/TxList/hooks/useHistoryTransactions'\nimport { Errors } from 'src/logic/exceptions/CodedException'\nimport { Await } from 'src/types/helpers'\nimport { extractSafeAddress } from 'src/routes/routes'\n\ntype PagedTransactions = {\n  count: number\n  transactions: TransactionDetails['transactions']\n  hasMore: boolean\n  next: () => Promise<void>\n  isLoading: boolean\n}\n\nexport const usePagedHistoryTransactions = (): PagedTransactions => {\n  const { count, transactions } = useHistoryTransactions()\n  const chainId = useSelector(currentChainId)\n\n  const dispatch = useRef(useDispatch())\n  const safeAddress = useRef(extractSafeAddress())\n  const [hasMore, setHasMore] = useState(true)\n  const [isLoading, setIsLoading] = useState(false)\n\n  const next = useCallback(async () => {\n    setIsLoading(true)\n\n    let results: Await<ReturnType<typeof loadPagedHistoryTransactions>>\n    try {\n      results = await loadPagedHistoryTransactions(safeAddress.current)\n    } catch (e) {\n      // No next page\n      if (e.content !== Errors._608) {\n        e.log()\n      }\n    }\n\n    if (!results) {\n      setHasMore(false)\n      setIsLoading(false)\n      return\n    }\n\n    const { values, next } = results\n\n    if (next === null) {\n      setHasMore(false)\n    }\n\n    if (values) {\n      dispatch.current(addHistoryTransactions({ chainId, safeAddress: safeAddress.current, values, isTail: true }))\n    } else {\n      setHasMore(false)\n    }\n    setIsLoading(false)\n  }, [chainId])\n\n  return { count, transactions, hasMore, next, isLoading }\n}\n","import { useEffect, useState } from 'react'\nimport { useSelector } from 'react-redux'\n\nimport { TransactionDetails } from 'src/logic/safe/store/models/types/gateway.d'\nimport { historyTransactions } from 'src/logic/safe/store/selectors/gatewayTransactions'\n\nexport const useHistoryTransactions = (): TransactionDetails => {\n  const historyTxs = useSelector(historyTransactions)\n  const [count, setCount] = useState(0)\n\n  useEffect(() => {\n    const history = historyTxs\n      ? Object.entries(historyTxs).reduce((acc, [, transactions]) => (acc += transactions.length), 0)\n      : 0\n    setCount(history)\n  }, [historyTxs])\n\n  return {\n    count,\n    transactions: historyTxs ? Object.entries(historyTxs) : [],\n  }\n}\n","import { Text, Accordion, AccordionDetails, AccordionSummary, EthHashInfo } from '@gnosis.pm/safe-react-components'\nimport styled, { css } from 'styled-components'\n\nexport const Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n`\n\nexport const ContentWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  flex-grow: 1;\n  align-items: center;\n`\n\nexport const ColumnDisplayAccordionDetails = styled(AccordionDetails)`\n  flex-flow: column;\n`\n\nexport const NoPaddingAccordion = styled(Accordion)`\n  &.MuiAccordion-root {\n    background-color: transparent;\n\n    .MuiAccordionDetails-root {\n      padding: 0;\n    }\n  }\n`\n\nexport const ActionAccordion = styled(Accordion)`\n  &.MuiAccordion-root {\n    &:first-child {\n      border-top: none;\n    }\n\n    &.Mui-expanded {\n      &:last-child {\n        border-bottom: none;\n      }\n    }\n\n    .MuiAccordionDetails-root {\n      padding: 16px;\n    }\n  }\n`\n\nexport const StyledTransactionsGroup = styled.div`\n  align-items: flex-start;\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n  margin: 16px 8px;\n  width: 98%;\n`\n\nexport const H2 = styled.h2`\n  text-transform: uppercase;\n  font-size: smaller;\n`\n\nexport const SubTitle = styled(Text)`\n  margin-bottom: 8px;\n\n  font-size: 0.76em;\n  font-weight: 600;\n  line-height: 1.5;\n  letter-spacing: 1px;\n  color: ${({ theme }) => theme.colors.placeHolder};\n  text-transform: uppercase;\n`\n\nexport const StyledTransactions = styled.div`\n  background-color: ${({ theme }) => theme.colors.white};\n  border-radius: 8px;\n  box-shadow: #00000026 0 4px 12px 0;\n  overflow: hidden;\n  width: 100%;\n\n  & > .MuiAccordion-root {\n    &:first-child {\n      border-top: none;\n    }\n\n    &:last-child {\n      border-bottom: none;\n    }\n\n    &:last-of-type {\n      div {\n        row-gap: 0px;\n      }\n    }\n  }\n`\n\nexport const GroupedTransactionsCard = styled(StyledTransactions)`\n  transition: all 150ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;\n  background-color: transparent;\n  border-radius: 0;\n  box-shadow: none;\n\n  &:not(:last-child) {\n    border-bottom: 2px solid ${({ theme }) => theme.colors.separator};\n  }\n\n  .MuiAccordion-root,\n  .MuiAccordionSummary-root,\n  .MuiAccordionDetails-root {\n    background-color: transparent;\n\n    &:hover,\n    &.Mui-expanded {\n      background-color: transparent;\n    }\n  }\n\n  &:hover {\n    background-color: ${({ theme }) => theme.colors.background};\n\n    .MuiAccordionDetails-root {\n      div[class^='tx-'] {\n        background-color: ${({ theme }) => theme.colors.background};\n      }\n    }\n\n    .disclaimer-container {\n      background-color: ${({ theme }) => theme.colors.inputField};\n    }\n  }\n`\nconst gridColumns = {\n  nonce: '0.5fr',\n  type: '3fr',\n  info: '3fr',\n  time: '2.5fr',\n  votes: '1.5fr',\n  actions: '1fr',\n  status: '2.5fr',\n}\n\nconst willBeReplaced = css`\n  .will-be-replaced * {\n    color: gray !important;\n    text-decoration: line-through !important;\n    filter: grayscale(1) opacity(0.8) !important;\n  }\n`\n\nconst failedTransaction = css`\n  &.failed-transaction {\n    div[class^='tx-']:not(.tx-status):not(.tx-nonce) {\n      opacity: 0.5;\n    }\n  }\n`\n\nconst onChainRejection = css`\n  &.on-chain-rejection {\n    background-color: ${({ theme }) => theme.colors.errorTooltip};\n    border-left: 4px solid ${({ theme }) => theme.colors.error};\n    border-radius: 4px;\n    padding-left: 7px;\n    height: 22px;\n    max-width: 165px;\n\n    > div {\n      height: 17px;\n      align-items: center;\n      padding-top: 3px;\n    }\n\n    p {\n      font-size: 11px;\n      line-height: 16px;\n      letter-spacing: 1px;\n      font-weight: bold;\n      text-transform: uppercase;\n      margin-left: -2px;\n    }\n  }\n`\n\nexport const StyledTransaction = styled.div`\n  ${willBeReplaced};\n  ${failedTransaction};\n\n  display: grid;\n  grid-template-columns: ${Object.values(gridColumns).join(' ')};\n  width: 100%;\n\n  & > div {\n    align-self: center;\n  }\n\n  .tx-type {\n    ${onChainRejection};\n  }\n\n  .tx-votes {\n    justify-self: center;\n  }\n\n  .tx-actions {\n    visibility: hidden;\n    justify-self: end;\n  }\n\n  .tx-status {\n    justify-self: end;\n    margin-right: 8px;\n    display: flex;\n    flex-flow: row nowrap;\n    align-items: center;\n    justify-content: end;\n\n    p {\n      margin-left: 8px;\n    }\n  }\n\n  &:hover {\n    .tx-actions {\n      visibility: visible;\n\n      &.will-be-replaced {\n        visibility: hidden;\n      }\n    }\n  }\n`\n\nexport const StyledGroupedTransactions = styled(StyledTransaction)`\n  // no \\`tx-nonce\\` column required\n  grid-template-columns: ${Object.values(gridColumns).slice(1).join(' ')};\n`\n\nexport const GroupedTransactions = styled(StyledTransaction)`\n  // add a bottom division line for all elements but the last\n  &:not(:last-of-type) {\n    border-bottom: 2px solid ${({ theme }) => theme.colors.separator};\n  }\n\n  // builds the tree-view layout\n  .tree-lines {\n    height: 100%;\n    margin-left: 30px;\n    position: relative;\n    width: 30%;\n\n    // this is a special case, the first element in the list needs to have a block child component\n    // add tree lines line to the first item of the list\n    .first-node {\n      display: block;\n      position: absolute;\n      top: -16px;\n      width: 100%;\n\n      &::before {\n        border-bottom: 2px solid ${({ theme }) => theme.colors.separator};\n        border-left: 2px solid ${({ theme }) => theme.colors.separator};\n        content: '';\n        height: 22px;\n        position: absolute;\n        top: 8px;\n        width: 100%;\n      }\n    }\n\n    // add tree lines to all elements of the list (except for the last one)\n    // :last-of-type won't work with classes selector (HTML elements only)\n    // as we need block-level elements, we're using paragraphs for .tree-lines and .first-node\n    // given that divs are already being used for the transaction row, and both (p and div) are siblings\n    &:not(:last-of-type) {\n      &::before {\n        border-bottom: 2px solid ${({ theme }) => theme.colors.separator};\n        border-left: 2px solid ${({ theme }) => theme.colors.separator};\n        content: '';\n        height: 100%;\n        margin-top: 14px;\n        position: absolute;\n        width: 100%;\n      }\n    }\n  }\n\n  // overrides Accordion styles, as grouped txs behave differently\n  > .MuiAccordion-root {\n    transition: none;\n    border: 0;\n    grid-column-end: span 6;\n    grid-column-start: 2;\n\n    &:first-child {\n      border: 0;\n    }\n\n    &.Mui-expanded {\n      justify-self: center;\n      width: calc(100% - 32px);\n\n      &:not(:last-of-type) {\n        border-bottom: 2px solid ${({ theme }) => theme.colors.separator};\n      }\n\n      &:not(:first-of-type) {\n        border-top: 2px solid ${({ theme }) => theme.colors.separator};\n        // if two consecutive accordions are expanded, borders will get duplicated\n        // this rule is to overlap them\n        margin-top: -2px;\n      }\n\n      > .MuiAccordionSummary-root {\n        padding: 0;\n      }\n    }\n  }\n}\n`\n\nexport const DisclaimerContainer = styled(StyledTransaction)`\n  background-color: ${({ theme }) => theme.colors.inputField} !important;\n  border-radius: 4px;\n  margin: 12px 8px 0 12px;\n  padding: 8px 12px;\n  width: calc(100% - 48px);\n\n  .nonce {\n    grid-column-start: 1;\n  }\n\n  .disclaimer {\n    grid-column-start: 2;\n    grid-column-end: span 6;\n  }\n`\n\nexport const TxDetailsContainer = styled.div`\n  ${willBeReplaced};\n\n  background-color: ${({ theme }) => theme.colors.separator} !important;\n  column-gap: 2px;\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  grid-auto-rows: minmax(min-content, max-content);\n  grid-template-rows: [tx-summary] minmax(min-content, max-content) [tx-details] minmax(min-content, 1fr);\n  row-gap: 2px;\n  width: 100%;\n\n  & > div {\n    background-color: ${({ theme }) => theme.colors.white};\n    line-break: anywhere;\n    overflow: hidden;\n    padding: 20px 24px;\n    word-break: break-all;\n  }\n\n  .tx-summary {\n  }\n\n  .tx-details {\n    &.not-executed {\n      grid-row-end: span 2;\n    }\n\n    &.no-padding {\n      padding: 0;\n    }\n  }\n\n  .tx-owners {\n    padding: 24px;\n    grid-column-start: 2;\n    grid-row-end: span 2;\n    grid-row-start: 1;\n\n    &.no-owner {\n      grid-row-end: span 3;\n    }\n  }\n\n  .tx-details-actions {\n    align-items: center;\n    display: flex;\n    height: 60px;\n    justify-content: center;\n\n    button {\n      color: ${({ theme }) => theme.colors.white};\n      margin: 0 8px;\n\n      &:hover {\n        color: ${({ theme }) => theme.colors.white};\n      }\n\n      &.error {\n        background-color: ${({ theme }) => theme.colors.error};\n\n        &:hover {\n          background-color: ${({ theme }) => theme.colors.errorHover};\n        }\n      }\n\n      &.primary {\n        background-color: ${({ theme }) => theme.colors.primary};\n\n        &:hover {\n          background-color: ${({ theme }) => theme.colors.secondary};\n        }\n      }\n    }\n  }\n`\n\nexport const OwnerList = styled.ul`\n  list-style: none;\n  margin: 0;\n  padding-left: 6px;\n\n  .legend {\n    left: 15px;\n    padding-bottom: 0.86em;\n    position: relative;\n    top: -3px;\n\n    .owner-info {\n      margin: 5px;\n    }\n\n    span {\n      color: #008c73;\n      font-weight: bold;\n    }\n  }\n\n  ul {\n    margin-top: 0;\n  }\n\n  .icon {\n    left: -7px;\n    position: absolute;\n    width: 16px;\n    z-index: 2;\n  }\n`\n\nexport const OwnerListItem = styled.li`\n  display: flex;\n  position: relative;\n\n  &::before {\n    border-left: 2px ${({ theme }) => theme.colors.icon} solid;\n    border-radius: 1px;\n    content: '';\n    height: calc(100% - 16px);\n    top: 16px;\n    left: 0;\n    position: absolute;\n    z-index: 1;\n  }\n\n  &:last-child::before {\n    border-left: none;\n  }\n`\n\nexport const InlineEthHashInfo = styled(EthHashInfo)`\n  display: inline-flex;\n`\n\nexport const StyledScrollableBar = styled.div`\n  &::-webkit-scrollbar {\n    width: 0.7em;\n    scroll-behavior: smooth;\n  }\n\n  &::-webkit-scrollbar-track {\n    box-shadow: inset 0 0 6px rgba(0, 0, 0, 0.3);\n    border-radius: 20px;\n  }\n\n  &::-webkit-scrollbar-thumb {\n    background-color: darkgrey;\n    outline: 1px solid #dadada;\n    border-radius: 20px;\n  }\n\n  // firefox experimental\n  scrollbar-color: darkgrey #dadada;\n  scrollbar-width: thin;\n`\n\nexport const ScrollableTransactionsContainer = styled(StyledScrollableBar)`\n  height: calc(100vh - 170px);\n  overflow-x: hidden;\n  overflow-y: auto;\n  width: 100%;\n`\nexport const Centered = styled.div<{ padding?: number }>`\n  width: 100%;\n  height: 100%;\n  display: flex;\n  padding: ${({ padding }) => `${padding}px`};\n  justify-content: center;\n  align-items: center;\n`\n\nexport const HorizontallyCentered = styled(Centered)<{ isVisible: boolean }>`\n  display: ${({ isVisible }) => (isVisible ? 'flex' : 'none')};\n  height: 100px;\n`\n\nexport const StyledAccordionSummary = styled(AccordionSummary)`\n  height: 52px;\n  .tx-nonce {\n    margin: 0 16px 0 8px;\n  }\n`\nexport const AlignItemsWithMargin = styled.div`\n  display: flex;\n  align-items: center;\n\n  span:first-child {\n    margin-right: 6px;\n  }\n`\nexport const NoTransactions = styled.div`\n  display: flex;\n  flex-direction: column;\n  margin-top: 60px;\n`\n","import { ObserverInstanceCallback } from './index';\n\nconst ObserverMap = new Map<\n  string,\n  {\n    id: string;\n    observer: IntersectionObserver;\n    elements: Map<Element, Array<ObserverInstanceCallback>>;\n  }\n>();\n\nconst RootIds: WeakMap<Element | Document, string> = new WeakMap();\nlet rootId = 0;\n\n/**\n * Generate a unique ID for the root element\n * @param root\n */\nfunction getRootId(root: IntersectionObserverInit['root']) {\n  if (!root) return '0';\n  if (RootIds.has(root)) return RootIds.get(root);\n  rootId += 1;\n  RootIds.set(root, rootId.toString());\n  return RootIds.get(root);\n}\n\n/**\n * Convert the options to a string Id, based on the values.\n * Ensures we can reuse the same observer when observing elements with the same options.\n * @param options\n */\nexport function optionsToId(options: IntersectionObserverInit) {\n  return Object.keys(options)\n    .sort()\n    .filter((key) => options[key] !== undefined)\n    .map((key) => {\n      return `${key}_${\n        key === 'root' ? getRootId(options.root) : options[key]\n      }`;\n    })\n    .toString();\n}\n\nfunction createObserver(options: IntersectionObserverInit) {\n  // Create a unique ID for this observer instance, based on the root, root margin and threshold.\n  let id = optionsToId(options);\n  let instance = ObserverMap.get(id);\n\n  if (!instance) {\n    // Create a map of elements this observer is going to observe. Each element has a list of callbacks that should be triggered, once it comes into view.\n    const elements = new Map<Element, Array<ObserverInstanceCallback>>();\n    let thresholds: number[] | readonly number[];\n\n    const observer = new IntersectionObserver((entries) => {\n      entries.forEach((entry) => {\n        // While it would be nice if you could just look at isIntersecting to determine if the component is inside the viewport, browsers can't agree on how to use it.\n        // -Firefox ignores `threshold` when considering `isIntersecting`, so it will never be false again if `threshold` is > 0\n        const inView =\n          entry.isIntersecting &&\n          thresholds.some((threshold) => entry.intersectionRatio >= threshold);\n\n        // @ts-ignore support IntersectionObserver v2\n        if (options.trackVisibility && typeof entry.isVisible === 'undefined') {\n          // The browser doesn't support Intersection Observer v2, falling back to v1 behavior.\n          // @ts-ignore\n          entry.isVisible = inView;\n        }\n\n        elements.get(entry.target)?.forEach((callback) => {\n          callback(inView, entry);\n        });\n      });\n    }, options);\n\n    // Ensure we have a valid thresholds array. If not, use the threshold from the options\n    thresholds =\n      observer.thresholds ||\n      (Array.isArray(options.threshold)\n        ? options.threshold\n        : [options.threshold || 0]);\n\n    instance = {\n      id,\n      observer,\n      elements,\n    };\n\n    ObserverMap.set(id, instance);\n  }\n\n  return instance;\n}\n\n/**\n * @param element - DOM Element to observe\n * @param callback - Callback function to trigger when intersection status changes\n * @param options - Intersection Observer options\n * @return Function - Cleanup function that should be triggered to unregister the observer\n */\nexport function observe(\n  element: Element,\n  callback: ObserverInstanceCallback,\n  options: IntersectionObserverInit = {},\n) {\n  if (!element) return () => {};\n  // An observer with the same options can be reused, so lets use this fact\n  const { id, observer, elements } = createObserver(options);\n\n  // Register the callback listener for this element\n  let callbacks = elements.get(element) || [];\n  if (!elements.has(element)) {\n    elements.set(element, callbacks);\n  }\n\n  callbacks.push(callback);\n  observer.observe(element);\n\n  return function unobserve() {\n    // Remove the callback from the callback list\n    callbacks.splice(callbacks.indexOf(callback), 1);\n\n    if (callbacks.length === 0) {\n      // No more callback exists for element, so destroy it\n      elements.delete(element);\n      observer.unobserve(element);\n    }\n\n    if (elements.size === 0) {\n      // No more elements are being observer by this instance, so destroy it\n      observer.disconnect();\n      ObserverMap.delete(id);\n    }\n  };\n}\n","import * as React from 'react';\nimport { IntersectionObserverProps, PlainChildrenProps } from './index';\nimport { observe } from './observe';\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\nfunction isPlainChildren(\n  props: IntersectionObserverProps | PlainChildrenProps,\n): props is PlainChildrenProps {\n  return typeof props.children !== 'function';\n}\n\n/**\n ## Render props\n\n To use the `<InView>` component, you pass it a function. It will be called\n whenever the state changes, with the new value of `inView`. In addition to the\n `inView` prop, children also receive a `ref` that should be set on the\n containing DOM element. This is the element that the IntersectionObserver will\n monitor.\n\n If you need it, you can also access the\n [`IntersectionObserverEntry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry)\n on `entry`, giving you access to all the details about the current intersection\n state.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView>\n {({ inView, ref, entry }) => (\n      <div ref={ref}>\n        <h2>{`Header inside viewport ${inView}.`}</h2>\n      </div>\n    )}\n </InView>\n );\n\n export default Component;\n ```\n\n ## Plain children\n\n You can pass any element to the `<InView />`, and it will handle creating the\n wrapping DOM element. Add a handler to the `onChange` method, and control the\n state in your own component. Any extra props you add to `<InView>` will be\n passed to the HTML element, allowing you set the `className`, `style`, etc.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView as=\"div\" onChange={(inView, entry) => console.log('Inview:', inView)}>\n <h2>Plain children are always rendered. Use onChange to monitor state.</h2>\n </InView>\n );\n\n export default Component;\n ```\n */\nexport class InView extends React.Component<\n  IntersectionObserverProps | PlainChildrenProps,\n  State\n> {\n  static displayName = 'InView';\n  static defaultProps = {\n    threshold: 0,\n    triggerOnce: false,\n    initialInView: false,\n  };\n\n  constructor(props: IntersectionObserverProps | PlainChildrenProps) {\n    super(props);\n    this.state = {\n      inView: !!props.initialInView,\n      entry: undefined,\n    };\n  }\n\n  componentDidUpdate(prevProps: IntersectionObserverProps) {\n    // If a IntersectionObserver option changed, reinit the observer\n    if (\n      prevProps.rootMargin !== this.props.rootMargin ||\n      prevProps.root !== this.props.root ||\n      prevProps.threshold !== this.props.threshold ||\n      prevProps.skip !== this.props.skip ||\n      prevProps.trackVisibility !== this.props.trackVisibility ||\n      prevProps.delay !== this.props.delay\n    ) {\n      this.unobserve();\n      this.observeNode();\n    }\n  }\n\n  componentWillUnmount() {\n    this.unobserve();\n    this.node = null;\n  }\n\n  node: Element | null = null;\n  _unobserveCb: (() => void) | null = null;\n\n  observeNode() {\n    if (!this.node || this.props.skip) return;\n    const { threshold, root, rootMargin, trackVisibility, delay } = this.props;\n\n    this._unobserveCb = observe(this.node, this.handleChange, {\n      threshold,\n      root,\n      rootMargin,\n      // @ts-ignore\n      trackVisibility,\n      // @ts-ignore\n      delay,\n    });\n  }\n\n  unobserve() {\n    if (this._unobserveCb) {\n      this._unobserveCb();\n      this._unobserveCb = null;\n    }\n  }\n\n  handleNode = (node?: Element | null) => {\n    if (this.node) {\n      // Clear the old observer, before we start observing a new element\n      this.unobserve();\n\n      if (!node && !this.props.triggerOnce && !this.props.skip) {\n        // Reset the state if we get a new node, and we aren't ignoring updates\n        this.setState({ inView: !!this.props.initialInView, entry: undefined });\n      }\n    }\n    this.node = node ? node : null;\n    this.observeNode();\n  };\n\n  handleChange = (inView: boolean, entry: IntersectionObserverEntry) => {\n    if (inView && this.props.triggerOnce) {\n      // If `triggerOnce` is true, we should stop observing the element.\n      this.unobserve();\n    }\n    if (!isPlainChildren(this.props)) {\n      // Store the current State, so we can pass it to the children in the next render update\n      // There's no reason to update the state for plain children, since it's not used in the rendering.\n      this.setState({ inView, entry });\n    }\n    if (this.props.onChange) {\n      // If the user is actively listening for onChange, always trigger it\n      this.props.onChange(inView, entry);\n    }\n  };\n\n  render() {\n    if (!isPlainChildren(this.props)) {\n      const { inView, entry } = this.state;\n      return this.props.children({ inView, entry, ref: this.handleNode });\n    }\n\n    const {\n      children,\n      as,\n      tag,\n      triggerOnce,\n      threshold,\n      root,\n      rootMargin,\n      onChange,\n      skip,\n      trackVisibility,\n      delay,\n      initialInView,\n      ...props\n    } = this.props;\n\n    return React.createElement(\n      as || tag || 'div',\n      { ref: this.handleNode, ...props },\n      children,\n    );\n  }\n}\n","import { createContext, forwardRef, MutableRefObject, ReactElement, ReactNode, useEffect, useState } from 'react'\nimport { InViewHookResponse, useInView } from 'react-intersection-observer'\n\nexport const INFINITE_SCROLL_CONTAINER = 'infinite-scroll-container'\n\nexport const InfiniteScrollContext = createContext<{\n  ref: MutableRefObject<HTMLDivElement | null> | ((instance: HTMLDivElement | null) => void) | null\n  lastItemId?: string\n  setLastItemId: (itemId?: string) => void\n}>({ setLastItemId: () => {}, ref: null })\n\nexport const InfiniteScrollProvider = forwardRef<HTMLDivElement, { children: ReactNode }>(\n  ({ children }, ref): ReactElement => {\n    const [lastItemId, _setLastItemId] = useState<string>()\n\n    const setLastItemId = (itemId?: string) => {\n      setTimeout(() => _setLastItemId(itemId), 0)\n    }\n\n    return (\n      <InfiniteScrollContext.Provider value={{ ref, lastItemId, setLastItemId }}>\n        {children}\n      </InfiniteScrollContext.Provider>\n    )\n  },\n)\n\nInfiniteScrollProvider.displayName = 'InfiniteScrollProvider'\n\ntype InfiniteScrollProps = {\n  children: ReactNode\n  hasMore: boolean\n  next: () => Promise<void>\n  config?: InViewHookResponse\n}\n\nexport const InfiniteScroll = ({ children, hasMore, next, config }: InfiniteScrollProps): ReactElement => {\n  const { ref, inView } = useInView({\n    threshold: 0,\n    root: document.querySelector(`#${INFINITE_SCROLL_CONTAINER}`),\n    rootMargin: '0px 0px 200px 0px',\n    triggerOnce: true,\n    ...config,\n  })\n\n  useEffect(() => {\n    if (inView && hasMore) {\n      next()\n    }\n  }, [inView, hasMore, next])\n\n  return <InfiniteScrollProvider ref={ref}>{children}</InfiniteScrollProvider>\n}\n","import * as React from 'react';\nimport { InViewHookResponse, IntersectionOptions } from './index';\nimport { useEffect } from 'react';\nimport { observe } from './observe';\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\n/**\n * React Hooks make it easy to monitor the `inView` state of your components. Call\n * the `useInView` hook with the (optional) [options](#options) you need. It will\n * return an array containing a `ref`, the `inView` status and the current\n * [`entry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry).\n * Assign the `ref` to the DOM element you want to monitor, and the hook will\n * report the status.\n *\n * @example\n * ```jsx\n * import React from 'react';\n * import { useInView } from 'react-intersection-observer';\n *\n * const Component = () => {\n *   const { ref, inView, entry } = useInView({\n *       threshold: 0,\n *   });\n *\n *   return (\n *     <div ref={ref}>\n *       <h2>{`Header inside viewport ${inView}.`}</h2>\n *     </div>\n *   );\n * };\n * ```\n */\nexport function useInView({\n  threshold,\n  delay,\n  trackVisibility,\n  rootMargin,\n  root,\n  triggerOnce,\n  skip,\n  initialInView,\n}: IntersectionOptions = {}): InViewHookResponse {\n  const unobserve = React.useRef<Function>();\n  const [state, setState] = React.useState<State>({\n    inView: !!initialInView,\n  });\n  const setRef = React.useCallback(\n    (node) => {\n      if (unobserve.current !== undefined) {\n        unobserve.current();\n        unobserve.current = undefined;\n      }\n\n      // Skip creating the observer\n      if (skip) return;\n\n      if (node) {\n        unobserve.current = observe(\n          node,\n          (inView, entry) => {\n            setState({ inView, entry });\n\n            if (entry.isIntersecting && triggerOnce && unobserve.current) {\n              // If it should only trigger once, unobserve the element after it's inView\n              unobserve.current();\n              unobserve.current = undefined;\n            }\n          },\n          {\n            root,\n            rootMargin,\n            threshold,\n            // @ts-ignore\n            trackVisibility,\n            // @ts-ignore\n            delay,\n          },\n        );\n      }\n    },\n    // We break the rule here, because we aren't including the actual `threshold` variable\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n      // If the threshold is an array, convert it to a string so it won't change between renders.\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      Array.isArray(threshold) ? threshold.toString() : threshold,\n      root,\n      rootMargin,\n      triggerOnce,\n      skip,\n      trackVisibility,\n      delay,\n    ],\n  );\n\n  /* eslint-disable-next-line */\n  useEffect(() => {\n    if (!unobserve.current && state.entry && !triggerOnce && !skip) {\n      // If we don't have a ref, then reset the state (unless the hook is set to only `triggerOnce` or `skip`)\n      // This ensures we correctly reflect the current state - If you aren't observing anything, then nothing is inView\n      setState({\n        inView: !!initialInView,\n      });\n    }\n  });\n\n  const result = [setRef, state.inView, state.entry] as InViewHookResponse;\n\n  // Support object destructuring, by adding the specific values.\n  result.ref = result[0];\n  result.inView = result[1];\n  result.entry = result[2];\n\n  return result;\n}\n","import { Loader } from '@gnosis.pm/safe-react-components'\nimport { ReactElement, ReactNode } from 'react'\n\nimport { INFINITE_SCROLL_CONTAINER, InfiniteScroll } from 'src/components/InfiniteScroll'\nimport { HorizontallyCentered, ScrollableTransactionsContainer } from './styled'\n\ntype TxsInfiniteScrollProps = {\n  children: ReactNode\n  next: () => Promise<void>\n  hasMore: boolean\n  isLoading: boolean\n}\n\nexport const TxsInfiniteScroll = ({ children, next, hasMore, isLoading }: TxsInfiniteScrollProps): ReactElement => {\n  return (\n    <InfiniteScroll next={next} hasMore={hasMore}>\n      <ScrollableTransactionsContainer id={INFINITE_SCROLL_CONTAINER}>\n        {children}\n        <HorizontallyCentered isVisible={isLoading}>\n          <Loader size=\"md\" />\n        </HorizontallyCentered>\n      </ScrollableTransactionsContainer>\n    </InfiniteScroll>\n  )\n}\n\nexport { InfiniteScrollContext as TxsInfiniteScrollContext } from 'src/components/InfiniteScroll'\n","import { Custom, SettingsChange, TransactionInfo, Transfer, TokenType } from '@gnosis.pm/safe-react-gateway-sdk'\nimport { useEffect, useState } from 'react'\n\nimport { getNetworkInfo } from 'src/config'\nimport { isCustomTxInfo, isSettingsChangeTxInfo, isTransferTxInfo } from 'src/logic/safe/store/models/types/gateway.d'\nimport { getTxAmount, NOT_AVAILABLE } from 'src/routes/safe/components/Transactions/TxList/utils'\n\nexport type TokenTransferAsset = {\n  type: 'Transfer'\n  name: string\n  logoUri: string\n  directionSign: '+' | '-' | ''\n  amountWithSymbol: string\n  tokenType: string\n}\n\nexport type AssetInfo = TokenTransferAsset | SettingsChange | Custom\n\nexport const isTokenTransferAsset = (value: AssetInfo): value is TokenTransferAsset => {\n  return value.type === 'Transfer'\n}\n\nconst defaultTokenTransferAsset: TokenTransferAsset = {\n  type: 'Transfer',\n  name: NOT_AVAILABLE,\n  logoUri: NOT_AVAILABLE,\n  directionSign: '',\n  amountWithSymbol: NOT_AVAILABLE,\n  tokenType: 'UNKNOWN',\n}\n\nexport const useAssetInfo = (txInfo: TransactionInfo): AssetInfo | undefined => {\n  const [asset, setAsset] = useState<AssetInfo>()\n  const amountWithSymbol = getTxAmount(txInfo)\n\n  useEffect(() => {\n    if (isTransferTxInfo(txInfo)) {\n      const { direction, transferInfo } = txInfo as Transfer\n      const directionSign = direction === 'INCOMING' ? '+' : '-'\n\n      switch (transferInfo.type) {\n        case TokenType.ERC20: {\n          setAsset({\n            type: 'Transfer',\n            name: transferInfo.tokenName ?? defaultTokenTransferAsset.name,\n            logoUri: transferInfo.logoUri ?? defaultTokenTransferAsset.logoUri,\n            directionSign,\n            amountWithSymbol,\n            tokenType: transferInfo.type,\n          })\n          break\n        }\n        case TokenType.ERC721: {\n          setAsset({\n            type: 'Transfer',\n            name: transferInfo.tokenName ?? defaultTokenTransferAsset.name,\n            logoUri: transferInfo.logoUri ?? defaultTokenTransferAsset.logoUri,\n            directionSign: directionSign,\n            amountWithSymbol,\n            tokenType: transferInfo.type,\n          })\n          break\n        }\n        case TokenType.NATIVE_COIN: {\n          const { nativeCoin } = getNetworkInfo()\n\n          setAsset({\n            type: 'Transfer',\n            name: nativeCoin.name ?? defaultTokenTransferAsset.name,\n            logoUri: nativeCoin.logoUri ?? defaultTokenTransferAsset.logoUri,\n            directionSign: directionSign,\n            amountWithSymbol,\n            tokenType: transferInfo.type,\n          })\n          break\n        }\n      }\n      return\n    }\n\n    if (isSettingsChangeTxInfo(txInfo)) {\n      setAsset(txInfo as SettingsChange)\n      return\n    }\n\n    if (isCustomTxInfo(txInfo)) {\n      setAsset(txInfo as Custom)\n    }\n  }, [txInfo, amountWithSymbol])\n\n  return asset\n}\n","import { ThemeColors } from '@gnosis.pm/safe-react-components/dist/theme'\nimport { MultisigExecutionInfo } from '@gnosis.pm/safe-react-gateway-sdk'\nimport { useEffect, useState } from 'react'\nimport { useSelector } from 'react-redux'\n\nimport {\n  isStatusCancelled,\n  isStatusFailed,\n  isStatusSuccess,\n  isStatusWillBeReplaced,\n  Transaction,\n} from 'src/logic/safe/store/models/types/gateway.d'\nimport { userAccountSelector } from 'src/logic/wallets/store/selectors'\nimport { addressInList } from 'src/routes/safe/components/Transactions/TxList/utils'\n\nexport type TransactionStatusProps = {\n  color: ThemeColors\n  text: string\n}\n\nexport const useTransactionStatus = (transaction: Transaction): TransactionStatusProps => {\n  const currentUser = useSelector(userAccountSelector)\n  const [status, setStatus] = useState<TransactionStatusProps>({ color: 'primary', text: '' })\n\n  useEffect(() => {\n    if (isStatusSuccess(transaction.txStatus)) {\n      setStatus({ color: 'primary', text: 'Success' })\n    } else if (isStatusFailed(transaction.txStatus)) {\n      setStatus({ color: 'error', text: 'Failed' })\n    } else if (isStatusCancelled(transaction.txStatus)) {\n      setStatus({ color: 'error', text: 'Cancelled' })\n    } else if (isStatusWillBeReplaced(transaction.txStatus)) {\n      setStatus({ color: 'placeHolder', text: 'Transaction will be replaced' })\n    } else {\n      // AWAITING_EXECUTION, AWAITING_CONFIRMATIONS, PENDING or PENDING_FAILED\n      let text: string\n      const signaturePending = addressInList(\n        (transaction.executionInfo as MultisigExecutionInfo)?.missingSigners ?? undefined,\n      )\n\n      switch (transaction.txStatus) {\n        case 'AWAITING_CONFIRMATIONS':\n          text = signaturePending(currentUser) ? 'Needs your confirmation' : 'Needs confirmations'\n          break\n        case 'AWAITING_EXECUTION':\n          text = 'Needs execution'\n          break\n        case 'PENDING':\n        case 'PENDING_FAILED':\n        default:\n          text = 'Pending'\n          break\n      }\n\n      setStatus({ color: 'rinkeby', text })\n    }\n  }, [currentUser, transaction.executionInfo, transaction.txStatus])\n\n  return status\n}\n","export default __webpack_public_path__ + \"static/media/circle-cross-red.c9afa2b3.svg\";","export default __webpack_public_path__ + \"static/media/incoming.1bf5be26.svg\";","export default __webpack_public_path__ + \"static/media/outgoing.d744cc02.svg\";","export default __webpack_public_path__ + \"static/media/settings.0fea6f0c.svg\";","import { useSelector } from 'react-redux'\n\nimport { sameString } from 'src/utils/strings'\nimport { ADDRESS_BOOK_DEFAULT_NAME } from 'src/logic/addressBook/model/addressBook'\nimport { addressBookEntryName } from 'src/logic/addressBook/store/selectors'\nimport { ZERO_ADDRESS } from 'src/logic/wallets/ethAddresses'\nimport { AddressEx } from '@gnosis.pm/safe-react-gateway-sdk'\n\ntype AddressExName = AddressEx['name']\ntype AddressExImage = AddressEx['logoUri']\ntype AddressInfo = { name: AddressExName | undefined; image: AddressExImage | undefined }\n\ntype UseKnownAddressResponse = { name: string | undefined; image: string | undefined; isAddressBook: boolean }\n\nexport const useKnownAddress = (address = ZERO_ADDRESS, { name, image }: AddressInfo): UseKnownAddressResponse => {\n  const recipientName = useSelector((state) => addressBookEntryName(state, { address }))\n  // We have to check that the name returned is not UNKNOWN\n  const isInAddressBook = !sameString(recipientName, ADDRESS_BOOK_DEFAULT_NAME)\n\n  return isInAddressBook\n    ? {\n        name: recipientName,\n        image: undefined,\n        isAddressBook: true,\n      }\n    : { name: name || undefined, image: image || undefined, isAddressBook: false }\n}\n","import { useEffect, useState } from 'react'\nimport { Transaction } from 'src/logic/safe/store/models/types/gateway.d'\nimport CustomTxIcon from 'src/routes/safe/components/Transactions/TxList/assets/custom.svg'\nimport CircleCrossRed from 'src/routes/safe/components/Transactions/TxList/assets/circle-cross-red.svg'\nimport IncomingTxIcon from 'src/routes/safe/components/Transactions/TxList/assets/incoming.svg'\nimport OutgoingTxIcon from 'src/routes/safe/components/Transactions/TxList/assets/outgoing.svg'\nimport SettingsTxIcon from 'src/routes/safe/components/Transactions/TxList/assets/settings.svg'\nimport { getTxTo } from 'src/routes/safe/components/Transactions/TxList/utils'\nimport { useKnownAddress } from './useKnownAddress'\nimport { extractSafeAddress } from 'src/routes/routes'\n\nexport type TxTypeProps = {\n  icon?: string\n  fallbackIcon?: string\n  text?: string\n}\n\nexport const useTransactionType = (tx: Transaction): TxTypeProps => {\n  const [type, setType] = useState<TxTypeProps>({ icon: CustomTxIcon, text: 'Contract interaction' })\n  const safeAddress = extractSafeAddress()\n  const toAddress = getTxTo(tx)\n  // Fixed casting because known address only works for Custom tx\n  const knownAddressBookAddress = useKnownAddress(toAddress?.value, {\n    name: toAddress?.name,\n    image: toAddress?.logoUri,\n  })\n\n  useEffect(() => {\n    switch (tx.txInfo.type) {\n      case 'Creation': {\n        setType({ icon: toAddress?.logoUri || SettingsTxIcon, text: 'Jupisky created' })\n        break\n      }\n      case 'Transfer': {\n        const isSendTx = tx.txInfo.direction === 'OUTGOING'\n\n        setType({\n          icon: isSendTx ? OutgoingTxIcon : IncomingTxIcon,\n          text: isSendTx ? 'Send' : 'Receive',\n        })\n        break\n      }\n      case 'SettingsChange': {\n        setType({ icon: SettingsTxIcon, text: tx.txInfo.dataDecoded.method })\n        break\n      }\n      case 'Custom': {\n        // TODO: is this the only way to identify a 'module' transaction?\n        if (!tx.executionInfo) {\n          setType({ icon: SettingsTxIcon, text: 'Module' })\n          break\n        }\n\n        if (tx.txInfo.isCancellation) {\n          setType({ icon: CircleCrossRed, text: 'On-chain rejection' })\n          break\n        }\n\n        if (tx.safeAppInfo) {\n          setType({ icon: tx.safeAppInfo.logoUri, text: tx.safeAppInfo.name })\n          break\n        }\n\n        setType({\n          icon: knownAddressBookAddress.isAddressBook\n            ? CustomTxIcon\n            : knownAddressBookAddress.image || toAddress?.logoUri || CustomTxIcon,\n          fallbackIcon: knownAddressBookAddress.isAddressBook ? undefined : CustomTxIcon,\n          text: knownAddressBookAddress.name || toAddress?.name || 'Contract interaction',\n        })\n        break\n      }\n    }\n  }, [\n    tx,\n    safeAddress,\n    knownAddressBookAddress.name,\n    knownAddressBookAddress.image,\n    knownAddressBookAddress.isAddressBook,\n    toAddress?.logoUri,\n    toAddress?.name,\n  ])\n\n  return type\n}\n","import { EthHashInfo } from '@gnosis.pm/safe-react-components'\nimport { ReactElement } from 'react'\n\ntype Props = {\n  address: string\n  iconUrl?: string\n  iconUrlFallback?: string\n  text?: string\n}\n\nexport const CustomIconText = ({ address, iconUrl, text, iconUrlFallback }: Props): ReactElement => (\n  <EthHashInfo\n    hash={address}\n    showHash={false}\n    avatarSize=\"sm\"\n    showAvatar\n    customAvatar={iconUrl || undefined}\n    customAvatarFallback={iconUrlFallback}\n    name={text}\n    textSize=\"xl\"\n  />\n)\n","import { createContext, ReactElement, ReactNode, useState } from 'react'\nimport { TxLocation } from 'src/logic/safe/store/models/types/gateway.d'\n\nexport type TxLocationProps = {\n  txLocation: TxLocation\n  setTxLocation?: (txLocation: TxLocation) => void\n}\n\nexport const TxLocationContext = createContext<TxLocationProps>({\n  txLocation: 'history',\n  setTxLocation: () => {},\n})\n\nexport const TxLocationProvider = ({ children }: { children: ReactNode }): ReactElement => {\n  const [txLocation, setTxLocation] = useState<TxLocation>('history')\n\n  return <TxLocationContext.Provider value={{ txLocation, setTxLocation }}>{children}</TxLocationContext.Provider>\n}\n","import { MultisigExecutionInfo } from '@gnosis.pm/safe-react-gateway-sdk'\nimport { useContext, useEffect, useState } from 'react'\nimport { useSelector } from 'react-redux'\n\nimport { isCustomTxInfo, Transaction } from 'src/logic/safe/store/models/types/gateway.d'\nimport { getQueuedTransactionsByNonce } from 'src/logic/safe/store/selectors/gatewayTransactions'\nimport { sameAddress } from 'src/logic/wallets/ethAddresses'\nimport { userAccountSelector } from 'src/logic/wallets/store/selectors'\nimport { extractSafeAddress } from 'src/routes/routes'\nimport { TxLocationContext } from 'src/routes/safe/components/Transactions/TxList/TxLocationProvider'\nimport { grantedSelector } from 'src/routes/safe/container/selector'\nimport { AppReduxState } from 'src/store'\n\nexport const isThresholdReached = (executionInfo: MultisigExecutionInfo): boolean => {\n  const { confirmationsSubmitted, confirmationsRequired } = executionInfo\n  return confirmationsSubmitted >= confirmationsRequired\n}\n\nexport type TransactionActions = {\n  canConfirm: boolean\n  canConfirmThenExecute: boolean\n  canExecute: boolean\n  canCancel: boolean\n  isUserAnOwner: boolean\n  oneToGo: boolean\n}\n\nexport const useTransactionActions = (transaction: Transaction): TransactionActions => {\n  const currentUser = useSelector(userAccountSelector)\n  const safeAddress = extractSafeAddress()\n  const isUserAnOwner = useSelector(grantedSelector)\n  const { txLocation } = useContext(TxLocationContext)\n  const {\n    confirmationsSubmitted = 0,\n    confirmationsRequired = 0,\n    missingSigners,\n  } = (transaction.executionInfo as MultisigExecutionInfo) ?? {}\n  const transactionsByNonce = useSelector((state: AppReduxState) =>\n    getQueuedTransactionsByNonce(state)({\n      attributeName: 'nonce',\n      attributeValue: (transaction.executionInfo as MultisigExecutionInfo)?.nonce ?? -1,\n      txLocation,\n    }),\n  )\n\n  const [state, setState] = useState<TransactionActions>({\n    canConfirm: false,\n    canConfirmThenExecute: false,\n    canExecute: false,\n    canCancel: false,\n    isUserAnOwner,\n    oneToGo: false,\n  })\n\n  useEffect(() => {\n    if (isUserAnOwner && txLocation !== 'history' && transaction.executionInfo) {\n      const currentUserSigned = !missingSigners?.some((missingSigner) => sameAddress(missingSigner.value, currentUser))\n\n      const oneToGo = confirmationsSubmitted === confirmationsRequired - 1\n      const canConfirm = ['queued.next', 'queued.queued'].includes(txLocation) && !currentUserSigned\n      const thresholdReached = confirmationsSubmitted >= confirmationsRequired\n\n      setState({\n        canConfirm,\n        canConfirmThenExecute: txLocation === 'queued.next' && canConfirm && oneToGo,\n        canExecute: txLocation === 'queued.next' && thresholdReached,\n        canCancel: !transactionsByNonce.some(({ txInfo }) => isCustomTxInfo(txInfo) && txInfo.isCancellation),\n        isUserAnOwner,\n        oneToGo,\n      })\n    } else {\n      setState((prev) => ({ ...prev, isUserAnOwner }))\n    }\n  }, [\n    confirmationsRequired,\n    confirmationsSubmitted,\n    currentUser,\n    isUserAnOwner,\n    missingSigners,\n    safeAddress,\n    transaction,\n    transactionsByNonce,\n    txLocation,\n  ])\n\n  return state\n}\n","import { createContext, ReactElement, ReactNode, useCallback, useRef, useState } from 'react'\nimport { useDispatch } from 'react-redux'\n\nimport { fetchTransactionDetails } from 'src/logic/safe/store/actions/fetchTransactionDetails'\nimport { TxLocation } from 'src/logic/safe/store/models/types/gateway.d'\n\nexport type ActionType = 'cancel' | 'confirm' | 'execute' | 'none'\n\nexport type SelectedAction = {\n  // FixMe: give proper names to the keys\n  //  for instance:\n  //  `action->{ type; forTransactionId; txLocation; }`\n  //  `setAction` as callback\n  selectedAction: {\n    actionSelected: ActionType\n    transactionId: string\n    txLocation: TxLocation\n  }\n  selectAction: (args: SelectedAction['selectedAction']) => Promise<void>\n}\n\nexport const TransactionActionStateContext = createContext<SelectedAction>({\n  selectedAction: {\n    actionSelected: 'none',\n    transactionId: '',\n    txLocation: 'history',\n  },\n  selectAction: () => Promise.resolve(),\n})\n\nexport const TxActionProvider = ({ children }: { children: ReactNode }): ReactElement => {\n  const dispatch = useRef(useDispatch())\n  const [selectedAction, setSelectedAction] = useState<SelectedAction['selectedAction']>({\n    actionSelected: 'none',\n    transactionId: '',\n    txLocation: 'history',\n  })\n\n  const selectAction = useCallback(\n    async ({ actionSelected, transactionId, txLocation }: SelectedAction['selectedAction']) => {\n      if (transactionId) {\n        await dispatch.current(fetchTransactionDetails({ transactionId, txLocation }))\n      }\n\n      setSelectedAction({ actionSelected, transactionId, txLocation })\n    },\n    [],\n  )\n\n  return (\n    <TransactionActionStateContext.Provider value={{ selectedAction, selectAction }}>\n      {children}\n    </TransactionActionStateContext.Provider>\n  )\n}\n","import { createContext, ReactElement, ReactNode, useState } from 'react'\n\nexport const TxHoverContext = createContext<{\n  activeHover?: string\n  setActiveHover: (activeHover?: string) => void\n}>({\n  activeHover: undefined,\n  setActiveHover: () => {},\n})\n\nexport const TxHoverProvider = ({ children }: { children: ReactNode }): ReactElement => {\n  const [activeHover, setActiveHover] = useState<string | undefined>()\n\n  return <TxHoverContext.Provider value={{ activeHover, setActiveHover }}>{children}</TxHoverContext.Provider>\n}\n","import { MultisigExecutionDetails, MultisigExecutionInfo } from '@gnosis.pm/safe-react-gateway-sdk'\nimport { MouseEvent as ReactMouseEvent, useCallback, useContext, useMemo, useRef } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport { Transaction } from 'src/logic/safe/store/models/types/gateway.d'\nimport { userAccountSelector } from 'src/logic/wallets/store/selectors'\nimport { addressInList } from 'src/routes/safe/components/Transactions/TxList/utils'\nimport { useTransactionActions } from './useTransactionActions'\nimport { TransactionActionStateContext } from 'src/routes/safe/components/Transactions/TxList/TxActionProvider'\nimport { TxHoverContext } from 'src/routes/safe/components/Transactions/TxList/TxHoverProvider'\nimport { TxLocationContext } from 'src/routes/safe/components/Transactions/TxList/TxLocationProvider'\nimport enqueueSnackbar from 'src/logic/notifications/store/actions/enqueueSnackbar'\nimport { NOTIFICATIONS } from 'src/logic/notifications'\n\ntype ActionButtonsHandlers = {\n  canCancel: boolean\n  handleConfirmButtonClick: (event: ReactMouseEvent<HTMLButtonElement, MouseEvent>) => void\n  handleCancelButtonClick: (event: ReactMouseEvent<HTMLButtonElement, MouseEvent>) => void\n  handleOnMouseEnter: () => void\n  handleOnMouseLeave: () => void\n  isPending: boolean\n  disabledActions: boolean\n}\n\nexport const useActionButtonsHandlers = (transaction: Transaction): ActionButtonsHandlers => {\n  const currentUser = useSelector(userAccountSelector)\n  const actionContext = useRef(useContext(TransactionActionStateContext))\n  const hoverContext = useRef(useContext(TxHoverContext))\n  const locationContext = useRef(useContext(TxLocationContext))\n  const dispatch = useDispatch()\n  const { canCancel, canConfirmThenExecute, canExecute } = useTransactionActions(transaction)\n\n  const handleConfirmButtonClick = useCallback(\n    (event: ReactMouseEvent<HTMLButtonElement, MouseEvent>) => {\n      event.stopPropagation()\n      if (transaction.txDetails?.detailedExecutionInfo?.type === 'MULTISIG') {\n        const details = transaction.txDetails?.detailedExecutionInfo as MultisigExecutionDetails\n        if (\n          (canExecute && details.confirmationsRequired > details.confirmations.length) ||\n          (canConfirmThenExecute && details.confirmationsRequired - 1 > details.confirmations.length)\n        ) {\n          dispatch(enqueueSnackbar(NOTIFICATIONS.TX_FETCH_SIGNATURES_ERROR_MSG))\n          return\n        }\n      }\n      actionContext.current.selectAction({\n        actionSelected: canExecute || canConfirmThenExecute ? 'execute' : 'confirm',\n        transactionId: transaction.id,\n        txLocation: locationContext.current.txLocation,\n      })\n    },\n    [canConfirmThenExecute, canExecute, dispatch, transaction.id, transaction.txDetails?.detailedExecutionInfo],\n  )\n\n  const handleCancelButtonClick = useCallback(\n    (event: ReactMouseEvent<HTMLButtonElement, MouseEvent>) => {\n      event.stopPropagation()\n      actionContext.current.selectAction({\n        actionSelected: 'cancel',\n        transactionId: transaction.id,\n        txLocation: locationContext.current.txLocation,\n      })\n    },\n    [transaction.id],\n  )\n\n  const handleOnMouseEnter = useCallback(() => {\n    if (canExecute) {\n      hoverContext.current.setActiveHover(transaction.id)\n    }\n  }, [canExecute, transaction.id])\n\n  const handleOnMouseLeave = useCallback(() => {\n    hoverContext.current.setActiveHover()\n  }, [])\n\n  const isPending = useMemo(() => !!transaction.txStatus.match(/^PENDING.*/), [transaction.txStatus])\n\n  const signaturePending = addressInList(\n    (transaction.executionInfo as MultisigExecutionInfo)?.missingSigners ?? undefined,\n  )\n\n  const disabledActions = useMemo(\n    () =>\n      isPending ||\n      (transaction.txStatus === 'AWAITING_EXECUTION' && locationContext.current.txLocation === 'queued.queued') ||\n      (transaction.txStatus === 'AWAITING_CONFIRMATIONS' && !signaturePending(currentUser)),\n    [currentUser, isPending, signaturePending, transaction.txStatus],\n  )\n\n  return {\n    canCancel,\n    handleConfirmButtonClick,\n    handleCancelButtonClick,\n    handleOnMouseEnter,\n    handleOnMouseLeave,\n    isPending,\n    disabledActions,\n  }\n}\n","import { Icon, Tooltip } from '@gnosis.pm/safe-react-components'\nimport { MultisigExecutionInfo } from '@gnosis.pm/safe-react-gateway-sdk'\nimport { default as MuiIconButton } from '@material-ui/core/IconButton'\nimport { ReactElement } from 'react'\nimport { useSelector } from 'react-redux'\nimport styled from 'styled-components'\n\nimport { currentSafeNonce } from 'src/logic/safe/store/selectors'\nimport { Transaction } from 'src/logic/safe/store/models/types/gateway.d'\nimport { useActionButtonsHandlers } from './hooks/useActionButtonsHandlers'\n\nconst IconButton = styled(MuiIconButton)`\n  padding: 8px !important;\n\n  &.Mui-disabled {\n    opacity: 0.4;\n  }\n`\n\ntype TxCollapsedActionsProps = {\n  transaction: Transaction\n}\n\nexport const TxCollapsedActions = ({ transaction }: TxCollapsedActionsProps): ReactElement => {\n  const {\n    canCancel,\n    handleConfirmButtonClick,\n    handleCancelButtonClick,\n    handleOnMouseEnter,\n    handleOnMouseLeave,\n    isPending,\n    disabledActions,\n  } = useActionButtonsHandlers(transaction)\n  const nonce = useSelector(currentSafeNonce)\n\n  const getTitle = () => {\n    if (transaction.txStatus === 'AWAITING_EXECUTION') {\n      return (transaction.executionInfo as MultisigExecutionInfo)?.nonce === nonce\n        ? 'Execute'\n        : `Transaction with nonce ${nonce} needs to be executed first`\n    }\n    return 'Confirm'\n  }\n\n  return (\n    <>\n      <Tooltip title={getTitle()} placement=\"top\">\n        <span>\n          <IconButton\n            size=\"small\"\n            type=\"button\"\n            onClick={handleConfirmButtonClick}\n            disabled={disabledActions}\n            onMouseEnter={handleOnMouseEnter}\n            onMouseLeave={handleOnMouseLeave}\n          >\n            <Icon type={transaction.txStatus === 'AWAITING_EXECUTION' ? 'rocket' : 'check'} color=\"primary\" size=\"sm\" />\n          </IconButton>\n        </span>\n      </Tooltip>\n      {canCancel && (\n        <Tooltip title=\"Reject\" placement=\"top\">\n          <span>\n            <IconButton size=\"small\" type=\"button\" onClick={handleCancelButtonClick} disabled={isPending}>\n              <Icon type=\"circleCross\" color=\"error\" size=\"sm\" />\n            </IconButton>\n          </span>\n        </Tooltip>\n      )}\n    </>\n  )\n}\n","import { Text } from '@gnosis.pm/safe-react-components'\nimport { TokenType } from '@gnosis.pm/safe-react-gateway-sdk'\nimport { ReactElement } from 'react'\nimport styled from 'styled-components'\n\nimport Img from 'src/components/layout/Img'\nimport NFTIcon from 'src/routes/safe/components/Balances/assets/nft_icon.png'\nimport TokenPlaceholder from 'src/routes/safe/components/Balances/assets/token_placeholder.svg'\nimport { TokenTransferAsset } from './hooks/useAssetInfo'\n\nconst Amount = styled(Text)`\n  margin-left: 10px;\n  line-height: 16px;\n`\n\nconst AmountWrapper = styled.div`\n  display: flex;\n  align-items: center;\n`\n\nexport type TokenTransferAmountProps = {\n  assetInfo: TokenTransferAsset\n}\n\nexport const TokenTransferAmount = ({ assetInfo }: TokenTransferAmountProps): ReactElement => {\n  return (\n    <AmountWrapper>\n      <Img\n        alt={assetInfo.name}\n        height={26}\n        onError={(error) => {\n          error.currentTarget.onerror = null\n          error.currentTarget.src = assetInfo.tokenType === TokenType.ERC721 ? NFTIcon : TokenPlaceholder\n        }}\n        src={assetInfo.logoUri}\n      />\n      <Amount size=\"xl\">{`${assetInfo.directionSign}${assetInfo.amountWithSymbol}`}</Amount>\n    </AmountWrapper>\n  )\n}\n","import { Dot, IconText as IconTextSrc, Loader, Text, Tooltip } from '@gnosis.pm/safe-react-components'\nimport { ThemeColors } from '@gnosis.pm/safe-react-components/dist/theme'\nimport { ReactElement, useContext, useRef } from 'react'\nimport styled from 'styled-components'\n\nimport { CustomIconText } from 'src/components/CustomIconText'\nimport {\n  isCustomTxInfo,\n  isMultiSendTxInfo,\n  isSettingsChangeTxInfo,\n  Transaction,\n} from 'src/logic/safe/store/models/types/gateway.d'\nimport { TxCollapsedActions } from './TxCollapsedActions'\nimport { formatDateTime, formatTime, formatTimeInWords } from 'src/utils/date'\nimport { KNOWN_MODULES } from 'src/utils/constants'\nimport { sameString } from 'src/utils/strings'\nimport { AssetInfo, isTokenTransferAsset } from './hooks/useAssetInfo'\nimport { TransactionActions } from './hooks/useTransactionActions'\nimport { TransactionStatusProps } from './hooks/useTransactionStatus'\nimport { TxTypeProps } from './hooks/useTransactionType'\nimport { StyledGroupedTransactions, StyledTransaction } from './styled'\nimport { TokenTransferAmount } from './TokenTransferAmount'\nimport { TxsInfiniteScrollContext } from './TxsInfiniteScroll'\nimport { TxLocationContext } from './TxLocationProvider'\nimport { CalculatedVotes } from './TxQueueCollapsed'\nimport { getTxTo, isCancelTxDetails } from './utils'\nimport { SettingsChange, DisableModule, MultiSend, Custom } from '@gnosis.pm/safe-react-gateway-sdk'\n\nconst TxInfo = ({ info }: { info: AssetInfo }) => {\n  if (isTokenTransferAsset(info)) {\n    return <TokenTransferAmount assetInfo={info} />\n  }\n\n  if (isSettingsChangeTxInfo(info)) {\n    const UNKNOWN_MODULE = 'Unknown module'\n\n    switch ((info as SettingsChange).settingsInfo?.type) {\n      case 'SET_FALLBACK_HANDLER':\n      case 'ADD_OWNER':\n      case 'REMOVE_OWNER':\n      case 'SWAP_OWNER':\n      case 'CHANGE_THRESHOLD':\n      case 'CHANGE_IMPLEMENTATION':\n        break\n      case 'ENABLE_MODULE':\n      case 'DISABLE_MODULE':\n        const disableInfo = (info as SettingsChange).settingsInfo as DisableModule\n        return (\n          <Text size=\"xl\" as=\"span\">\n            {KNOWN_MODULES[disableInfo.module.value] ?? UNKNOWN_MODULE}\n          </Text>\n        )\n    }\n  }\n\n  if (isCustomTxInfo(info)) {\n    if (isMultiSendTxInfo(info)) {\n      return (\n        <Text size=\"xl\" as=\"span\">\n          {info.actionCount} {`action${(info as MultiSend).actionCount > 1 ? 's' : ''}`}\n        </Text>\n      )\n    }\n\n    return (\n      <Text size=\"xl\" as=\"span\">\n        {(info as Custom).methodName}\n      </Text>\n    )\n  }\n  return null\n}\n\nconst CircularProgressPainter = styled.div<{ color: ThemeColors }>`\n  color: ${({ theme, color }) => theme.colors[color]};\n`\n\nconst SmallDot = styled(Dot)`\n  height: 8px;\n  width: 8px;\n  background-color: ${({ theme, color }) => theme.colors[color]} !important;\n`\n\nconst IconText = styled(IconTextSrc)`\n  p {\n    font-weight: bold;\n  }\n`\n\nconst TooltipContent = styled.div`\n  width: max-content;\n`\n\ntype TxCollapsedProps = {\n  transaction: Transaction\n  isGrouped?: boolean\n  nonce?: number\n  type: TxTypeProps\n  info?: AssetInfo\n  time: number\n  votes?: CalculatedVotes\n  actions?: TransactionActions\n  status: TransactionStatusProps\n}\n\nexport const TxCollapsed = ({\n  transaction,\n  isGrouped = false,\n  nonce,\n  type,\n  info,\n  time,\n  votes,\n  actions,\n  status,\n}: TxCollapsedProps): ReactElement => {\n  const { txLocation } = useContext(TxLocationContext)\n  const { ref, lastItemId } = useContext(TxsInfiniteScrollContext)\n  const toAddress = getTxTo(transaction)\n\n  const willBeReplaced = transaction?.txStatus === 'WILL_BE_REPLACED' ? ' will-be-replaced' : ''\n  const onChainRejection =\n    isCancelTxDetails(transaction.txInfo) && txLocation !== 'history' ? ' on-chain-rejection' : ''\n\n  const txCollapsedNonce = (\n    <div className={'tx-nonce' + willBeReplaced}>\n      <Text size=\"xl\">{nonce}</Text>\n    </div>\n  )\n\n  const txCollapsedType = (\n    <div className={'tx-type' + willBeReplaced + onChainRejection}>\n      <CustomIconText\n        address={toAddress?.value || '0x'}\n        iconUrl={type.icon}\n        iconUrlFallback={type.fallbackIcon}\n        text={type.text}\n      />\n    </div>\n  )\n\n  const txCollapsedInfo = <div className={'tx-info' + willBeReplaced}>{info && <TxInfo info={info} />}</div>\n\n  const timestamp = useRef<HTMLDivElement | null>(null)\n\n  const txCollapsedTime = (\n    <div className={'tx-time' + willBeReplaced}>\n      <Tooltip title={formatDateTime(time)} arrow backgroundColor=\"white\" size=\"lg\">\n        <TooltipContent ref={timestamp}>\n          <Text size=\"xl\">{txLocation === 'history' ? formatTime(time) : formatTimeInWords(time)}</Text>\n        </TooltipContent>\n      </Tooltip>\n    </div>\n  )\n\n  const txCollapsedVotes = (\n    <div className={'tx-votes' + willBeReplaced}>\n      {votes && (\n        <IconText\n          color={votes.required > votes.submitted ? 'secondaryLight' : 'primary'}\n          iconType=\"owners\"\n          iconSize=\"sm\"\n          text={`${votes.votes}`}\n          textSize=\"md\"\n        />\n      )}\n    </div>\n  )\n\n  const txCollapsedActions = (\n    <div className={'tx-actions' + willBeReplaced}>\n      {actions?.isUserAnOwner && transaction && <TxCollapsedActions transaction={transaction} />}\n    </div>\n  )\n\n  // attaching ref to a div element as it was causing troubles to add a `ref` to a FunctionComponent\n  const txCollapsedStatus = (\n    <div className=\"tx-status\" ref={sameString(lastItemId, transaction.id) ? ref : null}>\n      {transaction?.txStatus === 'PENDING' || transaction?.txStatus === 'PENDING_FAILED' ? (\n        <CircularProgressPainter color={status.color}>\n          <Loader size=\"xs\" color=\"pending\" />\n        </CircularProgressPainter>\n      ) : (\n        (transaction?.txStatus === 'AWAITING_EXECUTION' || transaction?.txStatus === 'AWAITING_CONFIRMATIONS') && (\n          <SmallDot color={status.color} />\n        )\n      )}\n      <Text size=\"md\" color={status.color} className=\"col\" strong>\n        {status.text}\n      </Text>\n    </div>\n  )\n\n  return isGrouped ? (\n    <StyledGroupedTransactions>\n      {/* no nonce */}\n      {txCollapsedType}\n      {txCollapsedInfo}\n      {txCollapsedTime}\n      {txCollapsedVotes}\n      {txCollapsedActions}\n      {txCollapsedStatus}\n    </StyledGroupedTransactions>\n  ) : (\n    <StyledTransaction className={sameString(status.text, 'Failed') ? 'failed-transaction' : ''}>\n      {txCollapsedNonce}\n      {txCollapsedType}\n      {txCollapsedInfo}\n      {txCollapsedTime}\n      {txCollapsedVotes}\n      {txCollapsedActions}\n      {txCollapsedStatus}\n    </StyledTransaction>\n  )\n}\n","import { MultisigExecutionInfo } from '@gnosis.pm/safe-react-gateway-sdk'\nimport { ReactElement } from 'react'\n\nimport { Transaction } from 'src/logic/safe/store/models/types/gateway.d'\nimport { useAssetInfo } from './hooks/useAssetInfo'\nimport { useTransactionStatus } from './hooks/useTransactionStatus'\nimport { useTransactionType } from './hooks/useTransactionType'\nimport { TxCollapsed } from './TxCollapsed'\n\nexport const TxHistoryCollapsed = ({ transaction }: { transaction: Transaction }): ReactElement => {\n  const nonce = (transaction.executionInfo as MultisigExecutionInfo)?.nonce\n  const type = useTransactionType(transaction)\n  const info = useAssetInfo(transaction.txInfo)\n  const status = useTransactionStatus(transaction)\n\n  return (\n    <TxCollapsed\n      nonce={nonce}\n      type={type}\n      info={info}\n      time={transaction.timestamp}\n      status={status}\n      transaction={transaction}\n    />\n  )\n}\n","import { Text } from '@gnosis.pm/safe-react-components'\nimport { useMemo } from 'react'\nimport styled from 'styled-components'\n\nimport useTokenInfo from 'src/logic/safe/hooks/useTokenInfo'\nimport { sameString } from 'src/utils/strings'\nimport { fromTokenUnit } from 'src/logic/tokens/utils/humanReadableValue'\nimport { getResetTimeOptions } from 'src/routes/safe/components/Settings/SpendingLimit/FormFields/ResetTime'\nimport { AddressInfo, ResetTimeInfo, TokenInfo } from 'src/routes/safe/components/Settings/SpendingLimit/InfoDisplay'\nimport { DataDecoded } from '@gnosis.pm/safe-react-gateway-sdk'\n\nconst SET_ALLOWANCE = 'setAllowance'\nconst DELETE_ALLOWANCE = 'deleteAllowance'\n\nexport const isSetAllowance = (method?: string): boolean => {\n  return sameString(method, SET_ALLOWANCE)\n}\n\nexport const isDeleteAllowance = (method?: string): boolean => {\n  return sameString(method, DELETE_ALLOWANCE)\n}\n\nexport const isSpendingLimitMethod = (method?: string): boolean => {\n  return isSetAllowance(method) || isDeleteAllowance(method)\n}\n\nconst SpendingLimitRow = styled.div`\n  margin-bottom: 16px;\n`\n\nexport const ModifySpendingLimitDetails = ({ data }: { data: DataDecoded }): React.ReactElement => {\n  const [beneficiary, tokenAddress, amount, resetTimeMin] = useMemo(\n    () => data.parameters?.map(({ value }) => value) ?? [],\n    [data.parameters],\n  )\n\n  const resetTimeLabel = useMemo(\n    () => getResetTimeOptions().find(({ value }) => +value === +resetTimeMin)?.label ?? '',\n    [resetTimeMin],\n  )\n\n  const tokenInfo = useTokenInfo(tokenAddress as string)\n\n  return (\n    <>\n      <SpendingLimitRow>\n        <Text size=\"xl\" strong>\n          Modify spending limit:\n        </Text>\n      </SpendingLimitRow>\n      <SpendingLimitRow>\n        <AddressInfo title=\"Beneficiary\" address={beneficiary as string} />\n      </SpendingLimitRow>\n      <SpendingLimitRow>\n        {tokenInfo && (\n          <TokenInfo amount={fromTokenUnit(amount as string, tokenInfo.decimals)} title=\"Amount\" token={tokenInfo} />\n        )}\n      </SpendingLimitRow>\n      <SpendingLimitRow>\n        <ResetTimeInfo title=\"Reset Time\" label={resetTimeLabel} />\n      </SpendingLimitRow>\n    </>\n  )\n}\n\nexport const DeleteSpendingLimitDetails = ({ data }: { data: DataDecoded }): React.ReactElement => {\n  const [beneficiary, tokenAddress] = useMemo(() => data.parameters?.map(({ value }) => value) ?? [], [data.parameters])\n  const tokenInfo = useTokenInfo(tokenAddress as string)\n\n  return (\n    <>\n      <SpendingLimitRow>\n        <Text size=\"xl\" strong>\n          Delete spending limit:\n        </Text>\n      </SpendingLimitRow>\n      <SpendingLimitRow>\n        <AddressInfo title=\"Beneficiary\" address={beneficiary as string} />\n      </SpendingLimitRow>\n      <SpendingLimitRow>{tokenInfo && <TokenInfo amount=\"\" title=\"Token\" token={tokenInfo} />}</SpendingLimitRow>\n    </>\n  )\n}\n","import { useState } from 'react'\nimport { ClickAwayListener, createStyles, Divider } from '@material-ui/core'\nimport Menu from '@material-ui/core/Menu'\nimport MenuItem from '@material-ui/core/MenuItem'\nimport { makeStyles } from '@material-ui/core/styles'\nimport MoreHorizIcon from '@material-ui/icons/MoreHoriz'\nimport { useSelector } from 'react-redux'\n\nimport { sameString } from 'src/utils/strings'\nimport { ADDRESS_BOOK_DEFAULT_NAME } from 'src/logic/addressBook/model/addressBook'\nimport { addressBookEntryName } from 'src/logic/addressBook/store/selectors'\nimport { xs } from 'src/theme/variables'\nimport { grantedSelector } from 'src/routes/safe/container/selector'\nimport { SAFE_ROUTES, history, extractSafeAddress, generateSafeRoute } from 'src/routes/routes'\nimport { getCurrentShortChainName } from 'src/config'\n\nconst useStyles = makeStyles(\n  createStyles({\n    container: {\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center',\n      cursor: 'pointer',\n      margin: `0 ${xs}`,\n      borderRadius: '50%',\n      transition: 'background-color .2s ease-in-out',\n      '&:hover': {\n        backgroundColor: '#F0EFEE',\n      },\n      outline: 'none',\n    },\n    increasedPopperZindex: {\n      zIndex: 2001,\n    },\n  }),\n)\n\ntype EllipsisTransactionDetailsProps = {\n  address: string\n  sendModalOpenHandler?: () => void\n}\n\nexport const EllipsisTransactionDetails = ({\n  address,\n  sendModalOpenHandler,\n}: EllipsisTransactionDetailsProps): React.ReactElement => {\n  const classes = useStyles()\n  const [anchorEl, setAnchorEl] = useState(null)\n\n  const isOwnerConnected = useSelector(grantedSelector)\n\n  const recipientName = useSelector((state) => addressBookEntryName(state, { address }))\n  // We have to check that the name returned is not UNKNOWN\n  const isStoredInAddressBook = !sameString(recipientName, ADDRESS_BOOK_DEFAULT_NAME)\n\n  const handleClick = (event) => setAnchorEl(event.currentTarget)\n\n  const closeMenuHandler = () => setAnchorEl(null)\n\n  const addOrEditEntryHandler = () => {\n    history.push({\n      pathname: generateSafeRoute(SAFE_ROUTES.ADDRESS_BOOK, {\n        shortName: getCurrentShortChainName(),\n        safeAddress: extractSafeAddress(),\n      }),\n      search: `?entryAddress=${address}`,\n    })\n    closeMenuHandler()\n  }\n\n  return (\n    <ClickAwayListener onClickAway={closeMenuHandler}>\n      <div className={classes.container} role=\"menu\" tabIndex={0}>\n        <MoreHorizIcon onClick={handleClick} onKeyDown={handleClick} />\n        <Menu anchorEl={anchorEl} id=\"simple-menu\" keepMounted onClose={closeMenuHandler} open={Boolean(anchorEl)}>\n          {sendModalOpenHandler\n            ? [\n                <MenuItem key=\"send-again-button\" onClick={sendModalOpenHandler} disabled={!isOwnerConnected}>\n                  Send Again\n                </MenuItem>,\n                <Divider key=\"divider\" />,\n              ]\n            : null}\n          {isStoredInAddressBook ? (\n            <MenuItem onClick={addOrEditEntryHandler}>Edit Address book Entry</MenuItem>\n          ) : (\n            <MenuItem onClick={addOrEditEntryHandler}>Add to address book</MenuItem>\n          )}\n        </Menu>\n      </div>\n    </ClickAwayListener>\n  )\n}\n","import { EthHashInfo } from '@gnosis.pm/safe-react-components'\nimport { ReactElement } from 'react'\n\nimport { getExplorerInfo } from 'src/config'\nimport { useKnownAddress } from './hooks/useKnownAddress'\n\ntype EthHashInfoRestProps = Omit<\n  Parameters<typeof EthHashInfo>[0],\n  'hash' | 'name' | 'showAvatar' | 'customAvatar' | 'showCopyBtn' | 'explorerUrl'\n>\n\ntype Props = EthHashInfoRestProps & {\n  address: string\n  name?: string | undefined\n  avatarUrl?: string | undefined\n}\n\nexport const AddressInfo = ({ address, name, avatarUrl, ...rest }: Props): ReactElement | null => {\n  const toInfo = useKnownAddress(address, { name, image: avatarUrl })\n\n  if (address === '') {\n    return null\n  }\n\n  return (\n    <EthHashInfo\n      hash={address}\n      name={toInfo.name}\n      showAvatar\n      customAvatar={toInfo.image}\n      showCopyBtn\n      explorerUrl={getExplorerInfo(address)}\n      {...rest}\n    />\n  )\n}\n","import { Text } from '@gnosis.pm/safe-react-components'\nimport { ReactElement, ReactNode } from 'react'\n\ntype InfoDetailsProps = {\n  children: ReactNode\n  title: string\n}\n\nexport const InfoDetails = ({ children, title }: InfoDetailsProps): ReactElement => (\n  <>\n    <Text size=\"xl\" strong>\n      {title}\n    </Text>\n    {children}\n  </>\n)\n","import { Erc721Transfer, Transfer, TokenType } from '@gnosis.pm/safe-react-gateway-sdk'\nimport { ReactElement, useContext, useEffect, useState } from 'react'\nimport styled from 'styled-components'\n\nimport { fromTokenUnit } from 'src/logic/tokens/utils/humanReadableValue'\nimport { ZERO_ADDRESS } from 'src/logic/wallets/ethAddresses'\nimport { EllipsisTransactionDetails } from 'src/routes/safe/components/AddressBook/EllipsisTransactionDetails'\nimport SendModal from 'src/routes/safe/components/Balances/SendModal'\nimport { AddressInfo } from './AddressInfo'\nimport { InfoDetails } from './InfoDetails'\nimport { TxLocationContext, TxLocationProps } from './TxLocationProvider'\nimport { getTxTokenData } from './utils'\n\nconst SingleRow = styled.div`\n  display: flex;\n  align-items: flex-end;\n`\n\ntype TxInfoDetailsProps = {\n  title: string\n  address: string\n  name?: string | undefined\n  avatarUrl?: string | undefined\n  isTransferType?: boolean\n  txInfo?: Transfer\n}\n\nexport const TxInfoDetails = ({\n  title,\n  address,\n  isTransferType,\n  txInfo,\n  name,\n  avatarUrl,\n}: TxInfoDetailsProps): ReactElement => {\n  const { txLocation } = useContext<TxLocationProps>(TxLocationContext)\n  const canRepeatTransaction =\n    // is transfer type by context\n    isTransferType &&\n    // not a Collectible\n    txInfo?.transferInfo.type !== TokenType.ERC721 &&\n    // in history list\n    txLocation === 'history' &&\n    // it's outgoing\n    txInfo?.direction === 'OUTGOING'\n\n  const [sendModalOpen, setSendModalOpen] = useState(false)\n  const sendModalOpenHandler = () => {\n    setSendModalOpen(true)\n  }\n  const onClose = () => {\n    setSendModalOpen(false)\n  }\n\n  const [sendModalParams, setSendModalParams] = useState<{\n    activeScreenType: 'sendCollectible' | 'sendFunds'\n    recipientAddress: string\n    selectedToken: string | Erc721Transfer\n    tokenAmount: string\n  }>({\n    activeScreenType: 'sendFunds',\n    recipientAddress: address,\n    selectedToken: ZERO_ADDRESS,\n    tokenAmount: '0',\n  })\n\n  useEffect(() => {\n    if (txInfo) {\n      const isCollectible = txInfo.transferInfo.type === TokenType.ERC721\n      const { address, value, decimals } = getTxTokenData(txInfo)\n\n      setSendModalParams((prev) => ({\n        ...prev,\n        activeScreenType: isCollectible ? 'sendCollectible' : 'sendFunds',\n        selectedToken: isCollectible ? (txInfo.transferInfo as Erc721Transfer) : address,\n        tokenAmount: isCollectible ? '1' : fromTokenUnit(value, Number(decimals)),\n      }))\n    }\n  }, [txInfo])\n\n  return (\n    <InfoDetails title={title}>\n      <SingleRow>\n        <AddressInfo address={address} name={name} avatarUrl={avatarUrl} />\n        <EllipsisTransactionDetails\n          address={address}\n          sendModalOpenHandler={canRepeatTransaction ? sendModalOpenHandler : undefined}\n        />\n      </SingleRow>\n      {canRepeatTransaction && <SendModal isOpen={sendModalOpen} onClose={onClose} {...sendModalParams} />}\n    </InfoDetails>\n  )\n}\n","import { Text } from '@gnosis.pm/safe-react-components'\nimport { createStyles, makeStyles } from '@material-ui/core/styles'\nimport { ReactElement, useState } from 'react'\n\nimport Paragraph from 'src/components/layout/Paragraph'\nimport LinkWithRef from 'src/components/layout/Link'\nimport { textShortener } from 'src/utils/strings'\n\nexport const styles = createStyles({\n  txDataParagraph: {\n    whiteSpace: 'normal',\n  },\n  linkTxData: {\n    textDecoration: 'underline',\n    cursor: 'pointer',\n  },\n})\n\nconst useStyles = makeStyles(styles)\n\nexport const HexEncodedData = ({\n  hexData,\n  title,\n  limit = 20,\n}: {\n  hexData: string\n  title?: string\n  limit?: number\n}): ReactElement => {\n  const classes = useStyles()\n  const [showTxData, setShowTxData] = useState(false)\n  const showExpandBtn = hexData.length > limit\n  const shortener = textShortener({ charsStart: 40, charsEnd: 0 })\n\n  return (\n    <div className=\"tx-hexData\">\n      {title && (\n        <Text size=\"xl\" strong>\n          {title}:\n        </Text>\n      )}\n      <Paragraph className={classes.txDataParagraph} noMargin size=\"md\">\n        {showExpandBtn ? (\n          <>\n            {showTxData ? (\n              <>\n                {hexData}{' '}\n                <LinkWithRef\n                  aria-label=\"Hide details of the transaction\"\n                  className={classes.linkTxData}\n                  onClick={() => setShowTxData(false)}\n                  rel=\"noopener noreferrer\"\n                  target=\"_blank\"\n                >\n                  Show Less\n                </LinkWithRef>\n              </>\n            ) : (\n              <>\n                {shortener(hexData)}{' '}\n                <LinkWithRef\n                  aria-label=\"Show details of the transaction\"\n                  className={classes.linkTxData}\n                  onClick={() => setShowTxData(true)}\n                  rel=\"noopener noreferrer\"\n                  target=\"_blank\"\n                >\n                  Show More\n                </LinkWithRef>\n              </>\n            )}\n          </>\n        ) : (\n          hexData\n        )}\n      </Paragraph>\n    </div>\n  )\n}\n","import { Text, EthHashInfo } from '@gnosis.pm/safe-react-components'\n\nimport styled from 'styled-components'\n\nimport {\n  isAddress,\n  isArrayParameter,\n} from 'src/routes/safe/components/Balances/SendModal/screens/ContractInteraction/utils'\nimport { HexEncodedData } from './HexEncodedData'\nimport { getExplorerInfo } from 'src/config'\n\nconst NestedWrapper = styled.div`\n  padding-left: 4px;\n`\n\ninterface RenderValueProps {\n  method: string\n  type: string\n  value: string | string[]\n}\n\nconst GenericValue = ({ method, type, value }: RenderValueProps): React.ReactElement => {\n  const getTextValue = (value: string) => <HexEncodedData limit={60} hexData={value} />\n\n  const getArrayValue = (parentId: string, value: string[] | string) => (\n    <div>\n      [\n      <NestedWrapper>\n        {(value as string[]).map((currentValue, index) => {\n          const key = `${parentId}-value-${index}`\n          return Array.isArray(currentValue) ? (\n            <Text key={key} size=\"xl\">\n              {getArrayValue(key, currentValue)}\n            </Text>\n          ) : (\n            getTextValue(currentValue)\n          )\n        })}\n      </NestedWrapper>\n      ]\n    </div>\n  )\n\n  if (isArrayParameter(type) || Array.isArray(value)) {\n    return getArrayValue(method, value)\n  }\n\n  return getTextValue(value as string)\n}\n\nconst Value = ({ type, ...props }: RenderValueProps): React.ReactElement => {\n  if (isArrayParameter(type) && isAddress(type)) {\n    return (\n      <div>\n        [\n        <NestedWrapper>\n          {(props.value as string[]).map((address) => {\n            const explorerUrl = getExplorerInfo(address)\n            return <EthHashInfo key={address} textSize=\"xl\" hash={address} showCopyBtn explorerUrl={explorerUrl} />\n          })}\n        </NestedWrapper>\n        ]\n      </div>\n    )\n  }\n\n  if (isAddress(type)) {\n    const explorerUrl = getExplorerInfo(props.value as string)\n    return (\n      <EthHashInfo textSize=\"xl\" hash={props.value as string} showCopyBtn explorerUrl={explorerUrl} shortenHash={4} />\n    )\n  }\n\n  return <GenericValue type={type} {...props} />\n}\n\nexport default Value\n","import { Text } from '@gnosis.pm/safe-react-components'\n\nimport styled from 'styled-components'\n\nimport { isArrayParameter } from 'src/routes/safe/components/Balances/SendModal/screens/ContractInteraction/utils'\nimport Value from 'src/routes/safe/components/Transactions/TxList/MethodValue'\nimport { DataDecoded } from '@gnosis.pm/safe-react-gateway-sdk'\n\nconst TxDetailsMethodParam = styled.div<{ isArrayParameter: boolean }>`\n  padding-left: 24px;\n  display: ${({ isArrayParameter }) => (isArrayParameter ? 'block' : 'flex')};\n  align-items: center;\n\n  p:first-of-type {\n    margin-right: ${({ isArrayParameter }) => (isArrayParameter ? '0' : '4px')};\n  }\n`\n\nconst TxInfo = styled.div`\n  padding: 8px 0;\n`\n\nconst StyledMethodName = styled(Text)`\n  white-space: nowrap;\n`\n\nexport const MethodDetails = ({ data }: { data: DataDecoded }): React.ReactElement => {\n  return (\n    <TxInfo>\n      <Text size=\"xl\" strong>\n        {data.method}\n      </Text>\n\n      {data.parameters?.map((param, index) => (\n        <TxDetailsMethodParam key={`${data.method}_param-${index}`} isArrayParameter={isArrayParameter(param.type)}>\n          <StyledMethodName size=\"xl\" strong>\n            {param.name}({param.type}):\n          </StyledMethodName>\n          <Value method={data.method} type={param.type} value={param.value as string} />\n        </TxDetailsMethodParam>\n      ))}\n    </TxInfo>\n  )\n}\n","import { AccordionSummary, IconText } from '@gnosis.pm/safe-react-components'\nimport { DataDecoded, TransactionData } from '@gnosis.pm/safe-react-gateway-sdk'\nimport { ReactElement, ReactNode } from 'react'\n\nimport { getNetworkInfo } from 'src/config'\nimport { fromTokenUnit } from 'src/logic/tokens/utils/humanReadableValue'\nimport { HexEncodedData } from './HexEncodedData'\nimport { MethodDetails } from './MethodDetails'\nimport { isSpendingLimitMethod } from './SpendingLimitDetails'\nimport { ColumnDisplayAccordionDetails, ActionAccordion } from './styled'\nimport { TxInfoDetails } from './TxInfoDetails'\n\ntype MultiSendTxGroupProps = {\n  actionTitle: string\n  children: ReactNode\n  txDetails: {\n    title: string\n    address: string\n    dataDecoded: DataDecoded | null\n  }\n}\n\nconst MultiSendTxGroup = ({ actionTitle, children, txDetails }: MultiSendTxGroupProps): ReactElement => {\n  return (\n    <ActionAccordion>\n      <AccordionSummary>\n        <IconText iconSize=\"sm\" iconType=\"code\" text={actionTitle} textSize=\"xl\" />\n      </AccordionSummary>\n      <ColumnDisplayAccordionDetails>\n        {!isSpendingLimitMethod(txDetails.dataDecoded?.method) && (\n          <TxInfoDetails title={txDetails.title} address={txDetails.address} />\n        )}\n        {children}\n      </ColumnDisplayAccordionDetails>\n    </ActionAccordion>\n  )\n}\n\nexport const MultiSendDetails = ({ txData }: { txData: TransactionData }): ReactElement | null => {\n  const { nativeCoin } = getNetworkInfo()\n  // no parameters for the `multiSend`\n  if (!txData.dataDecoded?.parameters) {\n    // we render the hex encoded data\n    if (txData.hexData) {\n      return <HexEncodedData title=\"Data (hex encoded)\" hexData={txData.hexData} />\n    }\n\n    return null\n  }\n\n  // multiSend has one parameter `transactions` therefore `txData.dataDecoded.parameters[0]` is safe to be used here\n  return (\n    <>\n      {txData.dataDecoded.parameters[0].valueDecoded?.map(({ dataDecoded }, index, valuesDecoded) => {\n        let details\n        const { data, value, to } = valuesDecoded[index]\n        const actionTitle = `Action ${index + 1} ${dataDecoded ? `(${dataDecoded.method})` : ''}`\n        const amount = value ? fromTokenUnit(value, nativeCoin.decimals) : 0\n        const title = `Send ${amount} ${nativeCoin.name} to:`\n\n        if (dataDecoded) {\n          // Backend decoded data\n          details = <MethodDetails data={dataDecoded} />\n        } else {\n          // We couldn't decode it but we have data\n          details = data && <HexEncodedData title=\"Data (hex encoded)\" hexData={data} />\n        }\n\n        return (\n          <MultiSendTxGroup\n            key={`${data ?? to}-${index}`}\n            actionTitle={actionTitle}\n            txDetails={{ title, address: to, dataDecoded }}\n          >\n            {details}\n          </MultiSendTxGroup>\n        )\n      })}\n    </>\n  )\n}\n","import { TransactionData } from '@gnosis.pm/safe-react-gateway-sdk'\nimport { ReactElement, ReactNode } from 'react'\n\nimport { getNetworkInfo } from 'src/config'\nimport { ExpandedTxDetails, isCustomTxInfo } from 'src/logic/safe/store/models/types/gateway.d'\nimport { fromTokenUnit } from 'src/logic/tokens/utils/humanReadableValue'\nimport {\n  DeleteSpendingLimitDetails,\n  isDeleteAllowance,\n  isSetAllowance,\n  ModifySpendingLimitDetails,\n} from './SpendingLimitDetails'\nimport { TxInfoDetails } from './TxInfoDetails'\nimport { sameString } from 'src/utils/strings'\nimport { HexEncodedData } from './HexEncodedData'\nimport { MethodDetails } from './MethodDetails'\nimport { MultiSendDetails } from './MultiSendDetails'\nimport { TransactionInfo } from '@gnosis.pm/safe-react-gateway-sdk'\n\ntype DetailsWithTxInfoProps = {\n  children: ReactNode\n  txData: TransactionData\n  txInfo: TransactionInfo\n}\n\nconst DetailsWithTxInfo = ({ children, txData, txInfo }: DetailsWithTxInfoProps): ReactElement => {\n  const { nativeCoin } = getNetworkInfo()\n  const amount = txData.value ? fromTokenUnit(txData.value, nativeCoin.decimals) : 'n/a'\n  let name\n  let avatarUrl\n\n  if (isCustomTxInfo(txInfo)) {\n    name = txInfo.to.name\n    avatarUrl = txInfo.to.logoUri\n  }\n\n  return (\n    <>\n      <TxInfoDetails\n        address={txData.to.value}\n        name={name}\n        avatarUrl={avatarUrl}\n        title={`Send ${amount} ${nativeCoin.symbol} to:`}\n      />\n\n      {children}\n    </>\n  )\n}\n\ntype TxDataProps = {\n  txData: ExpandedTxDetails['txData']\n  txInfo: TransactionInfo\n}\n\nexport const TxData = ({ txData, txInfo }: TxDataProps): ReactElement | null => {\n  // nothing to render\n  if (!txData) {\n    return null\n  }\n\n  // unknown tx information\n  if (!txData.dataDecoded) {\n    // no hex data, nothing to render\n    if (!txData.hexData) {\n      return null\n    }\n\n    // we render the hex encoded data\n    return (\n      <DetailsWithTxInfo txData={txData} txInfo={txInfo}>\n        <HexEncodedData title=\"Data (hex encoded)\" hexData={txData.hexData} />\n      </DetailsWithTxInfo>\n    )\n  }\n\n  // known data and particularly `multiSend` data type\n  if (sameString(txData.dataDecoded.method, 'multiSend')) {\n    return <MultiSendDetails txData={txData} />\n  }\n\n  // FixMe: this way won't scale well\n  if (isSetAllowance(txData.dataDecoded.method)) {\n    return <ModifySpendingLimitDetails data={txData.dataDecoded} />\n  }\n\n  // FixMe: this way won't scale well\n  if (isDeleteAllowance(txData.dataDecoded.method)) {\n    return <DeleteSpendingLimitDetails data={txData.dataDecoded} />\n  }\n\n  // we render the decoded data\n  return (\n    <DetailsWithTxInfo txData={txData} txInfo={txInfo}>\n      <MethodDetails data={txData.dataDecoded} />\n    </DetailsWithTxInfo>\n  )\n}\n","import { Button, Tooltip } from '@gnosis.pm/safe-react-components'\nimport { MultisigExecutionInfo } from '@gnosis.pm/safe-react-gateway-sdk'\nimport { ReactElement } from 'react'\nimport { useSelector } from 'react-redux'\n\nimport { currentSafeNonce } from 'src/logic/safe/store/selectors'\nimport { Transaction } from 'src/logic/safe/store/models/types/gateway.d'\nimport { useActionButtonsHandlers } from 'src/routes/safe/components/Transactions/TxList/hooks/useActionButtonsHandlers'\n\ntype TxExpandedActionsProps = {\n  transaction: Transaction\n}\n\nexport const TxExpandedActions = ({ transaction }: TxExpandedActionsProps): ReactElement | null => {\n  const {\n    canCancel,\n    handleConfirmButtonClick,\n    handleCancelButtonClick,\n    handleOnMouseEnter,\n    handleOnMouseLeave,\n    isPending,\n    disabledActions,\n  } = useActionButtonsHandlers(transaction)\n  const nonce = useSelector(currentSafeNonce)\n\n  const onExecuteOrConfirm = (event) => {\n    handleOnMouseLeave()\n    handleConfirmButtonClick(event)\n  }\n\n  const getConfirmTooltipTitle = () => {\n    if (transaction.txStatus === 'AWAITING_EXECUTION') {\n      return (transaction.executionInfo as MultisigExecutionInfo)?.nonce === nonce\n        ? 'Execute'\n        : `Transaction with nonce ${nonce} needs to be executed first`\n    }\n    return 'Confirm'\n  }\n\n  // There is a problem in chrome that produces onMouseLeave event not being triggered properly.\n  // https://github.com/facebook/react/issues/4492\n  return (\n    <>\n      <Tooltip title={getConfirmTooltipTitle()} placement=\"top\">\n        <span>\n          <Button\n            size=\"md\"\n            color=\"primary\"\n            disabled={disabledActions}\n            onClick={onExecuteOrConfirm}\n            onMouseEnter={handleOnMouseEnter}\n            onMouseLeave={handleOnMouseLeave}\n            className=\"primary\"\n          >\n            {transaction.txStatus === 'AWAITING_EXECUTION' ? 'Execute' : 'Confirm'}\n          </Button>\n        </span>\n      </Tooltip>\n      {canCancel && (\n        <Button size=\"md\" color=\"error\" onClick={handleCancelButtonClick} className=\"error\" disabled={isPending}>\n          Reject\n        </Button>\n      )}\n    </>\n  )\n}\n","import { SettingsChange } from '@gnosis.pm/safe-react-gateway-sdk'\nimport { ReactElement } from 'react'\n\nimport { AddressInfo } from './AddressInfo'\nimport { InfoDetails } from './InfoDetails'\nimport { TxInfoDetails } from './TxInfoDetails'\n\ntype TxInfoSettingsProps = {\n  settingsInfo: SettingsChange['settingsInfo']\n}\n\nexport const TxInfoSettings = ({ settingsInfo }: TxInfoSettingsProps): ReactElement | null => {\n  if (!settingsInfo) {\n    return null\n  }\n\n  switch (settingsInfo.type) {\n    case 'SET_FALLBACK_HANDLER': {\n      return (\n        <InfoDetails title=\"Set fallback handler:\">\n          <AddressInfo\n            address={settingsInfo.handler.value}\n            name={settingsInfo.handler?.name || undefined}\n            avatarUrl={settingsInfo.handler?.logoUri || undefined}\n          />\n        </InfoDetails>\n      )\n    }\n    case 'ADD_OWNER':\n    case 'REMOVE_OWNER': {\n      const title = settingsInfo.type === 'ADD_OWNER' ? 'Add owner:' : 'Remove owner:'\n      return (\n        <InfoDetails title={title}>\n          <AddressInfo\n            address={settingsInfo.owner.value}\n            name={settingsInfo.owner?.name || undefined}\n            avatarUrl={settingsInfo.owner?.logoUri || undefined}\n          />\n          <InfoDetails title=\"Change required confirmations:\">{settingsInfo.threshold}</InfoDetails>\n        </InfoDetails>\n      )\n    }\n    case 'SWAP_OWNER': {\n      return (\n        <InfoDetails title=\"Swap owner:\">\n          <TxInfoDetails\n            title=\"Old owner\"\n            address={settingsInfo.oldOwner.value}\n            name={settingsInfo.oldOwner?.name || undefined}\n            avatarUrl={settingsInfo.oldOwner?.logoUri || undefined}\n          />\n          <TxInfoDetails\n            title=\"New owner\"\n            address={settingsInfo.newOwner.value}\n            name={settingsInfo.newOwner?.name || undefined}\n            avatarUrl={settingsInfo.newOwner?.logoUri || undefined}\n          />\n        </InfoDetails>\n      )\n    }\n    case 'CHANGE_THRESHOLD': {\n      return <InfoDetails title=\"Change required confirmations:\">{settingsInfo.threshold}</InfoDetails>\n    }\n    case 'CHANGE_IMPLEMENTATION': {\n      return (\n        <InfoDetails title=\"Change implementation:\">\n          <AddressInfo\n            address={settingsInfo.implementation.value}\n            name={settingsInfo.implementation?.name || undefined}\n            avatarUrl={settingsInfo.implementation?.logoUri || undefined}\n          />\n        </InfoDetails>\n      )\n    }\n    case 'ENABLE_MODULE':\n    case 'DISABLE_MODULE': {\n      const title = settingsInfo.type === 'ENABLE_MODULE' ? 'Enable module:' : 'Disable module:'\n      return (\n        <InfoDetails title={title}>\n          <AddressInfo\n            address={settingsInfo.module.value}\n            name={settingsInfo.module?.name || undefined}\n            avatarUrl={settingsInfo.module?.logoUri || undefined}\n          />\n        </InfoDetails>\n      )\n    }\n    default:\n      return null\n  }\n}\n","import { Transfer } from '@gnosis.pm/safe-react-gateway-sdk'\nimport { ReactElement, useEffect, useState } from 'react'\n\nimport { useAssetInfo } from './hooks/useAssetInfo'\nimport { TxInfoDetails } from './TxInfoDetails'\n\ntype Details = {\n  title: string\n  address: string\n  name: string | undefined // AddressEx returns null if unknown\n}\n\nexport const TxInfoTransfer = ({ txInfo }: { txInfo: Transfer }): ReactElement | null => {\n  const assetInfo = useAssetInfo(txInfo)\n  const [details, setDetails] = useState<Details | undefined>()\n\n  useEffect(() => {\n    if (assetInfo && assetInfo.type === 'Transfer') {\n      if (txInfo.direction.toUpperCase() === 'INCOMING') {\n        setDetails({\n          title: `Received ${assetInfo.amountWithSymbol} from:`,\n          address: txInfo.sender.value,\n          name: txInfo.sender.name || undefined,\n        })\n      } else {\n        setDetails({\n          title: `Send ${assetInfo.amountWithSymbol} to:`,\n          address: txInfo.recipient.value,\n          name: txInfo.recipient.name || undefined,\n        })\n      }\n    }\n  }, [assetInfo, txInfo.direction, txInfo.recipient, txInfo.sender])\n\n  return details ? <TxInfoDetails {...details} isTransferType txInfo={txInfo} /> : null\n}\n","import { SettingsChange, TransactionInfo } from '@gnosis.pm/safe-react-gateway-sdk'\nimport { ReactElement } from 'react'\n\nimport { isSettingsChangeTxInfo, isTransferTxInfo } from 'src/logic/safe/store/models/types/gateway.d'\nimport { TxInfoSettings } from './TxInfoSettings'\nimport { TxInfoTransfer } from './TxInfoTransfer'\n\nexport const TxInfo = ({ txInfo }: { txInfo: TransactionInfo }): ReactElement | null => {\n  if (isSettingsChangeTxInfo(txInfo)) {\n    return <TxInfoSettings settingsInfo={(txInfo as SettingsChange).settingsInfo} />\n  }\n\n  if (isTransferTxInfo(txInfo)) {\n    return <TxInfoTransfer txInfo={txInfo} />\n  }\n\n  return null\n}\n","export default __webpack_public_path__ + \"static/media/transactions-list-active.275ff76c.svg\";","export default __webpack_public_path__ + \"static/media/transactions-list-inactive.362550b8.svg\";","import { Text, Icon } from '@gnosis.pm/safe-react-components'\nimport { ReactElement } from 'react'\nimport styled from 'styled-components'\n\nimport Img from 'src/components/layout/Img'\nimport { ExpandedTxDetails, isModuleExecutionInfo } from 'src/logic/safe/store/models/types/gateway.d'\nimport TransactionListActive from './assets/transactions-list-active.svg'\nimport TransactionListInactive from './assets/transactions-list-inactive.svg'\nimport { AddressInfo } from './AddressInfo'\nimport { OwnerList, OwnerListItem } from './styled'\nimport { isCancelTxDetails } from './utils'\n\nconst StyledImg = styled(Img)`\n  background-color: transparent;\n  border-radius: 50%;\n`\n\nexport const TxOwners = ({ txDetails }: { txDetails: ExpandedTxDetails }): ReactElement | null => {\n  const { txInfo, detailedExecutionInfo } = txDetails\n\n  if (!detailedExecutionInfo || isModuleExecutionInfo(detailedExecutionInfo)) {\n    return null\n  }\n\n  const confirmationsNeeded = detailedExecutionInfo.confirmationsRequired - detailedExecutionInfo.confirmations.length\n\n  const CreationNode = isCancelTxDetails(txInfo) ? (\n    <OwnerListItem>\n      <span className=\"icon\">\n        <Icon size=\"sm\" type=\"circleCross\" color=\"error\" />\n      </span>\n      <div className=\"legend\">\n        <Text color=\"error\" size=\"xl\" strong>\n          On-chain rejection created\n        </Text>\n      </div>\n    </OwnerListItem>\n  ) : (\n    <OwnerListItem>\n      <span className=\"icon\">\n        <Icon size=\"sm\" type=\"add\" color=\"primary\" />\n      </span>\n      <div className=\"legend\">\n        <Text color=\"primary\" size=\"xl\" strong>\n          Created\n        </Text>\n      </div>\n    </OwnerListItem>\n  )\n\n  return (\n    <OwnerList>\n      {CreationNode}\n      {detailedExecutionInfo.confirmations.map(({ signer }) => (\n        <OwnerListItem key={signer.value}>\n          <span className=\"icon\">\n            <Icon size=\"sm\" type=\"circleCheck\" color=\"primary\" />\n          </span>\n          <div className=\"legend\">\n            <Text color=\"primary\" size=\"xl\" strong>\n              Confirmed\n            </Text>\n            <AddressInfo\n              address={signer.value}\n              name={signer?.name || undefined}\n              avatarUrl={signer?.logoUri || undefined}\n              shortenHash={4}\n            />\n          </div>\n        </OwnerListItem>\n      ))}\n      {confirmationsNeeded <= 0 ? (\n        <OwnerListItem>\n          <span className=\"icon\">\n            {detailedExecutionInfo.executor ? (\n              <Icon type=\"circleCheck\" size=\"sm\" color=\"primary\" />\n            ) : (\n              <StyledImg alt=\"\" src={TransactionListActive} />\n            )}\n          </span>\n          <div className=\"legend\">\n            <Text color=\"primary\" size=\"xl\" strong>\n              {detailedExecutionInfo.executor ? 'Executed' : 'Execute'}\n            </Text>\n            {detailedExecutionInfo.executor && (\n              <AddressInfo\n                address={detailedExecutionInfo.executor.value}\n                name={detailedExecutionInfo.executor?.name || undefined}\n                avatarUrl={detailedExecutionInfo.executor?.logoUri || undefined}\n                shortenHash={4}\n              />\n            )}\n          </div>\n        </OwnerListItem>\n      ) : (\n        <OwnerListItem>\n          <span className=\"icon\">\n            <StyledImg alt=\"\" src={TransactionListInactive} />\n          </span>\n          <div className=\"legend\">\n            <Text color=\"icon\" size=\"xl\" strong>\n              Execute ({confirmationsNeeded} more {confirmationsNeeded === 1 ? 'confirmation' : 'confirmations'} needed)\n            </Text>\n          </div>\n        </OwnerListItem>\n      )}\n    </OwnerList>\n  )\n}\n","import { Text } from '@gnosis.pm/safe-react-components'\nimport { Operation } from '@gnosis.pm/safe-react-gateway-sdk'\nimport { ReactElement } from 'react'\n\nimport { getExplorerInfo } from 'src/config'\nimport { formatDateTime } from 'src/utils/date'\nimport { ExpandedTxDetails, isMultiSigExecutionDetails } from 'src/logic/safe/store/models/types/gateway.d'\nimport { InlineEthHashInfo } from './styled'\nimport { NOT_AVAILABLE } from './utils'\n\nexport const TxSummary = ({ txDetails }: { txDetails: ExpandedTxDetails }): ReactElement => {\n  const { txHash, detailedExecutionInfo, executedAt, txData } = txDetails\n  const explorerUrl = txHash ? getExplorerInfo(txHash) : null\n  const nonce = isMultiSigExecutionDetails(detailedExecutionInfo) ? detailedExecutionInfo.nonce : undefined\n  const created = isMultiSigExecutionDetails(detailedExecutionInfo) ? detailedExecutionInfo.submittedAt : undefined\n  const safeTxHash = isMultiSigExecutionDetails(detailedExecutionInfo) ? detailedExecutionInfo.safeTxHash : undefined\n\n  return (\n    <>\n      <div className=\"tx-hash\">\n        <Text size=\"xl\" strong as=\"span\">\n          Transaction hash:{' '}\n        </Text>\n        {txHash ? (\n          <InlineEthHashInfo textSize=\"xl\" hash={txHash} shortenHash={8} showCopyBtn explorerUrl={explorerUrl} />\n        ) : (\n          <Text size=\"xl\" as=\"span\">\n            {NOT_AVAILABLE}\n          </Text>\n        )}\n      </div>\n      {safeTxHash !== undefined && (\n        <div className=\"tx-hash\">\n          <Text size=\"xl\" strong as=\"span\">\n            SafeTxHash:{' '}\n          </Text>\n          <InlineEthHashInfo textSize=\"xl\" hash={safeTxHash} shortenHash={8} showCopyBtn />\n        </div>\n      )}\n      {nonce !== undefined && (\n        <div className=\"tx-nonce\">\n          <Text size=\"xl\" strong as=\"span\">\n            Nonce:{' '}\n          </Text>\n          <Text size=\"xl\" as=\"span\">\n            {nonce}\n          </Text>\n        </div>\n      )}\n      {created && (\n        <div className=\"tx-created\">\n          <Text size=\"xl\" strong as=\"span\">\n            Created:{' '}\n          </Text>\n          <Text size=\"xl\" as=\"span\">\n            {formatDateTime(created)}\n          </Text>\n        </div>\n      )}\n      <div className=\"tx-executed\">\n        <Text size=\"xl\" strong as=\"span\">\n          Executed:{' '}\n        </Text>\n        <Text size=\"xl\" as=\"span\">\n          {executedAt ? formatDateTime(executedAt) : NOT_AVAILABLE}\n        </Text>\n      </div>\n      {txData?.operation === Operation.DELEGATE && (\n        <div className=\"tx-operation\">\n          <Text size=\"xl\" strong as=\"span\">\n            Delegate Call\n          </Text>\n        </div>\n      )}\n    </>\n  )\n}\n","import { Icon, Link, Loader, Text } from '@gnosis.pm/safe-react-components'\nimport cn from 'classnames'\nimport { ReactElement, useContext } from 'react'\nimport styled from 'styled-components'\n\nimport {\n  ExpandedTxDetails,\n  isMultiSendTxInfo,\n  isMultiSigExecutionDetails,\n  isSettingsChangeTxInfo,\n  isTransferTxInfo,\n  Transaction,\n} from 'src/logic/safe/store/models/types/gateway.d'\nimport { TransactionActions } from './hooks/useTransactionActions'\nimport { useTransactionDetails } from './hooks/useTransactionDetails'\nimport { TxDetailsContainer, Centered, AlignItemsWithMargin } from './styled'\nimport { TxData } from './TxData'\nimport { TxExpandedActions } from './TxExpandedActions'\nimport { TxInfo } from './TxInfo'\nimport { TxLocationContext } from './TxLocationProvider'\nimport { TxOwners } from './TxOwners'\nimport { TxSummary } from './TxSummary'\nimport { isCancelTxDetails, NOT_AVAILABLE } from './utils'\n\nconst NormalBreakingText = styled(Text)`\n  line-break: normal;\n  word-break: normal;\n`\n\nconst TxDataGroup = ({ txDetails }: { txDetails: ExpandedTxDetails }): ReactElement | null => {\n  if (isTransferTxInfo(txDetails.txInfo) || isSettingsChangeTxInfo(txDetails.txInfo)) {\n    return <TxInfo txInfo={txDetails.txInfo} />\n  }\n\n  if (isCancelTxDetails(txDetails.txInfo) && isMultiSigExecutionDetails(txDetails.detailedExecutionInfo)) {\n    const txNonce = `${txDetails.detailedExecutionInfo.nonce ?? NOT_AVAILABLE}`\n    const isTxExecuted = txDetails.executedAt\n\n    // executed rejection transaction\n    let message = `This is an on-chain rejection that didn't send any funds.\n     This on-chain rejection replaced all transactions with nonce ${txNonce}.`\n\n    if (!isTxExecuted) {\n      // queued rejection transaction\n      message = `This is an on-chain rejection that doesn't send any funds.\n Executing this on-chain rejection will replace all currently awaiting transactions with nonce ${txNonce}.`\n    }\n    return (\n      <>\n        <NormalBreakingText size=\"xl\">{message}</NormalBreakingText>\n        {!isTxExecuted && (\n          <>\n            <br />\n            <Link\n              href=\"https://help.gnosis-safe.io/en/articles/4738501-why-do-i-need-to-pay-for-cancelling-a-transaction\"\n              target=\"_blank\"\n              rel=\"noreferrer\"\n              title=\"Why do I need to pay for rejecting a transaction?\"\n            >\n              <AlignItemsWithMargin>\n                <Text size=\"xl\" as=\"span\" color=\"primary\">\n                  Why do I need to pay for rejecting a transaction?\n                </Text>\n                <Icon size=\"sm\" type=\"externalLink\" color=\"primary\" />\n              </AlignItemsWithMargin>\n            </Link>\n          </>\n        )}\n      </>\n    )\n  }\n\n  if (!txDetails.txData) {\n    return null\n  }\n\n  return <TxData txData={txDetails.txData} txInfo={txDetails.txInfo} />\n}\n\ntype TxDetailsProps = {\n  transaction: Transaction\n  actions?: TransactionActions\n}\n\nexport const TxDetails = ({ transaction, actions }: TxDetailsProps): ReactElement => {\n  const { txLocation } = useContext(TxLocationContext)\n  const { data, loading } = useTransactionDetails(transaction.id)\n\n  if (loading) {\n    return (\n      <Centered padding={10}>\n        <Loader size=\"sm\" />\n      </Centered>\n    )\n  }\n\n  if (!data) {\n    return (\n      <TxDetailsContainer>\n        <Text size=\"xl\" strong>\n          No data available\n        </Text>\n      </TxDetailsContainer>\n    )\n  }\n\n  return (\n    <TxDetailsContainer>\n      <div className={cn('tx-summary', { 'will-be-replaced': transaction.txStatus === 'WILL_BE_REPLACED' })}>\n        <TxSummary txDetails={data} />\n      </div>\n      <div\n        className={cn('tx-details', {\n          'no-padding': isMultiSendTxInfo(data.txInfo),\n          'not-executed': !data.executedAt,\n          'will-be-replaced': transaction.txStatus === 'WILL_BE_REPLACED',\n        })}\n      >\n        <TxDataGroup txDetails={data} />\n      </div>\n      <div\n        className={cn('tx-owners', {\n          'no-owner': txLocation !== 'history' && !actions?.isUserAnOwner,\n          'will-be-replaced': transaction.txStatus === 'WILL_BE_REPLACED',\n        })}\n      >\n        <TxOwners txDetails={data} />\n      </div>\n      {!data.executedAt && txLocation !== 'history' && actions?.isUserAnOwner && (\n        <div className={cn('tx-details-actions', { 'will-be-replaced': transaction.txStatus === 'WILL_BE_REPLACED' })}>\n          <TxExpandedActions transaction={transaction} />\n        </div>\n      )}\n    </TxDetailsContainer>\n  )\n}\n","import { useContext, useEffect, useRef, useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport { ExpandedTxDetails } from 'src/logic/safe/store/models/types/gateway.d'\nimport { fetchTransactionDetails } from 'src/logic/safe/store/actions/fetchTransactionDetails'\nimport { TxLocationContext } from 'src/routes/safe/components/Transactions/TxList/TxLocationProvider'\nimport { getTransactionDetails } from 'src/logic/safe/store/selectors/gatewayTransactions'\nimport { AppReduxState } from 'src/store'\n\nexport type LoadTransactionDetails = {\n  data?: ExpandedTxDetails\n  loading: boolean\n}\n\nexport const useTransactionDetails = (transactionId: string): LoadTransactionDetails => {\n  const { txLocation } = useContext(TxLocationContext)\n  const dispatch = useRef(useDispatch())\n  const [txDetails, setTxDetails] = useState<LoadTransactionDetails>({\n    loading: true,\n    data: undefined,\n  })\n  const data = useSelector((state: AppReduxState) =>\n    getTransactionDetails(state)({ attributeValue: transactionId, attributeName: 'id', txLocation }),\n  )\n\n  useEffect(() => {\n    if (data) {\n      setTxDetails({ loading: false, data })\n    } else {\n      // lookup tx details\n      dispatch.current(fetchTransactionDetails({ transactionId, txLocation }))\n    }\n  }, [data, transactionId, txLocation])\n\n  return txDetails\n}\n","import { EthHashInfo, Text } from '@gnosis.pm/safe-react-components'\nimport { ReactElement } from 'react'\n\nimport { getExplorerInfo } from 'src/config'\nimport { formatDateTime } from 'src/utils/date'\nimport { Transaction } from 'src/logic/safe/store/models/types/gateway.d'\nimport { NOT_AVAILABLE } from './utils'\nimport { InlineEthHashInfo, TxDetailsContainer } from './styled'\nimport { Creation } from '@gnosis.pm/safe-react-gateway-sdk'\nimport { useKnownAddress } from './hooks/useKnownAddress'\n\nexport const TxInfoCreation = ({ transaction }: { transaction: Transaction }): ReactElement | null => {\n  const txInfo = transaction.txInfo as Creation\n  const timestamp = transaction.timestamp\n\n  const creator = useKnownAddress(txInfo.creator.value, {\n    name: txInfo.creator?.name,\n    image: txInfo.creator?.logoUri,\n  })\n  const factory = useKnownAddress(txInfo.factory?.value, {\n    name: txInfo.factory?.name,\n    image: txInfo.factory?.logoUri,\n  })\n  const implementation = useKnownAddress(txInfo.implementation?.value, {\n    name: txInfo.implementation?.name,\n    image: txInfo.implementation?.logoUri,\n  })\n\n  return (\n    <TxDetailsContainer>\n      <div className=\"tx-summary\">\n        <div className=\"tx-hash\">\n          <Text size=\"xl\" strong as=\"span\">\n            Transaction hash:{' '}\n          </Text>\n          <InlineEthHashInfo\n            textSize=\"xl\"\n            hash={txInfo.transactionHash}\n            shortenHash={8}\n            showCopyBtn\n            explorerUrl={getExplorerInfo(txInfo.transactionHash)}\n          />\n        </div>\n        <div className=\"tx-created\">\n          <Text size=\"xl\" strong as=\"span\">\n            Created:{' '}\n          </Text>\n          <Text size=\"xl\" as=\"span\">\n            {formatDateTime(timestamp)}\n          </Text>\n        </div>\n      </div>\n      <div className=\"tx-details\">\n        <div className=\"tx-creator\">\n          <Text size=\"xl\" strong>\n            Creator:{' '}\n          </Text>\n          <EthHashInfo\n            textSize=\"xl\"\n            hash={txInfo.creator.value}\n            showCopyBtn\n            explorerUrl={getExplorerInfo(txInfo.creator.value)}\n            name={creator.name}\n            customAvatar={creator.image}\n            showAvatar\n          />\n        </div>\n        <div className=\"tx-factory\">\n          <Text size=\"xl\" strong>\n            Factory:{' '}\n          </Text>\n          {txInfo.factory ? (\n            <EthHashInfo\n              textSize=\"xl\"\n              hash={txInfo.factory.value}\n              showCopyBtn\n              explorerUrl={getExplorerInfo(txInfo.factory.value)}\n              name={factory.name}\n              customAvatar={factory.image}\n              showAvatar\n            />\n          ) : (\n            <Text size=\"xl\" as=\"span\">\n              {NOT_AVAILABLE}\n            </Text>\n          )}\n        </div>\n        <div className=\"tx-mastercopy\">\n          <Text size=\"xl\" strong>\n            Mastercopy:{' '}\n          </Text>\n          {txInfo.implementation ? (\n            <EthHashInfo\n              textSize=\"xl\"\n              hash={txInfo.implementation.value}\n              showCopyBtn\n              explorerUrl={getExplorerInfo(txInfo.implementation.value)}\n              name={implementation.name}\n              customAvatar={implementation.image}\n              showAvatar\n            />\n          ) : (\n            <Text size=\"xl\" as=\"span\">\n              {NOT_AVAILABLE}\n            </Text>\n          )}\n        </div>\n      </div>\n      <div className=\"tx-owners\" />\n    </TxDetailsContainer>\n  )\n}\n","import { AccordionDetails } from '@gnosis.pm/safe-react-components'\nimport { ReactElement } from 'react'\n\nimport { isCreationTxInfo, Transaction } from 'src/logic/safe/store/models/types/gateway.d'\nimport { NoPaddingAccordion, StyledAccordionSummary } from './styled'\nimport { TxHistoryCollapsed } from './TxHistoryCollapsed'\nimport { TxDetails } from './TxDetails'\nimport { TxInfoCreation } from './TxInfoCreation'\n\nexport const TxHistoryRow = ({ transaction }: { transaction: Transaction }): ReactElement => (\n  <NoPaddingAccordion\n    TransitionProps={{\n      mountOnEnter: false,\n      unmountOnExit: true,\n      appear: true,\n    }}\n  >\n    <StyledAccordionSummary>\n      <TxHistoryCollapsed transaction={transaction} />\n    </StyledAccordionSummary>\n    <AccordionDetails>\n      {isCreationTxInfo(transaction.txInfo) ? (\n        <TxInfoCreation transaction={transaction} />\n      ) : (\n        <TxDetails transaction={transaction} />\n      )}\n    </AccordionDetails>\n  </NoPaddingAccordion>\n)\n","import { ReactElement, useContext } from 'react'\n\nimport { TransactionDetails } from 'src/logic/safe/store/models/types/gateway.d'\nimport { TxsInfiniteScrollContext } from 'src/routes/safe/components/Transactions/TxList/TxsInfiniteScroll'\nimport { formatWithSchema } from 'src/utils/date'\nimport { sameString } from 'src/utils/strings'\nimport { StyledTransactions, StyledTransactionsGroup, SubTitle } from './styled'\nimport { TxHistoryRow } from './TxHistoryRow'\nimport { TxLocationContext } from './TxLocationProvider'\n\nexport const HistoryTxList = ({ transactions }: { transactions: TransactionDetails['transactions'] }): ReactElement => {\n  const { lastItemId, setLastItemId } = useContext(TxsInfiniteScrollContext)\n\n  const [, lastTransactionsGroup] = transactions[transactions.length - 1]\n  const lastTransaction = lastTransactionsGroup[lastTransactionsGroup.length - 1]\n\n  if (!sameString(lastItemId, lastTransaction.id)) {\n    setLastItemId(lastTransaction.id)\n  }\n\n  return (\n    <TxLocationContext.Provider value={{ txLocation: 'history' }}>\n      {transactions?.map(([timestamp, txs]) => (\n        <StyledTransactionsGroup key={timestamp}>\n          <SubTitle size=\"lg\">{formatWithSchema(Number(timestamp), 'MMM d, yyyy')}</SubTitle>\n          <StyledTransactions>\n            {txs.map((transaction) => (\n              <TxHistoryRow key={transaction.id} transaction={transaction} />\n            ))}\n          </StyledTransactions>\n        </StyledTransactionsGroup>\n      ))}\n    </TxLocationContext.Provider>\n  )\n}\n","export default __webpack_public_path__ + \"static/media/no-transactions.0fc3884a.svg\";","import { Loader, Title } from '@gnosis.pm/safe-react-components'\nimport { ReactElement } from 'react'\n\nimport { usePagedHistoryTransactions } from './hooks/usePagedHistoryTransactions'\nimport { Centered, NoTransactions } from './styled'\nimport { HistoryTxList } from './HistoryTxList'\nimport { TxsInfiniteScroll } from './TxsInfiniteScroll'\nimport Img from 'src/components/layout/Img'\nimport NoTransactionsImage from './assets/no-transactions.svg'\n\nexport const HistoryTransactions = (): ReactElement => {\n  const { count, hasMore, next, transactions, isLoading } = usePagedHistoryTransactions()\n\n  if (count === 0 && isLoading) {\n    return (\n      <Centered>\n        <Loader size=\"md\" />\n      </Centered>\n    )\n  }\n\n  if (count === 0 || !transactions.length) {\n    return (\n      <NoTransactions>\n        <Img alt=\"No Transactions yet\" src={NoTransactionsImage} />\n        <Title size=\"xs\">History transactions will appear here </Title>\n      </NoTransactions>\n    )\n  }\n\n  return (\n    <TxsInfiniteScroll next={next} hasMore={hasMore} isLoading={isLoading}>\n      <HistoryTxList transactions={transactions} />\n    </TxsInfiniteScroll>\n  )\n}\n","import { createStyles, makeStyles } from '@material-ui/core'\nimport { background, lg, md, sm } from 'src/theme/variables'\n\nexport const useStyles = makeStyles(\n  createStyles({\n    container: {\n      padding: `${md} ${lg}`,\n    },\n    nonceNumber: {\n      marginTop: sm,\n      fontSize: md,\n    },\n    gasCostsContainer: {\n      backgroundColor: background,\n      padding: `0 ${lg}`,\n    },\n  }),\n)\n","import { Record } from 'immutable'\nimport { ConfirmationProps } from './types/confirmation'\n\nexport const makeConfirmation = Record<ConfirmationProps>({\n  owner: '',\n  type: 'initialised',\n  hash: '',\n  signature: null,\n})\n","import { List } from 'immutable'\nimport {\n  Erc20Transfer,\n  Erc721Transfer,\n  MultisigExecutionInfo,\n  Operation,\n  TokenType,\n} from '@gnosis.pm/safe-react-gateway-sdk'\nimport { useMemo, useRef, useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport { useStyles } from './style'\n\nimport Modal, { ButtonStatus, Modal as GenericModal } from 'src/components/Modal'\nimport Block from 'src/components/layout/Block'\nimport Bold from 'src/components/layout/Bold'\nimport Hairline from 'src/components/layout/Hairline'\nimport Paragraph from 'src/components/layout/Paragraph'\nimport Row from 'src/components/layout/Row'\nimport { TX_NOTIFICATION_TYPES } from 'src/logic/safe/transactions'\nimport { processTransaction } from 'src/logic/safe/store/actions/processTransaction'\nimport { EstimationStatus, useEstimateTransactionGas } from 'src/logic/hooks/useEstimateTransactionGas'\nimport { useEstimationStatus } from 'src/logic/hooks/useEstimationStatus'\nimport { TransactionFees } from 'src/components/TransactionsFees'\nimport { TxParameters } from 'src/routes/safe/container/hooks/useTransactionParameters'\nimport { TxParametersDetail } from 'src/routes/safe/components/Transactions/helpers/TxParametersDetail'\nimport { EditableTxParameters } from 'src/routes/safe/components/Transactions/helpers/EditableTxParameters'\nimport { EMPTY_DATA } from 'src/logic/wallets/ethTransactions'\nimport { userAccountSelector } from 'src/logic/wallets/store/selectors'\nimport { isThresholdReached } from 'src/routes/safe/components/Transactions/TxList/hooks/useTransactionActions'\nimport { ModalHeader } from 'src/routes/safe/components/Balances/SendModal/screens/ModalHeader'\nimport { Overwrite } from 'src/types/helpers'\nimport { ZERO_ADDRESS } from 'src/logic/wallets/ethAddresses'\nimport { makeConfirmation } from 'src/logic/safe/store/models/confirmation'\nimport { NOTIFICATIONS } from 'src/logic/notifications'\nimport enqueueSnackbar from 'src/logic/notifications/store/actions/enqueueSnackbar'\nimport { ExpandedTxDetails, isMultiSigExecutionDetails, Transaction } from 'src/logic/safe/store/models/types/gateway.d'\nimport { extractSafeAddress } from 'src/routes/routes'\nimport ExecuteCheckbox from 'src/components/ExecuteCheckbox'\n\nexport const APPROVE_TX_MODAL_SUBMIT_BTN_TEST_ID = 'approve-tx-modal-submit-btn'\nexport const REJECT_TX_MODAL_SUBMIT_BTN_TEST_ID = 'reject-tx-modal-submit-btn'\n\nconst getModalTitleAndDescription = (\n  thresholdReached: boolean,\n  isCancelTx: boolean,\n): { title: string; description: string } => {\n  const modalInfo = {\n    title: 'Execute transaction rejection',\n    description: 'This action will execute this transaction.',\n  }\n\n  if (isCancelTx) {\n    return modalInfo\n  }\n\n  if (thresholdReached) {\n    modalInfo.title = 'Execute transaction'\n    modalInfo.description =\n      'This action will execute this transaction. A separate Transaction will be performed to submit the execution.'\n  } else {\n    modalInfo.title = 'Approve Transaction'\n    modalInfo.description =\n      'This action will approve this transaction. A separate Transaction will be performed to submit the approval.'\n  }\n\n  return modalInfo\n}\n\nconst useTxInfo = (transaction: Props['transaction']) => {\n  const t = useRef(transaction)\n  const safeAddress = extractSafeAddress()\n\n  const confirmations = useMemo(\n    () =>\n      t.current.txDetails.detailedExecutionInfo && isMultiSigExecutionDetails(t.current.txDetails.detailedExecutionInfo)\n        ? List(\n            t.current.txDetails.detailedExecutionInfo.confirmations.map(({ signer, signature }) =>\n              makeConfirmation({ owner: signer.value, signature }),\n            ),\n          )\n        : List([]),\n    [],\n  )\n\n  const data = useMemo(() => t.current.txDetails.txData?.hexData ?? EMPTY_DATA, [])\n\n  const baseGas = useMemo(\n    () =>\n      isMultiSigExecutionDetails(t.current.txDetails.detailedExecutionInfo)\n        ? t.current.txDetails.detailedExecutionInfo.baseGas\n        : '0',\n    [],\n  )\n\n  const gasPrice = useMemo(\n    () =>\n      isMultiSigExecutionDetails(t.current.txDetails.detailedExecutionInfo)\n        ? t.current.txDetails.detailedExecutionInfo.gasPrice\n        : '0',\n    [],\n  )\n\n  const safeTxGas = useMemo(\n    () =>\n      isMultiSigExecutionDetails(t.current.txDetails.detailedExecutionInfo)\n        ? t.current.txDetails.detailedExecutionInfo.safeTxGas\n        : '0',\n    [],\n  )\n\n  const gasToken = useMemo(\n    () =>\n      isMultiSigExecutionDetails(t.current.txDetails.detailedExecutionInfo)\n        ? t.current.txDetails.detailedExecutionInfo.gasToken\n        : ZERO_ADDRESS,\n    [],\n  )\n\n  const nonce = useMemo(() => (t.current.executionInfo as MultisigExecutionInfo)?.nonce ?? 0, [])\n\n  const refundReceiver = useMemo(\n    () =>\n      isMultiSigExecutionDetails(t.current.txDetails.detailedExecutionInfo)\n        ? t.current.txDetails.detailedExecutionInfo.refundReceiver.value\n        : ZERO_ADDRESS,\n    [],\n  )\n\n  const safeTxHash = useMemo(\n    () =>\n      isMultiSigExecutionDetails(t.current.txDetails.detailedExecutionInfo)\n        ? t.current.txDetails.detailedExecutionInfo.safeTxHash\n        : EMPTY_DATA,\n    [],\n  )\n\n  const value = useMemo(() => {\n    switch (t.current.txInfo.type) {\n      case 'Transfer':\n        if (t.current.txInfo.transferInfo.type === TokenType.NATIVE_COIN) {\n          return t.current.txInfo.transferInfo.value\n        } else {\n          return t.current.txDetails.txData?.value ?? '0'\n        }\n      case 'Custom':\n        return t.current.txInfo.value\n      case 'Creation':\n      case 'SettingsChange':\n      default:\n        return '0'\n    }\n  }, [])\n\n  const to = useMemo(() => {\n    switch (t.current.txInfo.type) {\n      case 'Transfer':\n        if (t.current.txInfo.transferInfo.type === TokenType.NATIVE_COIN) {\n          return t.current.txInfo.recipient.value\n        } else {\n          return (t.current.txInfo.transferInfo as Erc20Transfer | Erc721Transfer).tokenAddress\n        }\n      case 'Custom':\n        return t.current.txInfo.to.value\n      case 'Creation':\n      case 'SettingsChange':\n      default:\n        return safeAddress\n    }\n  }, [safeAddress])\n\n  const operation = useMemo(() => t.current.txDetails.txData?.operation ?? Operation.CALL, [])\n\n  const origin = useMemo(\n    () =>\n      t.current.safeAppInfo ? JSON.stringify({ name: t.current.safeAppInfo.name, url: t.current.safeAppInfo.url }) : '',\n    [],\n  )\n\n  const id = useMemo(() => t.current.id, [])\n\n  return {\n    confirmations,\n    data,\n    baseGas,\n    gasPrice,\n    safeTxGas,\n    gasToken,\n    nonce,\n    refundReceiver,\n    safeTxHash,\n    value,\n    to,\n    operation,\n    origin,\n    id,\n  }\n}\n\ntype Props = {\n  onClose: () => void\n  canExecute?: boolean\n  isCancelTx?: boolean\n  isOpen: boolean\n  transaction: Overwrite<Transaction, { txDetails: ExpandedTxDetails }>\n  txParameters: TxParameters\n}\n\nexport const ApproveTxModal = ({\n  onClose,\n  canExecute = false,\n  isCancelTx = false,\n  isOpen,\n  transaction,\n}: Props): React.ReactElement => {\n  const dispatch = useDispatch()\n  const userAddress = useSelector(userAccountSelector)\n  const classes = useStyles()\n  const safeAddress = extractSafeAddress()\n  const [approveAndExecute, setApproveAndExecute] = useState(canExecute)\n  const executionInfo = transaction.executionInfo as MultisigExecutionInfo\n  const thresholdReached = !!(transaction.executionInfo && isThresholdReached(executionInfo))\n  const _threshold = executionInfo?.confirmationsRequired ?? 0\n  const _countingCurrentConfirmation = (executionInfo?.confirmationsSubmitted ?? 0) + 1\n  const { description, title } = getModalTitleAndDescription(thresholdReached, isCancelTx)\n  const oneConfirmationLeft = !thresholdReached && _countingCurrentConfirmation === _threshold\n  const isTheTxReadyToBeExecuted = oneConfirmationLeft ? true : thresholdReached\n  const [manualGasPrice, setManualGasPrice] = useState<string | undefined>()\n  const [manualGasLimit, setManualGasLimit] = useState<string | undefined>()\n  const {\n    confirmations,\n    data,\n    baseGas,\n    gasPrice,\n    safeTxGas,\n    gasToken,\n    nonce,\n    refundReceiver,\n    safeTxHash,\n    value,\n    to,\n    operation,\n    origin,\n    id,\n  } = useTxInfo(transaction)\n  const {\n    gasLimit,\n    gasPriceFormatted,\n    gasCostFormatted,\n    txEstimationExecutionStatus,\n    isExecution,\n    isOffChainSignature,\n    isCreation,\n  } = useEstimateTransactionGas({\n    txRecipient: to,\n    txData: data,\n    txConfirmations: confirmations,\n    txAmount: value,\n    preApprovingOwner: approveAndExecute ? userAddress : undefined,\n    safeTxGas,\n    operation,\n    manualGasPrice,\n    manualGasLimit,\n  })\n  const doExecute = isExecution && approveAndExecute\n  const [buttonStatus] = useEstimationStatus(txEstimationExecutionStatus)\n\n  const approveTx = (txParameters: TxParameters) => {\n    if (thresholdReached && confirmations.size < _threshold) {\n      dispatch(enqueueSnackbar(NOTIFICATIONS.TX_FETCH_SIGNATURES_ERROR_MSG))\n    } else {\n      dispatch(\n        processTransaction({\n          safeAddress,\n          tx: {\n            id,\n            baseGas,\n            confirmations,\n            data,\n            gasPrice,\n            gasToken,\n            nonce,\n            operation,\n            origin,\n            refundReceiver,\n            safeTxGas,\n            safeTxHash,\n            to,\n            value,\n          },\n          userAddress,\n          notifiedTransaction: TX_NOTIFICATION_TYPES.CONFIRMATION_TX,\n          approveAndExecute: canExecute && approveAndExecute && isTheTxReadyToBeExecuted,\n          ethParameters: txParameters,\n          thresholdReached,\n        }),\n      )\n    }\n    onClose()\n  }\n\n  const getParametersStatus = () => {\n    if (canExecute || approveAndExecute) {\n      return 'SAFE_DISABLED'\n    }\n\n    return 'DISABLED'\n  }\n\n  const closeEditModalCallback = (txParameters: TxParameters) => {\n    const oldGasPrice = gasPriceFormatted\n    const newGasPrice = txParameters.ethGasPrice\n\n    if (newGasPrice && oldGasPrice !== newGasPrice) {\n      setManualGasPrice(txParameters.ethGasPrice)\n    }\n\n    if (txParameters.ethGasLimit && gasLimit !== txParameters.ethGasLimit) {\n      setManualGasLimit(txParameters.ethGasLimit)\n    }\n  }\n\n  return (\n    <Modal description={description} handleClose={onClose} open={isOpen} title={title}>\n      <EditableTxParameters\n        isOffChainSignature={isOffChainSignature}\n        isExecution={doExecute}\n        parametersStatus={getParametersStatus()}\n        ethGasLimit={gasLimit}\n        ethGasPrice={gasPriceFormatted}\n        safeNonce={nonce.toString()}\n        safeTxGas={safeTxGas}\n        closeEditModalCallback={closeEditModalCallback}\n      >\n        {(txParameters, toggleEditMode) => {\n          return (\n            <>\n              <ModalHeader onClose={onClose} title={title} />\n\n              <Hairline />\n\n              {/* Tx info */}\n              <Block className={classes.container}>\n                <Row style={{ flexDirection: 'column' }}>\n                  <Paragraph>{description}</Paragraph>\n                  <Paragraph color=\"medium\" size=\"sm\">\n                    Transaction nonce:\n                    <br />\n                    <Bold className={classes.nonceNumber}>{nonce}</Bold>\n                  </Paragraph>\n\n                  {oneConfirmationLeft && canExecute && !isCancelTx && (\n                    <ExecuteCheckbox onChange={setApproveAndExecute} />\n                  )}\n\n                  {/* Tx Parameters */}\n                  {(approveAndExecute || !isOffChainSignature) && (\n                    <TxParametersDetail\n                      txParameters={txParameters}\n                      onEdit={toggleEditMode}\n                      parametersStatus={getParametersStatus()}\n                      isTransactionCreation={isCreation}\n                      isTransactionExecution={doExecute}\n                      isOffChainSignature={isOffChainSignature}\n                    />\n                  )}\n                </Row>\n              </Block>\n\n              {txEstimationExecutionStatus === EstimationStatus.LOADING ? null : (\n                <Block className={classes.gasCostsContainer}>\n                  <TransactionFees\n                    gasCostFormatted={gasCostFormatted}\n                    isExecution={doExecute}\n                    isCreation={isCreation}\n                    isOffChainSignature={isOffChainSignature}\n                    txEstimationExecutionStatus={txEstimationExecutionStatus}\n                  />\n                </Block>\n              )}\n\n              {/* Footer */}\n              <GenericModal.Footer withoutBorder={buttonStatus !== ButtonStatus.LOADING}>\n                <GenericModal.Footer.Buttons\n                  cancelButtonProps={{ onClick: onClose, text: 'Close' }}\n                  confirmButtonProps={{\n                    onClick: () => approveTx(txParameters),\n                    type: 'submit',\n                    status: buttonStatus,\n                    text: txEstimationExecutionStatus === EstimationStatus.LOADING ? 'Estimating' : undefined,\n                    testId: isCancelTx ? REJECT_TX_MODAL_SUBMIT_BTN_TEST_ID : APPROVE_TX_MODAL_SUBMIT_BTN_TEST_ID,\n                  }}\n                />\n              </GenericModal.Footer>\n            </>\n          )\n        }}\n      </EditableTxParameters>\n    </Modal>\n  )\n}\n","import { List } from 'immutable'\nimport { AnyAction } from 'redux'\nimport { ThunkAction } from 'redux-thunk'\n\nimport { getGnosisSafeInstanceAt } from 'src/logic/contracts/safeContracts'\nimport { getNotificationsFromTxType, NOTIFICATIONS } from 'src/logic/notifications'\nimport {\n  checkIfOffChainSignatureIsPossible,\n  generateSignaturesFromTxConfirmations,\n  getPreValidatedSignatures,\n} from 'src/logic/safe/safeTxSigner'\nimport { getApprovalTransaction, getExecutionTransaction, saveTxToHistory } from 'src/logic/safe/transactions'\nimport { tryOffChainSigning } from 'src/logic/safe/transactions/offchainSigner'\nimport * as aboutToExecuteTx from 'src/logic/safe/utils/aboutToExecuteTx'\nimport { currentChainId } from 'src/logic/config/store/selectors'\nimport { currentSafeCurrentVersion } from 'src/logic/safe/store/selectors'\nimport { EMPTY_DATA } from 'src/logic/wallets/ethTransactions'\nimport { providerSelector } from 'src/logic/wallets/store/selectors'\nimport enqueueSnackbar from 'src/logic/notifications/store/actions/enqueueSnackbar'\nimport closeSnackbarAction from 'src/logic/notifications/store/actions/closeSnackbar'\nimport { fetchSafe } from 'src/logic/safe/store/actions/fetchSafe'\nimport fetchTransactions from 'src/logic/safe/store/actions/transactions/fetchTransactions'\nimport { getLastTx, getNewTxNonce, shouldExecuteTransaction } from 'src/logic/safe/store/actions/utils'\nimport { AppReduxState } from 'src/store'\nimport { getErrorMessage } from 'src/test/utils/ethereumErrors'\nimport { TxParameters } from 'src/routes/safe/container/hooks/useTransactionParameters'\n\nimport { Dispatch, DispatchReturn } from './types'\nimport { PayableTx } from 'src/types/contracts/types'\n\nimport { updateTransactionStatus } from 'src/logic/safe/store/actions/updateTransactionStatus'\nimport { Confirmation } from 'src/logic/safe/store/models/types/confirmation'\nimport { Operation, TransactionStatus } from '@gnosis.pm/safe-react-gateway-sdk'\nimport { isTxPendingError } from 'src/logic/wallets/getWeb3'\nimport { Errors, logError } from 'src/logic/exceptions/CodedException'\nimport { getNetworkId } from 'src/config'\nimport { ETHEREUM_NETWORK } from 'src/config/networks/network.d'\nimport { onboardUser } from 'src/components/ConnectButton'\n\ninterface ProcessTransactionArgs {\n  approveAndExecute: boolean\n  notifiedTransaction: string\n  safeAddress: string\n  tx: {\n    id: string\n    confirmations: List<Confirmation>\n    origin: string // json.stringified url, name\n    to: string\n    value: string\n    data: string\n    operation: Operation\n    nonce: number\n    safeTxGas: string\n    safeTxHash: string\n    baseGas: string\n    gasPrice: string\n    gasToken: string\n    refundReceiver: string\n  }\n  userAddress: string\n  ethParameters?: Pick<TxParameters, 'ethNonce' | 'ethGasLimit' | 'ethGasPriceInGWei'>\n  thresholdReached: boolean\n}\n\ntype ProcessTransactionAction = ThunkAction<Promise<void | string>, AppReduxState, DispatchReturn, AnyAction>\n\nexport const processTransaction =\n  ({\n    approveAndExecute,\n    notifiedTransaction,\n    safeAddress,\n    tx,\n    userAddress,\n    ethParameters,\n    thresholdReached,\n  }: ProcessTransactionArgs): ProcessTransactionAction =>\n  async (dispatch: Dispatch, getState: () => AppReduxState): Promise<DispatchReturn> => {\n    const ready = await onboardUser()\n    if (!ready) return\n\n    const state = getState()\n\n    const { account: from, hardwareWallet, smartContractWallet } = providerSelector(state)\n    const chainId = currentChainId(state)\n    const safeVersion = currentSafeCurrentVersion(state) as string\n    const safeInstance = getGnosisSafeInstanceAt(safeAddress, safeVersion)\n\n    const lastTx = await getLastTx(safeAddress)\n    const nonce = await getNewTxNonce(lastTx, safeInstance)\n    const isExecution = approveAndExecute || (await shouldExecuteTransaction(safeInstance, nonce, lastTx))\n\n    const preApprovingOwner = approveAndExecute && !thresholdReached ? userAddress : undefined\n    let sigs = generateSignaturesFromTxConfirmations(tx.confirmations, preApprovingOwner)\n\n    if (!sigs) {\n      sigs = getPreValidatedSignatures(from)\n    }\n\n    const notificationsQueue = getNotificationsFromTxType(notifiedTransaction, tx.origin)\n    const beforeExecutionKey = dispatch(enqueueSnackbar(notificationsQueue.beforeExecution))\n\n    let txHash\n    let transaction\n    const txArgs = {\n      ...tx, // merge the previous tx with new data\n      safeInstance,\n      to: tx.to,\n      valueInWei: tx.value,\n      data: tx.data ?? EMPTY_DATA,\n      operation: tx.operation,\n      nonce: tx.nonce,\n      safeTxGas: tx.safeTxGas,\n      baseGas: tx.baseGas,\n      gasPrice: tx.gasPrice || '0',\n      gasToken: tx.gasToken,\n      refundReceiver: tx.refundReceiver,\n      sender: from,\n      sigs,\n    }\n\n    try {\n      if (checkIfOffChainSignatureIsPossible(isExecution, smartContractWallet, safeVersion)) {\n        const signature = await tryOffChainSigning(\n          tx.safeTxHash,\n          { ...txArgs, safeAddress },\n          hardwareWallet,\n          safeVersion,\n        )\n\n        if (signature) {\n          dispatch(closeSnackbarAction({ key: beforeExecutionKey }))\n\n          dispatch(\n            updateTransactionStatus({\n              chainId,\n              txStatus: TransactionStatus.PENDING,\n              safeAddress,\n              nonce: tx.nonce,\n              id: tx.id,\n            }),\n          )\n          await saveTxToHistory({ ...txArgs, signature })\n\n          dispatch(fetchTransactions(chainId, safeAddress))\n          return\n        }\n      }\n\n      transaction = isExecution ? getExecutionTransaction(txArgs) : getApprovalTransaction(safeInstance, tx.safeTxHash)\n\n      const gasParam = getNetworkId() === ETHEREUM_NETWORK.MAINNET ? 'maxFeePerGas' : 'gasPrice'\n      const sendParams: PayableTx = {\n        from,\n        value: 0,\n        gas: ethParameters?.ethGasLimit,\n        [gasParam]: ethParameters?.ethGasPriceInGWei,\n        nonce: ethParameters?.ethNonce,\n      }\n\n      await transaction\n        .send(sendParams)\n        .once('transactionHash', async (hash: string) => {\n          txHash = hash\n          dispatch(closeSnackbarAction({ key: beforeExecutionKey }))\n\n          dispatch(\n            updateTransactionStatus({\n              chainId,\n              txStatus: TransactionStatus.PENDING,\n              safeAddress,\n              nonce: tx.nonce,\n              // if we provide the tx ID that sole tx will have the _pending_ status.\n              // if not, all the txs that share the same nonce will have the _pending_ status.\n              id: tx.id,\n            }),\n          )\n\n          try {\n            await saveTxToHistory({ ...txArgs })\n\n            // store the pending transaction's nonce\n            isExecution && aboutToExecuteTx.setNonce(txArgs.nonce)\n\n            dispatch(fetchTransactions(chainId, safeAddress))\n          } catch (e) {\n            logError(Errors._804, e.message)\n          }\n        })\n        .on('error', () => {\n          dispatch(\n            updateTransactionStatus({\n              chainId,\n              txStatus: TransactionStatus.PENDING_FAILED,\n              safeAddress,\n              nonce: tx.nonce,\n              id: tx.id,\n            }),\n          )\n        })\n        .then(async (receipt) => {\n          dispatch(fetchTransactions(chainId, safeAddress))\n\n          if (isExecution) {\n            dispatch(fetchSafe(safeAddress))\n          }\n\n          return receipt.transactionHash\n        })\n    } catch (err) {\n      const notification = isTxPendingError(err)\n        ? NOTIFICATIONS.TX_PENDING_MSG\n        : {\n            ...notificationsQueue.afterExecutionError,\n            message: `${notificationsQueue.afterExecutionError.message} - ${err.message}`,\n          }\n\n      dispatch(closeSnackbarAction({ key: beforeExecutionKey }))\n      dispatch(enqueueSnackbar({ key: err.code, ...notification }))\n\n      dispatch(\n        updateTransactionStatus({\n          chainId,\n          txStatus: TransactionStatus.PENDING_FAILED,\n          safeAddress,\n          nonce: tx.nonce,\n          id: tx.id,\n        }),\n      )\n\n      logError(Errors._804, err.message)\n\n      if (txHash) {\n        const executeData = safeInstance.methods.approveHash(txHash).encodeABI()\n        try {\n          const errMsg = await getErrorMessage(safeInstance.options.address, 0, executeData, from)\n          logError(Errors._804, errMsg)\n        } catch (e) {\n          logError(Errors._804, e.message)\n        }\n      }\n    }\n\n    return txHash\n  }\n","import { MultisigExecutionInfo } from '@gnosis.pm/safe-react-gateway-sdk'\n\nimport { useDispatch } from 'react-redux'\nimport { useStyles } from './style'\nimport Modal, { ButtonStatus, Modal as GenericModal } from 'src/components/Modal'\nimport Block from 'src/components/layout/Block'\nimport Bold from 'src/components/layout/Bold'\nimport Hairline from 'src/components/layout/Hairline'\nimport Paragraph from 'src/components/layout/Paragraph'\nimport Row from 'src/components/layout/Row'\nimport { TX_NOTIFICATION_TYPES } from 'src/logic/safe/transactions'\nimport { EMPTY_DATA } from 'src/logic/wallets/ethTransactions'\nimport { createTransaction } from 'src/logic/safe/store/actions/createTransaction'\nimport { Transaction } from 'src/logic/safe/store/models/types/gateway.d'\nimport { EstimationStatus, useEstimateTransactionGas } from 'src/logic/hooks/useEstimateTransactionGas'\nimport { TransactionFees } from 'src/components/TransactionsFees'\nimport { TxParametersDetail } from 'src/routes/safe/components/Transactions/helpers/TxParametersDetail'\nimport { EditableTxParameters } from 'src/routes/safe/components/Transactions/helpers/EditableTxParameters'\nimport { TxParameters } from 'src/routes/safe/container/hooks/useTransactionParameters'\nimport { ParametersStatus } from 'src/routes/safe/components/Transactions/helpers/utils'\nimport { ModalHeader } from 'src/routes/safe/components/Balances/SendModal/screens/ModalHeader'\nimport { extractSafeAddress } from 'src/routes/routes'\n\ntype Props = {\n  isOpen: boolean\n  onClose: () => void\n  gwTransaction: Transaction\n}\n\nexport const RejectTxModal = ({ isOpen, onClose, gwTransaction }: Props): React.ReactElement => {\n  const dispatch = useDispatch()\n  const safeAddress = extractSafeAddress()\n  const classes = useStyles()\n\n  const {\n    gasCostFormatted,\n    txEstimationExecutionStatus,\n    isExecution,\n    isOffChainSignature,\n    isCreation,\n    gasLimit,\n    gasPriceFormatted,\n  } = useEstimateTransactionGas({\n    txData: EMPTY_DATA,\n    txRecipient: safeAddress,\n  })\n\n  const origin = gwTransaction.safeAppInfo\n    ? JSON.stringify({ name: gwTransaction.safeAppInfo.name, url: gwTransaction.safeAppInfo.url })\n    : ''\n\n  const nonce = (gwTransaction.executionInfo as MultisigExecutionInfo)?.nonce ?? 0\n\n  const sendReplacementTransaction = (txParameters: TxParameters) => {\n    dispatch(\n      createTransaction({\n        safeAddress,\n        to: safeAddress,\n        valueInWei: '0',\n        txNonce: nonce,\n        origin,\n        safeTxGas: txParameters.safeTxGas,\n        ethParameters: txParameters,\n        notifiedTransaction: TX_NOTIFICATION_TYPES.CANCELLATION_TX,\n        navigateToTransactionsTab: false,\n      }),\n    )\n    onClose()\n  }\n\n  const getParametersStatus = (): ParametersStatus => {\n    return 'CANCEL_TRANSACTION'\n  }\n\n  let confirmButtonStatus: ButtonStatus = ButtonStatus.READY\n  let confirmButtonText = 'Reject transaction'\n  if (txEstimationExecutionStatus === EstimationStatus.LOADING) {\n    confirmButtonStatus = ButtonStatus.LOADING\n    confirmButtonText = 'Estimating'\n  }\n\n  return (\n    <Modal description=\"Reject transaction\" handleClose={onClose} open={isOpen} title=\"Reject Transaction\">\n      <EditableTxParameters\n        isOffChainSignature={isOffChainSignature}\n        isExecution={isExecution}\n        ethGasLimit={gasLimit}\n        ethGasPrice={gasPriceFormatted}\n        safeTxGas={'0'}\n        safeNonce={nonce.toString()}\n        parametersStatus={getParametersStatus()}\n      >\n        {(txParameters, toggleEditMode) => {\n          return (\n            <>\n              <ModalHeader onClose={onClose} title=\"Reject transaction\" />\n              <Hairline />\n              <Block className={classes.container}>\n                <Row>\n                  <Paragraph>\n                    This action will reject this transaction. A separate transaction will be performed to submit the\n                    rejection.\n                  </Paragraph>\n                  <Paragraph color=\"medium\" size=\"sm\">\n                    Transaction nonce:\n                    <br />\n                    <Bold className={classes.nonceNumber}>{nonce}</Bold>\n                  </Paragraph>\n                </Row>\n                {/* Tx Parameters */}\n                <TxParametersDetail\n                  txParameters={txParameters}\n                  onEdit={toggleEditMode}\n                  parametersStatus={getParametersStatus()}\n                  isTransactionCreation={isCreation}\n                  isTransactionExecution={isExecution}\n                  isOffChainSignature={isOffChainSignature}\n                />\n              </Block>\n\n              {txEstimationExecutionStatus === EstimationStatus.LOADING ? null : (\n                <Block className={classes.gasCostsContainer}>\n                  <TransactionFees\n                    gasCostFormatted={gasCostFormatted}\n                    isExecution={isExecution}\n                    isCreation={isCreation}\n                    isOffChainSignature={isOffChainSignature}\n                    txEstimationExecutionStatus={txEstimationExecutionStatus}\n                  />\n                </Block>\n              )}\n              <GenericModal.Footer withoutBorder={confirmButtonStatus !== ButtonStatus.LOADING}>\n                <GenericModal.Footer.Buttons\n                  cancelButtonProps={{ onClick: onClose, text: 'Close' }}\n                  confirmButtonProps={{\n                    onClick: () => sendReplacementTransaction(txParameters),\n                    color: 'error',\n                    type: 'submit',\n                    status: confirmButtonStatus,\n                    text: confirmButtonText,\n                  }}\n                />\n              </GenericModal.Footer>\n            </>\n          )\n        }}\n      </EditableTxParameters>\n    </Modal>\n  )\n}\n","import { ReactElement, useContext } from 'react'\nimport { useSelector } from 'react-redux'\n\nimport { ExpandedTxDetails, Transaction } from 'src/logic/safe/store/models/types/gateway.d'\nimport { getTransactionByAttribute } from 'src/logic/safe/store/selectors/gatewayTransactions'\nimport { useTransactionParameters } from 'src/routes/safe/container/hooks/useTransactionParameters'\nimport { AppReduxState } from 'src/store'\nimport { ApproveTxModal } from './modals/ApproveTxModal'\nimport { RejectTxModal } from './modals/RejectTxModal'\nimport { TransactionActionStateContext } from './TxActionProvider'\nimport { Overwrite } from 'src/types/helpers'\n\nexport const ActionModal = (): ReactElement | null => {\n  const { selectedAction, selectAction } = useContext(TransactionActionStateContext)\n  const txParameters = useTransactionParameters()\n\n  const transaction = useSelector((state: AppReduxState) =>\n    getTransactionByAttribute(state)({\n      attributeValue: selectedAction.transactionId,\n      attributeName: 'id',\n      txLocation: selectedAction.txLocation,\n    }),\n  )\n\n  const onClose = () => selectAction({ actionSelected: 'none', transactionId: '', txLocation: 'history' })\n\n  if (!transaction?.txDetails) {\n    return null\n  }\n\n  switch (selectedAction.actionSelected) {\n    case 'cancel':\n      return <RejectTxModal isOpen onClose={onClose} gwTransaction={transaction} />\n\n    case 'confirm':\n      return (\n        <ApproveTxModal\n          isOpen\n          onClose={onClose}\n          transaction={transaction as Overwrite<Transaction, { txDetails: ExpandedTxDetails }>}\n          txParameters={txParameters}\n        />\n      )\n\n    case 'execute':\n      return (\n        <ApproveTxModal\n          canExecute\n          isOpen\n          onClose={onClose}\n          transaction={transaction as Overwrite<Transaction, { txDetails: ExpandedTxDetails }>}\n          txParameters={txParameters}\n        />\n      )\n\n    case 'none':\n      return null\n  }\n}\n","import { useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { loadPagedQueuedTransactions } from 'src/logic/safe/store/actions/transactions/fetchTransactions/loadGatewayTransactions'\nimport { addQueuedTransactions } from 'src/logic/safe/store/actions/transactions/gatewayTransactions'\nimport { currentChainId } from 'src/logic/config/store/selectors'\nimport { QueueTransactionsInfo, useQueueTransactions } from './useQueueTransactions'\nimport { Errors } from 'src/logic/exceptions/CodedException'\nimport { Await } from 'src/types/helpers'\nimport { extractSafeAddress } from 'src/routes/routes'\n\ntype PagedQueuedTransactions = {\n  count: number\n  isLoading: boolean\n  transactions?: QueueTransactionsInfo\n  hasMore: boolean\n  next: () => Promise<void>\n}\n\nexport const usePagedQueuedTransactions = (): PagedQueuedTransactions => {\n  const transactions = useQueueTransactions()\n  const chainId = useSelector(currentChainId)\n\n  const dispatch = useDispatch()\n  const safeAddress = extractSafeAddress()\n  const [hasMore, setHasMore] = useState(true)\n\n  const nextPage = async () => {\n    let results: Await<ReturnType<typeof loadPagedQueuedTransactions>>\n    try {\n      results = await loadPagedQueuedTransactions(safeAddress)\n    } catch (e) {\n      // No next page\n      if (e.content !== Errors._608) {\n        e.log()\n      }\n    }\n\n    if (!results) {\n      setHasMore(false)\n      return\n    }\n\n    const { values, next } = results\n\n    if (next === null) {\n      setHasMore(false)\n    }\n\n    if (values) {\n      dispatch(addQueuedTransactions({ chainId, safeAddress, values }))\n    } else {\n      setHasMore(false)\n    }\n  }\n\n  let count\n  if (transactions) {\n    count = transactions.next.count + transactions.queue.count\n  }\n\n  const isLoading = typeof transactions === 'undefined' || typeof count === 'undefined'\n\n  return { count, isLoading, transactions, hasMore, next: nextPage }\n}\n","import { useEffect, useState } from 'react'\nimport { useSelector } from 'react-redux'\n\nimport { TransactionDetails } from 'src/logic/safe/store/models/types/gateway.d'\nimport { nextTransactions, queuedTransactions } from 'src/logic/safe/store/selectors/gatewayTransactions'\n\nexport type QueueTransactionsInfo = {\n  next: TransactionDetails\n  queue: TransactionDetails\n}\n\n/**\n * Get transactions (next and queue) from nextTransactions and queuedTransactions selectors\n */\nexport const useQueueTransactions = (): QueueTransactionsInfo | undefined => {\n  const nextTxs = useSelector(nextTransactions)\n  const queuedTxs = useSelector(queuedTransactions)\n  const [txsCount, setTxsCount] = useState<{ next: number; queued: number } | undefined>()\n\n  useEffect(() => {\n    const next = nextTxs\n      ? Object.entries(nextTxs).reduce((acc, [, transactions]) => (acc += transactions.length), 0)\n      : 0\n    const queued = queuedTxs\n      ? Object.entries(queuedTxs).reduce((acc, [, transactions]) => (acc += transactions.length), 0)\n      : 0\n    setTxsCount({ next, queued })\n  }, [nextTxs, queuedTxs])\n\n  // no data loaded to the store yet\n  if ((!nextTxs && !queuedTxs) || typeof txsCount === 'undefined') {\n    return\n  }\n\n  return {\n    next: {\n      count: txsCount.next,\n      transactions: nextTxs ? Object.entries(nextTxs) : [],\n    },\n    queue: {\n      count: txsCount.queued,\n      transactions: queuedTxs ? Object.entries(queuedTxs) : [],\n    },\n  }\n}\n","import { MultisigExecutionInfo } from '@gnosis.pm/safe-react-gateway-sdk'\nimport { ReactElement } from 'react'\n\nimport { Transaction } from 'src/logic/safe/store/models/types/gateway.d'\nimport { useAssetInfo } from './hooks/useAssetInfo'\nimport { TransactionActions } from './hooks/useTransactionActions'\nimport { useTransactionStatus } from './hooks/useTransactionStatus'\nimport { useTransactionType } from './hooks/useTransactionType'\nimport { TxCollapsed } from './TxCollapsed'\n\nexport type CalculatedVotes = { votes: string; submitted: number; required: number }\n\nconst calculateVotes = (executionInfo: MultisigExecutionInfo): CalculatedVotes | undefined => {\n  if (!executionInfo) {\n    return\n  }\n\n  const submitted = executionInfo.confirmationsSubmitted\n  const required = executionInfo.confirmationsRequired\n\n  return {\n    votes: `${submitted} out of ${required}`,\n    submitted,\n    required,\n  }\n}\n\ntype TxQueuedCollapsedProps = {\n  isGrouped?: boolean\n  transaction: Transaction\n  actions?: TransactionActions\n}\n\nexport const TxQueueCollapsed = ({ isGrouped = false, transaction, actions }: TxQueuedCollapsedProps): ReactElement => {\n  const executionInfo = transaction.executionInfo as MultisigExecutionInfo\n  const nonce = executionInfo?.nonce\n  const type = useTransactionType(transaction)\n  const info = useAssetInfo(transaction.txInfo)\n  const votes = calculateVotes(executionInfo)\n  const status = useTransactionStatus(transaction)\n\n  return (\n    <TxCollapsed\n      transaction={transaction}\n      isGrouped={isGrouped}\n      nonce={nonce}\n      type={type}\n      info={info}\n      time={transaction.timestamp}\n      votes={votes}\n      actions={actions}\n      status={status}\n    />\n  )\n}\n","import { AccordionDetails } from '@gnosis.pm/safe-react-components'\nimport { TransactionStatus } from '@gnosis.pm/safe-react-gateway-sdk'\nimport { ReactElement, useContext, useEffect, useState } from 'react'\n\nimport { Transaction } from 'src/logic/safe/store/models/types/gateway.d'\nimport { useTransactionActions } from 'src/routes/safe/components/Transactions/TxList/hooks/useTransactionActions'\nimport { NoPaddingAccordion, StyledAccordionSummary } from './styled'\nimport { TxDetails } from './TxDetails'\nimport { TxHoverContext } from './TxHoverProvider'\nimport { TxQueueCollapsed } from './TxQueueCollapsed'\n\ntype TxQueueRowProps = {\n  isGrouped?: boolean\n  transaction: Transaction\n}\n\nexport const TxQueueRow = ({ isGrouped = false, transaction }: TxQueueRowProps): ReactElement => {\n  const { activeHover } = useContext(TxHoverContext)\n  const actions = useTransactionActions(transaction)\n  const [tx, setTx] = useState<Transaction>(transaction)\n\n  useEffect(() => {\n    if (activeHover && activeHover !== transaction.id) {\n      setTx((currTx) => ({ ...currTx, txStatus: TransactionStatus.WILL_BE_REPLACED }))\n      return\n    }\n\n    setTx(transaction)\n  }, [activeHover, transaction])\n\n  return (\n    <NoPaddingAccordion\n      TransitionProps={{\n        mountOnEnter: false,\n        unmountOnExit: true,\n        appear: true,\n      }}\n    >\n      <StyledAccordionSummary>\n        <TxQueueCollapsed isGrouped={isGrouped} transaction={tx} actions={actions} />\n      </StyledAccordionSummary>\n      <AccordionDetails>\n        <TxDetails transaction={tx} actions={actions} />\n      </AccordionDetails>\n    </NoPaddingAccordion>\n  )\n}\n","import { Icon, Link, Text } from '@gnosis.pm/safe-react-components'\nimport { Fragment, ReactElement, useContext } from 'react'\nimport { useSelector } from 'react-redux'\n\nimport { Transaction, TransactionDetails } from 'src/logic/safe/store/models/types/gateway.d'\nimport { sameString } from 'src/utils/strings'\nimport { currentSafeNonce } from 'src/logic/safe/store/selectors'\n\nimport {\n  DisclaimerContainer,\n  GroupedTransactions,\n  GroupedTransactionsCard,\n  SubTitle,\n  StyledTransactions,\n  StyledTransactionsGroup,\n  AlignItemsWithMargin,\n} from './styled'\nimport { TxHoverProvider } from './TxHoverProvider'\nimport { TxLocationContext } from './TxLocationProvider'\nimport { TxQueueRow } from './TxQueueRow'\nimport { TxsInfiniteScrollContext } from './TxsInfiniteScroll'\n\nconst TreeView = ({ firstElement }: { firstElement: boolean }): ReactElement => {\n  return <p className=\"tree-lines\">{firstElement ? <span className=\"first-node\" /> : null}</p>\n}\n\nconst Disclaimer = ({ nonce }: { nonce: string }): ReactElement => {\n  return (\n    <DisclaimerContainer className=\"disclaimer-container\">\n      <Text size=\"xl\" className=\"nonce\">\n        {nonce}\n      </Text>\n      <AlignItemsWithMargin className=\"disclaimer\">\n        <Text as=\"span\" size=\"xl\">\n          These transactions conflict as they use the same nonce. Executing one will automatically replace the other(s).{' '}\n        </Text>\n        <Link\n          href=\"https://help.gnosis-safe.io/en/articles/4730252-why-are-transactions-with-the-same-nonce-conflicting-with-each-other\"\n          target=\"_blank\"\n          rel=\"noreferrer\"\n          title=\"Why are transactions with the same nonce conflicting with each other?\"\n        >\n          <AlignItemsWithMargin>\n            <Text size=\"xl\" as=\"span\" color=\"primary\">\n              Learn more\n            </Text>\n            <Icon size=\"sm\" type=\"externalLink\" color=\"primary\" />\n          </AlignItemsWithMargin>\n        </Link>\n      </AlignItemsWithMargin>\n    </DisclaimerContainer>\n  )\n}\n\ntype QueueTransactionProps = {\n  nonce: string\n  transactions: Transaction[]\n}\n\nconst QueueTransaction = ({ nonce, transactions }: QueueTransactionProps): ReactElement =>\n  transactions.length > 1 ? (\n    <GroupedTransactionsCard>\n      <TxHoverProvider>\n        <Disclaimer nonce={nonce} />\n        <GroupedTransactions>\n          {transactions.map((transaction, index) => (\n            <Fragment key={`${nonce}-${transaction.id}`}>\n              <TreeView firstElement={!index} />\n              <TxQueueRow isGrouped transaction={transaction} />\n            </Fragment>\n          ))}\n        </GroupedTransactions>\n      </TxHoverProvider>\n    </GroupedTransactionsCard>\n  ) : (\n    <TxQueueRow transaction={transactions[0]} />\n  )\n\ntype QueueTxListProps = {\n  transactions: TransactionDetails['transactions']\n}\n\nexport const QueueTxList = ({ transactions }: QueueTxListProps): ReactElement => {\n  const { txLocation } = useContext(TxLocationContext)\n  const nonce = useSelector(currentSafeNonce)\n  const title =\n    txLocation === 'queued.next'\n      ? 'NEXT TRANSACTION'\n      : `QUEUE - Transaction with nonce ${nonce} needs to be executed first`\n\n  const { lastItemId, setLastItemId } = useContext(TxsInfiniteScrollContext)\n  if (transactions.length) {\n    const [, lastTransactionsGroup] = transactions[transactions.length - 1]\n    const lastTransaction = lastTransactionsGroup[lastTransactionsGroup.length - 1]\n\n    if (txLocation === 'queued.queued' && !sameString(lastItemId, lastTransaction.id)) {\n      setLastItemId(lastTransaction.id)\n    }\n  }\n\n  return (\n    <StyledTransactionsGroup>\n      <SubTitle size=\"lg\">{title}</SubTitle>\n      <StyledTransactions>\n        {transactions.map(([nonce, txs]) => (\n          <QueueTransaction key={nonce} nonce={nonce} transactions={txs} />\n        ))}\n      </StyledTransactions>\n    </StyledTransactionsGroup>\n  )\n}\n","import { Loader, Title } from '@gnosis.pm/safe-react-components'\nimport { ReactElement } from 'react'\n\nimport Img from 'src/components/layout/Img'\nimport { ActionModal } from './ActionModal'\nimport NoTransactionsImage from './assets/no-transactions.svg'\nimport { usePagedQueuedTransactions } from './hooks/usePagedQueuedTransactions'\nimport { QueueTxList } from './QueueTxList'\nimport { Centered, NoTransactions } from './styled'\nimport { TxActionProvider } from './TxActionProvider'\nimport { TxsInfiniteScroll } from './TxsInfiniteScroll'\nimport { TxLocationContext } from './TxLocationProvider'\n\nexport const QueueTransactions = (): ReactElement => {\n  const { count, isLoading, hasMore, next, transactions } = usePagedQueuedTransactions()\n\n  if (count === 0 && isLoading) {\n    return (\n      <Centered>\n        <Loader size=\"md\" />\n      </Centered>\n    )\n  }\n\n  // `loading` is, actually `!transactions`\n  // added the `transaction` verification to prevent `Object is possibly 'undefined'` error\n  if (count === 0 || !transactions) {\n    return (\n      <NoTransactions>\n        <Img alt=\"No Transactions yet\" src={NoTransactionsImage} />\n        <Title size=\"xs\">Queue transactions will appear here </Title>\n      </NoTransactions>\n    )\n  }\n\n  return (\n    <TxActionProvider>\n      <TxsInfiniteScroll next={next} hasMore={hasMore} isLoading={isLoading}>\n        {/* Next list */}\n        <TxLocationContext.Provider value={{ txLocation: 'queued.next' }}>\n          {transactions.next.count !== 0 && <QueueTxList transactions={transactions.next.transactions} />}\n        </TxLocationContext.Provider>\n\n        {/* Queue list */}\n        <TxLocationContext.Provider value={{ txLocation: 'queued.queued' }}>\n          {transactions.queue.count !== 0 && <QueueTxList transactions={transactions.queue.transactions} />}\n        </TxLocationContext.Provider>\n      </TxsInfiniteScroll>\n      <ActionModal />\n    </TxActionProvider>\n  )\n}\n","import { Menu, Breadcrumb, BreadcrumbElement, Tab } from '@gnosis.pm/safe-react-components'\nimport { Item } from '@gnosis.pm/safe-react-components/dist/navigation/Tab'\nimport { ReactElement, useEffect } from 'react'\nimport { Route, Switch, useHistory, useRouteMatch } from 'react-router-dom'\n\nimport Col from 'src/components/layout/Col'\nimport { extractPrefixedSafeAddress, generateSafeRoute, SAFE_ROUTES } from 'src/routes/routes'\nimport { SAFE_EVENTS, useAnalytics } from 'src/utils/googleAnalytics'\nimport { HistoryTransactions } from './HistoryTransactions'\nimport { QueueTransactions } from './QueueTransactions'\nimport { ContentWrapper, Wrapper } from './styled'\n\nconst TRANSACTION_TABS: Item[] = [\n  { label: 'Queue', id: SAFE_ROUTES.TRANSACTIONS_QUEUE },\n  { label: 'History', id: SAFE_ROUTES.TRANSACTIONS_HISTORY },\n]\n\nconst GatewayTransactions = (): ReactElement => {\n  const history = useHistory()\n  const { path: selectedTab } = useRouteMatch()\n\n  const { trackEvent } = useAnalytics()\n\n  useEffect(() => {\n    trackEvent(SAFE_EVENTS.TRANSACTIONS)\n  }, [trackEvent])\n\n  const onTabChange = (path: string) => history.replace(generateSafeRoute(path, extractPrefixedSafeAddress()))\n\n  return (\n    <Wrapper>\n      <Menu>\n        <Col start=\"sm\" xs={12}>\n          <Breadcrumb>\n            <BreadcrumbElement iconType=\"transactionsInactive\" text=\"TRANSACTIONS\" />\n          </Breadcrumb>\n        </Col>\n      </Menu>\n      <Tab onChange={onTabChange} items={TRANSACTION_TABS} selectedTab={selectedTab} />\n      <ContentWrapper>\n        <Switch>\n          <Route exact path={SAFE_ROUTES.TRANSACTIONS_QUEUE} render={() => <QueueTransactions />} />\n          <Route exact path={SAFE_ROUTES.TRANSACTIONS_HISTORY} render={() => <HistoryTransactions />} />\n        </Switch>\n      </ContentWrapper>\n    </Wrapper>\n  )\n}\n\nexport default GatewayTransactions\n"],"sourceRoot":""}